<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>热门路由器OpenWrt固件 跑分测试</title>
      <link href="/post/test.html"/>
      <url>/post/test.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="测速命令"><a href="#测速命令" class="headerlink" title="测速命令"></a>测速命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AES:                 openssl speed -evp aes-256-gcm</span><br><span class="line">ChaCha20-poly1305:   openssl speed -evp chacha20-poly1305</span><br><span class="line">Coremark:            /etc/coremark.sh &amp;&amp; cat /etc/bench.log</span><br></pre></td></tr></table></figure><h2 id="小米CR660X"><a href="#小米CR660X" class="headerlink" title="小米CR660X"></a>小米CR660X</h2><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/Typora/202406261435541.png" alt="image-20240626143308878"></p><h2 id="小米AX3000T"><a href="#小米AX3000T" class="headerlink" title="小米AX3000T"></a>小米AX3000T</h2><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/Typora/202406261509234.png" alt="image-20240626150936991"></p><h2 id="移动RAX3000M"><a href="#移动RAX3000M" class="headerlink" title="移动RAX3000M"></a>移动RAX3000M</h2><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/Typora/202406261448829.png" alt="image-20240626144852656"></p><h2 id="H3C-NX30Pro"><a href="#H3C-NX30Pro" class="headerlink" title="H3C NX30Pro"></a>H3C NX30Pro</h2><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/Typora/202406261439190.png" alt="image-20240626143926401"></p><h2 id="贝尔AX3000"><a href="#贝尔AX3000" class="headerlink" title="贝尔AX3000"></a>贝尔AX3000</h2><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/Typora/202406261518689.png" alt="image-20240626151847480"></p><h2 id="红米AX6000"><a href="#红米AX6000" class="headerlink" title="红米AX6000"></a>红米AX6000</h2><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/15_10_30_3_202303151030720.png" alt="image-20230315102549370"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/15_10_30_3_202303151030458.png" alt="2"></p><h2 id="京东云AX1800Pro"><a href="#京东云AX1800Pro" class="headerlink" title="京东云AX1800Pro"></a>京东云AX1800Pro</h2><p><img src="https://xiaowansm5.github.io/picx-images-hosting/%E6%B5%8B%E9%80%9F%E8%B7%91%E5%88%86.7p3gpxgbok.webp" alt="京东云AX1800Pro跑分"></p><h2 id="RK3528A处理器"><a href="#RK3528A处理器" class="headerlink" title="RK3528A处理器"></a>RK3528A处理器</h2><blockquote><p>E20C</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/Typora/202406261415292.png" alt="image-20240626141247591"></p><h2 id="RK3568处理器"><a href="#RK3568处理器" class="headerlink" title="RK3568处理器"></a>RK3568处理器</h2><blockquote><p>电犀牛R66S</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/Typora/202406300821049.png" alt="image-20240630082123501"></p><h2 id="i5-4258U处理器"><a href="#i5-4258U处理器" class="headerlink" title="i5-4258U处理器"></a>i5-4258U处理器</h2><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/Typora/202406261532115.png" alt="image-20240626153012491"></p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/Typora/202406261530827.png" alt="image-20240626153053722"></p><h2 id="N4100处理器"><a href="#N4100处理器" class="headerlink" title="N4100处理器"></a>N4100处理器</h2><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/Typora/202406261634971.png" alt="image-20240626162806732"></p><h2 id="N4500处理器"><a href="#N4500处理器" class="headerlink" title="N4500处理器"></a>N4500处理器</h2><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/Typora/202406261531841.png" alt="image-20240626153135091"></p><h2 id="N100处理器"><a href="#N100处理器" class="headerlink" title="N100处理器"></a>N100处理器</h2><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/08/29_15_10_13_202408291510891.png" alt="6ff0e9c58c2372989b2277c2ef630e9"></p><h2 id="i7-8700b处理器"><a href="#i7-8700b处理器" class="headerlink" title="i7-8700b处理器"></a>i7-8700b处理器</h2><blockquote><p>我家用服务器也随手跑个分</p></blockquote><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/15_10_34_54_202303151034705.png" alt="i7-8700b_AES跑分 ChaCha20 poly1305跑分"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/15_10_34_51_202303151034375.png" alt="i7-8700b_Coremark跑分"></p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p><strong>CpuMark跑分</strong></p><ul><li><p>小米CR660x：5126.561999</p></li><li><p>H3C NX30Pro：8781.076780</p></li><li><p>小米AX3000T：8835.710999</p></li><li><p>移动RAX3000M：8773.372814</p></li><li><p>贝尔AX3000：8839.453427</p></li><li><p>Redmi AX6: 18992.600799</p></li><li><p>京东云ax1800 Pro：20354.350742</p></li><li><p>红米AX6000：27047.794683</p></li><li><p>磊科N60Pro：26721.729625</p></li><li><p>瑞莎e20c：22143.935581</p></li><li><p>N1：18324.457424</p></li><li><p>J1900：34304.732250</p></li><li><p>3965U：31161.142056</p></li><li><p>R4S：41657.987919</p></li><li><p>i5-4258U：56805.153884</p></li><li><p>i5-4210U：32066.176572 </p></li><li><p>N3160：32949.700223</p></li><li><p>N4100：35080.122452</p></li><li><p>RK3568：28169.915810</p></li><li><p>N5000：56439.131719</p></li><li><p>N6000：82654.589913</p></li><li><p>N100：90424.855532</p></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>京东云百里AX6000刷机教程</title>
      <link href="/post/jd-ax6000.html"/>
      <url>/post/jd-ax6000.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="准备刷机文件和工具软件"><a href="#准备刷机文件和工具软件" class="headerlink" title="准备刷机文件和工具软件"></a>准备刷机文件和工具软件</h2><p>SSH工具软件：Xshell <a href="https://pan.lanzoui.com/b0f19ry9g">https://pan.lanzoui.com/b0f19ry9g</a> 或者putty <a href="https://www.423down.com/11333.html">https://www.423down.com/11333.html</a><br>文件传输工具软件：WinSCP <a href="https://winscp.net/eng/index.php">https://winscp.net/eng/index.php</a><br>下载仓库中的刷机文件压缩包，里面包含了需要的刷机文件。</p><h2 id="开启SSH"><a href="#开启SSH" class="headerlink" title="开启SSH"></a>开启SSH</h2><p>百里没有软破解SSH，是通过在原厂固件升级官方的原生OP获取SSH权限再刷第三方OP的。<br>在原厂系统下，升级原生OP：<br>openwrt-re-cp-03-4.1.0.r4005-1287bf0122329d5c3acbb7198e04b1e4.bin<br>注意：升级原生OP官方宣传会失去保修。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/09/9_11_58_42_202409091158477.png" alt="image-20240909110548815"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/09/9_11_6_52_202409091106484.png" alt="image-20240909110610378"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/09/9_11_6_52_202409091106975.png" alt="image-20240909110631920"></p><p>重启后，SSH登录192.168.68.1，端口22，用户名root，没有密码。<br>输入命令删除这两个环境变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fw_setenv jdc_crc_version</span><br><span class="line">fw_setenv jdc_opp_version</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/09/9_11_58_32_202409091158074.png" alt="image-20240909111022922"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/09/9_11_58_27_202409091158090.png" alt="image-20240909111122338"></p><h2 id="备份原厂分区"><a href="#备份原厂分区" class="headerlink" title="备份原厂分区"></a>备份原厂分区</h2><blockquote><p>只需要备份到mmcblk0p12 swap即可，最后一个mmcblk0p13 storage分区太大不备份了。<br>因为plugin、swap分区都有1G，比较大，所以备份到&#x2F;mnt&#x2F;mmcblk0p13中，然后使用WinScp登录再下载下来。<br>WinScp软件登录路由，协议SCP，IP 192.168.68.1，端口22。<br>WinScp下载大文件提示主机超过15秒无通信，需要点击高级，高级站点设置-连接 去掉勾选“优化连接缓冲大小”，再点击登录。</p><p>提示：bl2在&#x2F;dev&#x2F;mmcblk0boot0，uboot在fip分区。<br>unpartitioned.bin是全0的空白文件，是为了后面可以使用备份的分区按顺序直接合并得到一个eMMC img镜像。<br>除更换eMMC，这个img基本用不到，不过还是全部分区备份为好。</p></blockquote><p><strong>直接复制下面全部命令，粘贴执行即可，等待执行完成：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/mmcblk0boot0 of=/mnt/mmcblk0p13/mmcblk0boot0_bl2.bin conv=fsync</span><br><span class="line">dd if=/dev/mmcblk0p1 of=/mnt/mmcblk0p13/mmcblk0p1_PMBR.bin conv=fsync</span><br><span class="line">dd if=/dev/mmcblk0 bs=512 skip=34 count=8158 of=/mnt/mmcblk0p13/mmcblk0p1_unpartitioned.bin conv=fsync</span><br><span class="line">dd if=/dev/mmcblk0p2 of=/mnt/mmcblk0p13/mmcblk0p2_u-boot-env.bin conv=fsync</span><br><span class="line">dd if=/dev/mmcblk0p3 of=/mnt/mmcblk0p13/mmcblk0p3_factory.bin conv=fsync</span><br><span class="line">dd if=/dev/mmcblk0p4 of=/mnt/mmcblk0p13/mmcblk0p4_fip.bin conv=fsync</span><br><span class="line">dd if=/dev/mmcblk0p5 of=/mnt/mmcblk0p13/mmcblk0p5_kernel.bin conv=fsync</span><br><span class="line">dd if=/dev/mmcblk0p6 of=/mnt/mmcblk0p13/mmcblk0p6_rootfs.bin conv=fsync</span><br><span class="line">dd if=/dev/mmcblk0p7 of=/mnt/mmcblk0p13/mmcblk0p7_kernel2.bin conv=fsync</span><br><span class="line">dd if=/dev/mmcblk0p8 of=/mnt/mmcblk0p13/mmcblk0p8_rootfs2.bin conv=fsync</span><br><span class="line">dd if=/dev/mmcblk0p9 of=/mnt/mmcblk0p13/mmcblk0p9_rootfs_data.bin conv=fsync</span><br><span class="line">dd if=/dev/mmcblk0p10 of=/mnt/mmcblk0p13/mmcblk0p10_log.bin conv=fsync</span><br><span class="line">dd if=/dev/mmcblk0p11 of=/mnt/mmcblk0p13/mmcblk0p11_plugin.bin conv=fsync</span><br><span class="line">dd if=/dev/mmcblk0p12 of=/mnt/mmcblk0p13/mmcblk0p12_swap.bin conv=fsync</span><br></pre></td></tr></table></figure><p><strong>执行完后使用WinSCP之类的软件登录路由器，到&#x2F;mnt&#x2F;mmcblk0p13下载文件保存到电脑。</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/09/9_11_58_24_202409091158034.png" alt="image-20240909111453006"></p><h2 id="刷bl2和单分区uboot"><a href="#刷bl2和单分区uboot" class="headerlink" title="刷bl2和单分区uboot"></a>刷bl2和单分区uboot</h2><blockquote><p>百里的bl2和uboot是开启了Secure Boot验证的，需要把bl2和uboot所在fip分区一起替换掉，不能只替换uboot！！！<br>因为有些数据洁癖，我直接将编译得到的bl2二进制文件尾部填充0扩大至256KB，fip尾部填充0至2048KB。<br>这样刷文件就可直接覆盖有数据部分，和清空分区再刷是一样，所以文件看着有点大。<br>直接使用编译得到的原始文件也没问题，只是文件大小不一，原分区上可能有点多余数据不会被覆盖，这也不影响使用。</p></blockquote><p>将<code>mt7986_jdcloud_re-cp-03-bl2_mod.bin</code>和<code>mt7986_jdcloud_re-cp-03-fip_mod.bin</code>上传tmp文件夹，SSH输入命令验证md5：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5sum /tmp/mt7986_jdcloud_re-cp-03*_mod.bin</span><br></pre></td></tr></table></figure><p>我这个2024.04.05版的bl2、uboot，md5值是这样：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@OpenWrt:~# md5sum /tmp/mt7986_jdcloud_re-cp-03-*_mod.bin</span><br><span class="line">ba6edf33d825811ddabc11b54312cccd  /tmp/mt7986_jdcloud_re-cp-03-bl2_mod.bin</span><br><span class="line">cc78be76b99ed27ed6e8a6f7cef112c2  /tmp/mt7986_jdcloud_re-cp-03-fip_mod.bin</span><br></pre></td></tr></table></figure></blockquote><p>核对md5正常后，输入命令刷写bl2和uboot，命令全部复制一起执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ash</span><br><span class="line">echo 0 &gt; /sys/block/mmcblk0boot0/force_ro</span><br><span class="line">dd if=/tmp/mt7986_jdcloud_re-cp-03-bl2_mod.bin of=/dev/mmcblk0boot0 conv=fsync</span><br><span class="line">echo 1 &gt; /sys/block/mmcblk0boot0/force_ro</span><br><span class="line">dd if=/tmp/mt7986_jdcloud_re-cp-03-fip_mod.bin of=$(blkid -t PARTLABEL=fip -o device) conv=fsync</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/09/9_11_58_20_202409091158910.png" alt="image-20240909112158623"></p><p>刷写完没有报错，则检查下分区的md5值，和我一样即可，不一样就重新刷，不能重启！！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5sum /dev/mmcblk0boot0 &amp;&amp; md5sum $(blkid -t PARTLABEL=fip -o device)</span><br></pre></td></tr></table></figure><p>输出结果和我一样即可：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@OpenWrt:~# md5sum /dev/mmcblk0boot0 &amp;&amp; md5sum $(blkid -t PARTLABEL=fip -o device)</span><br><span class="line">57b4fda67b6ef534f50fa5b7f1f15be4  /dev/mmcblk0boot0</span><br><span class="line">cc78be76b99ed27ed6e8a6f7cef112c2  /dev/mmcblk0p4</span><br></pre></td></tr></table></figure></blockquote><p>到这里bl2和单分区uboot已经刷好了，不要重启，接着刷单分区gpt分区表。</p><h2 id="刷单分区gpt分区表"><a href="#刷单分区gpt分区表" class="headerlink" title="刷单分区gpt分区表"></a>刷单分区gpt分区表</h2><blockquote><p>原生OP没有sgdisk，刷单分区gpt分区表前，首先安装sgdisk以便后面编辑分区表。<br>将sgdisk文件夹里面的sgdisk_1.0.6-1_aarch64_cortex-a53.ipk上传tmp文件夹，然后SSH运行下面命令安装：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg install -d root /tmp/sgdisk_1.0.6-1_aarch64_cortex-a53.ipk</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/09/9_11_58_18_202409091158613.png" alt="image-20240909112506647"></p><blockquote><p>分区表文件夹中的gpt文件，rootfs512M对应rootfs是512MB大小，依次类推。<br>这个rootfs就是固件+overlay的大小，overlay近似是刷固件后剩余软件包空间大小，选择自己需要的rootfs大小的分区表即可。</p></blockquote><p>上传你需要rootfs大小的gpt分区表文件到tmp文件夹，先验证md5：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5sum /tmp/jdcloud_re-cp-03_single-boot_rootfs*M_no-last-partition-gpt.bin</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@OpenWrt:~# md5sum /tmp/jdcloud_re-cp-03_single-boot_rootfs*M_no-last-partition-gpt.bin</span><br><span class="line">234744da27ad54233bc3d528b05443a1  /tmp/jdcloud_re-cp-03_single-boot_rootfs512M_no-last-partition-gpt.bin</span><br><span class="line">e120108dbfd143dc2b92d0ed8ad0e7f2  /tmp/jdcloud_re-cp-03_single-boot_rootfs1024M_no-last-partition-gpt.bin</span><br><span class="line">514797957059d0a808a3ab53327d79c4  /tmp/jdcloud_re-cp-03_single-boot_rootfs2048M_no-last-partition-gpt.bin</span><br></pre></td></tr></table></figure></blockquote><p>你上传的文件的md5信息和上面对应文件的md5对比，没问题即可。<br>接着修改下面命令中的gpt文件名为你上传的文件名，然后复制命令粘贴一起执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dd if=/tmp/jdcloud_re-cp-03_single-boot_rootfs512M_no-last-partition-gpt.bin of=/dev/mmcblk0 bs=512 count=34 conv=fsync &amp;&amp; \</span><br><span class="line">sgdisk -e -n 0:0:0 -c 0:storage -t 0:0FC63DAF-8483-4772-8E79-3D69D8477DE4 -u 0:5D18C072-ADB3-412B-BF95-37617B01ADF8 -p /dev/mmcblk0</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/09/9_11_58_15_202409091158263.png" alt="image-20240909113355892"></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">root@OpenWrt:~# md5sum /tmp/jdcloud_re-cp-03_single-boot_rootfs*M_no-last-partition-gpt.bin</span><br><span class="line">514797957059d0a808a3ab53327d79c4  /tmp/jdcloud_re-cp-03_single-boot_rootfs2048M_no-last-partition-gpt.bin</span><br><span class="line">root@OpenWrt:~# dd if=/tmp/jdcloud_re-cp-03_single-boot_rootfs512M_no-last-partition-gpt.bin of=/dev/mmcblk0 bs=512 count=34 conv=fsync &amp;&amp; \</span><br><span class="line">&gt; sgdisk -e -n 0:0:0 -c 0:storage -t 0:0FC63DAF-8483-4772-8E79-3D69D8477DE4 -u 0:5D18C072-ADB3-412B-BF95-37617B01ADF8 -p /dev/mmcblk0</span><br><span class="line">dd: can&#x27;t open &#x27;/tmp/jdcloud_re-cp-03_single-boot_rootfs512M_no-last-partition-gpt.bin&#x27;: No such file or directory</span><br><span class="line">root@OpenWrt:~# dd if=/tmp/jdcloud_re-cp-03_single-boot_rootfs2048M_no-last-partition-gpt.bin of=/dev/mmcblk0 bs=512 count=34 conv=fsync &amp;&amp; \</span><br><span class="line">&gt; sgdisk -e -n 0:0:0 -c 0:storage -t 0:0FC63DAF-8483-4772-8E79-3D69D8477DE4 -u 0:5D18C072-ADB3-412B-BF95-37617B01ADF8 -p /dev/mmcblk0</span><br><span class="line">34+0 records in</span><br><span class="line">34+0 records out</span><br><span class="line">Setting name!</span><br><span class="line">partNum is 8</span><br><span class="line">Disk /dev/mmcblk0: 119783424 sectors, 57.1 GiB</span><br><span class="line">Sector size (logical/physical): 512/512 bytes</span><br><span class="line">Disk identifier (GUID): 2BD17853-102B-4500-AA1A-8A21D4D7984D</span><br><span class="line">Partition table holds up to 128 entries</span><br><span class="line">Main partition table begins at sector 2 and ends at sector 33</span><br><span class="line">First usable sector is 34, last usable sector is 119783390</span><br><span class="line">Partitions will be aligned on 1024-sector boundaries</span><br><span class="line">Total free space is 8158 sectors (4.0 MiB)</span><br><span class="line"></span><br><span class="line">Number  Start (sector)    End (sector)  Size       Code  Name</span><br><span class="line">   1            8192            9215   512.0 KiB   8300  u-boot-env</span><br><span class="line">   2            9216           13311   2.0 MiB     8300  factory</span><br><span class="line">   3           13312           17407   2.0 MiB     8300  fip</span><br><span class="line">   4           17408           50175   16.0 MiB    8300  kernel</span><br><span class="line">   5           50176         4244479   2.0 GiB     8300  rootfs</span><br><span class="line">   6         4244480         4378623   65.5 MiB    8300  log</span><br><span class="line">   7         4378624         6475775   1024.0 MiB  8300  plugin</span><br><span class="line">   8         6475776         8572927   1024.0 MiB  8300  swap</span><br><span class="line">   9         8572928       119783390   53.0 GiB    8300  storage</span><br><span class="line">Warning: The kernel is still using the old partition table.</span><br><span class="line">The new table will be used at the next reboot or after you</span><br><span class="line">run partprobe(8) or kpartx(8)</span><br><span class="line">The operation has completed successfully.</span><br></pre></td></tr></table></figure></blockquote><p>dd写入没有报错，sgdisk最后输出successfully即可，有错误则及时排错，重新刷。<br>检查第5分区rootfs是分区表设置的大小，比如rootfs512M的分区表rootfs就是512MB。<br>检查第9分区storage大小接近整个EMMC大小，比如128G EMMC，storage分区有112GB左右。</p><p>建议此时备份下载修改后的分区表，以后有问题进不了系统，可以直接uboot刷这个分区表。<br>当然刷no-last-partition的分区表后再新建分区也行，一样的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/mmcblk0 bs=512 count=34 of=/tmp/mmcblk0_GPT_sgdisk.bin</span><br></pre></td></tr></table></figure><p>都没有问题可以断电，按reset上电进uboot刷固件了。</p><h2 id="uboot刷固件和格式化data分区"><a href="#uboot刷固件和格式化data分区" class="headerlink" title="uboot刷固件和格式化data分区"></a>uboot刷固件和格式化data分区</h2><p>这个uboot不支持DHCP，电脑需要设置ip 192.168.1.2&#x2F;24，连接网线到路由器lan口，路由上电按reset，等待灯变为蓝色，说明uboot webui已启动，可以松开按钮，浏览器打开192.168.1.1，上传固件刷写成功后绿灯会亮3秒，然后重启。注意：其他大佬的uboot可能指示灯不一样。<br>这个uboot是2024.04.05编译的 U-Boot 2022.07-rc3 (Apr 05 2024 - 16:00:44 +0800)<br>uboot不仅可以刷固件，还可以更新bl2、uboot和gpt，打开相应网页即可，非不要不需要更新：<br><a href="http://192.168.1.1/bl2.html">http://192.168.1.1/bl2.html</a><br><a href="http://192.168.1.1/uboot.html">http://192.168.1.1/uboot.html</a><br><a href="http://192.168.1.1/gpt.html">http://192.168.1.1/gpt.html</a></p><p>uboot刷好第三方OP系统后，先SSH格式化下最后一个storage分区。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext4 $(blkid -t PARTLABEL=storage -o device)</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/09/9_11_58_9_202409091158130.png" alt="image-20240909114659000"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/09/9_11_58_6_202409091158648.png" alt="image-20240909114713624"></p><h2 id="完成🎉🎉🎉"><a href="#完成🎉🎉🎉" class="headerlink" title="完成🎉🎉🎉"></a>完成🎉🎉🎉</h2><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/09/9_11_58_2_202409091158752.png" alt="image-20240909115800776"></p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> 京东云ax6000 </tag>
            
            <tag> 不死uboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>诺基亚贝尔AX3000(EA0326GMP)刷机教程</title>
      <link href="/post/EA0326GMP.html"/>
      <url>/post/EA0326GMP.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>刷机文件和固件下载：</p><p><a href="https://pan.wwang.pw/%F0%9F%94%A5OpenWrt_LEAN/%E8%AF%BA%E5%9F%BA%E4%BA%9A%E8%B4%9D%E5%B0%94AX3000">https://pan.wwang.pw/%F0%9F%94%A5OpenWrt_LEAN/%E8%AF%BA%E5%9F%BA%E4%BA%9A%E8%B4%9D%E5%B0%94AX3000</a></p><p>如下载地址失效，请加群获取</p></blockquote><h2 id="刷机步骤："><a href="#刷机步骤：" class="headerlink" title="刷机步骤："></a>刷机步骤：</h2><h3 id="开启SSH"><a href="#开启SSH" class="headerlink" title="开启SSH"></a>开启SSH</h3><ol><li>进入路由器管理页面<br>电脑网线连接lan口，浏览器输入ip地址进入配置页面 管理ip: 192.168.10.1 输入密码登录 <img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/Typora/202405200758188.png" alt="img"></li><li>导入配置<br>进入【备份和恢复】菜单，选择<code>EA0326GMP_SSH.tar.gz</code>文件导入 导入后设备会重启，大概3分钟左右后设备重启完成，可以通过ssh工具进入路由器后台</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/Typora/202405200759353.png" alt="img"></p><p>这个步骤的原理很简单，就是修改了系统中配置文件，该配置文件用于控制系统中ssh服务器开关，系统重启后会读取该配置， 发现配置开了之后会自动启动ssh服务。</p><h3 id="刷入uboot"><a href="#刷入uboot" class="headerlink" title="刷入uboot"></a>刷入uboot</h3><p>使用MobaXterm或者winscp工具，协议选择scp，用户名为root，密码为空</p><p>将uboot文件上传到路由器后台的&#x2F;tmp目录，文件名称为: <code>mt7981_nokia_ea0326gmp-fip-fixed-parts.bin</code></p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/Typora/202405200759317.png" alt="img"></p><p>计算uboot md5<br>为了防止文件错误，最好计算一下uboot的md5，如果文件错误，会导致路由器变砖 如果md5不对请停止下面的操作 输入<code>md5sum /tmp/mt7981_nokia_ea0326gmp-fip-fixed-parts.bin</code>命令可以查看md5</p><p>md5应该和刷机包说明中的md5一致，写入uboot</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mtd write /tmp/mt7981_nokia_ea0326gmp-fip-fixed-parts.bin FIP</span><br></pre></td></tr></table></figure><p>命令成功的输出应该和教程图片中的一致</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/Typora/202405200759727.png" alt="img"></p><h3 id="刷入OpenWrt固件"><a href="#刷入OpenWrt固件" class="headerlink" title="刷入OpenWrt固件"></a>刷入OpenWrt固件</h3><ol><li><p>修改网卡ip，手动设置电脑网卡ip为192.168.1.22，子网掩码为255.255.255.0</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/09/9_19_39_42_202409091939224.png" alt="image-20240909153110544"></p></li><li><p>进入uboot web页面，按住mesh按键不松手，再拔插电源，大概10s左右后松开mesh按键，然后打开浏览器，输入192.168.1.1进入uboot的web页面</p></li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/09/9_19_39_45_202409091939417.png" alt="image-20240909153159592"></p><ol start="3"><li><p>点浏览，immortalwrt源码固件选factory.bin文件刷入，LEAN大佬源码编译的固件选sysupgrade.bin文件即可，再点Upload，继续点Update，等待两分钟即可。</p><p>可以通过该界面随意切换固件，不用担心变砖了。<br><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/09/9_19_39_52_202409091939876.png" alt="image-20240909153424223"></p></li><li><p>将网卡ip恢复成自动获取，然后在浏览器输入192.168.5.1进入管理页面，密码是password，刷机成功。</p></li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/09/9_19_39_47_202409091939597.png" alt="image-20240909154208400"></p><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><ul><li><code>https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=8350171</code></li><li><code>https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=8351029</code></li></ul><h2 id="uboot来源："><a href="#uboot来源：" class="headerlink" title="uboot来源："></a>uboot来源：</h2><p><a href="https://github.com/hanwckf/bl-mt798x">https://github.com/hanwckf/bl-mt798x</a></p><h2 id="购买路由器"><a href="#购买路由器" class="headerlink" title="购买路由器"></a>购买路由器</h2><p>小店已上架同配置的路由器，刷好固件再发货，不愿意折腾的可以下单。</p><p>购买链接：<a href="https://shop.wwang.pw/">https://shop.wwang.pw/</a></p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> 贝尔AX3000 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安博通ABT-ASR3000刷机指南</title>
      <link href="/post/ABT-ASR3000.html"/>
      <url>/post/ABT-ASR3000.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>全套刷机工具：</p><p><a href="https://pan.wwang.pw/%F0%9F%94%A5OpenWrt_LEAN/%E5%AE%89%E5%8D%9A%E9%80%9AABT-ASR3000/%E5%88%B7%E6%9C%BA%E5%B7%A5%E5%85%B7">https://pan.wwang.pw/🔥OpenWrt_LEAN&#x2F;安博通ABT-ASR3000&#x2F;刷机工具</a></p></blockquote><h2 id="开启telnet"><a href="#开启telnet" class="headerlink" title="开启telnet"></a>开启telnet</h2><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/08/20_12_22_17_202408201222785.png" alt="01"></p><ol><li><p>下载附件e-202306161250-cfg.tar.gz，原厂系统：系统工具&#x3D;&gt;配置管理&#x3D;&gt;导入配置，重启；</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/08/20_12_23_1_202408201223844.png" alt="02"></p></li><li><p>开机后原来的wifi密码和后台密码不变，进入系统提示root无密码，不要搭理，系统工具&#x3D;&gt;重启&#x3D;&gt;立即重启；或者直接插拔电源重启</p></li><li><p>重启后已开启telnet,使用putty或其它工具登录telnet，用户名root，无密码；</p></li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/08/20_12_25_36_202408201225875.png" alt="image-20240820122533754"></p><h2 id="开启SSH"><a href="#开启SSH" class="headerlink" title="开启SSH"></a>开启SSH</h2><p>路由器联网，逐条运行以下命令开启SSH：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo arch aarch64_cortex-a53 300 &gt;&gt; /etc/opkg.conf</span><br><span class="line">cd /tmp</span><br><span class="line">wget https://downloads.openwrt.org/releases/packages-19.07/aarch64_cortex-a53/base/dropbear_2019.78-2_aarch64_cortex-a53.ipk</span><br><span class="line">opkg install ./dropbear_2019.78-2_aarch64_cortex-a53.ipk -f /etc/opkg.conf --force-depends</span><br><span class="line">/etc/init.d/dropbear enable</span><br><span class="line">/etc/init.d/dropbear start</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/08/20_12_24_49_202408201224540.png" alt="04"></p><h2 id="刷入uboot"><a href="#刷入uboot" class="headerlink" title="刷入uboot"></a>刷入uboot</h2><p>选SSH进入路由器tmp文件夹，上传<code>mt7981_abt-asr3000_uboot.bin</code>，运行以下命令刷入大分区uboot</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mtd write /tmp/mt7981_abt-asr3000_uboot.bin FIP</span><br></pre></td></tr></table></figure><p><img src="https://blog.wwang.pw/picx-images-hosting/image-20240820122742000.7w6qzb18b1.webp"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/08/20_12_29_44_202408201229350.png" alt="04-1"></p><h2 id="进uboot刷固件"><a href="#进uboot刷固件" class="headerlink" title="进uboot刷固件"></a>进uboot刷固件</h2><p>按住路由器MESH键插电，电脑网卡设置IP：192.168.1.100，网线插路由器LAN口，登录192.168.1.1进入uboot webui，分区选QWRT，刷入openwrt-mediatek-filogic-abt_asr3000-squashfs-sysupgrade.bin</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/08/20_12_31_29_202408201231063.png" alt="05"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/08/20_12_31_37_202408201231484.png" alt="06"></p><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>OP后台地址：192.168.5.1，密码：password</p><p><img src="https://blog.wwang.pw/picx-images-hosting/2024-08-20_21-07-51.5mnqgayrkw.webp"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/08/20_12_34_29_202408201234675.png" alt="2024-08-16_19-24-11"></p><h2 id="购买路由器"><a href="#购买路由器" class="headerlink" title="购买路由器"></a>购买路由器</h2><p>小店已上架同配置的路由器，刷好固件再发货，不愿意折腾的可以下单。</p><p>购买链接：<a href="https://shop.wwang.pw/">https://shop.wwang.pw/</a></p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> 不死uboot </tag>
            
            <tag> 安博通 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenWrt下访问光猫教程</title>
      <link href="/post/modem.html"/>
      <url>/post/modem.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ol><li>首先在wan口设置一下网关跃点，代表拨号的wan是第一优先级。这样正常的网络流量还是走宽带，不会影响网络访问。</li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/08/4_16_21_57_202408041621941.png" alt="image-20240804161916045"></p><ol start="2"><li>添加一个新接口，命名随意，我命名为MAO，MAO的网关跃点设置为60，比之前wan的数字大就行。代表MAO的优先级低于WAN。</li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/08/4_16_21_53_202408041621611.png" alt="image-20240804162041064"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/08/4_16_23_43_202408041623008.png" alt="image-20240804162059099"></p><ol start="3"><li>完毕，保存。</li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/08/4_16_23_25_202408041623900.png" alt="image-20240804162141580"></p>]]></content>
      
      
      <categories>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 dd 命令快速更换 OpenWrt 固件</title>
      <link href="/post/dd-op.html"/>
      <url>/post/dd-op.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="上传-OpenWrt-固件"><a href="#上传-OpenWrt-固件" class="headerlink" title="上传 OpenWrt 固件"></a>上传 OpenWrt 固件</h3><p>点击左下方的文件，然后找到并打开 <code>tmp</code> 文件夹，具体路径为 <code>/tmp</code> 。</p><p>把直接固件拖到 <code>/tmp</code> 目录中（拖到下图中的红框位置）。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/image-20240723094553301.png" alt="image-20240723094553301"></p><h3 id="dd-命令写盘"><a href="#dd-命令写盘" class="headerlink" title="dd 命令写盘"></a>dd 命令写盘</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /tmp</span><br></pre></td></tr></table></figure><p>查看你刚刚上传的固件，看到的是 op.img 就表示上传成功了。</p><p>开始写盘，输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/tmp/op.img of=/dev/nvme0n1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/image-20240723094135489.png" alt="image-20240723094135489"></p><p>其中nvme0n1为系统盘，注意是指定整个磁盘而不是磁盘上的分区。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/image-20240723094218761.png" alt="image-20240723094218761"></p><p>后是等待刷写，然后出现下面这两排字母表示刷机成功了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3771704+0 records in</span><br><span class="line">3771704+0 records out</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/image-20240723095039109.png" alt="image-20240723095039109"></p>]]></content>
      
      
      <categories>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>京东云无线宝亚瑟AX1800Pro低版本免拆刷机</title>
      <link href="/post/ax1800pro.html"/>
      <url>/post/ax1800pro.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="京东云AX1800-Pro开箱"><a href="#京东云AX1800-Pro开箱" class="headerlink" title="京东云AX1800 Pro开箱"></a>京东云AX1800 Pro开箱</h2><p>亚瑟搭载了<code>高通IPQ6000</code>处理器，主要参数如下：</p><ul><li>处理器：高通IPQ6000 四核1.2GHz</li><li>运行内存：512MB</li><li>eMMC存储：64GB</li><li>FEM功放：独立5路</li><li>无线协议：Wi-Fi 6 (802.11ax)</li><li>2.4G WiFi 2x2 574Mbps</li><li>5G WiFi 2x2 1201Mbps</li><li>网络接口：千兆网口 × 4</li><li>USB接口：USB 3.0 × 1</li></ul><p>百元出头这个配置，简直就是超神，要知道以性价比著称的小米，AX1500用的是RTL8197H 单核1GHz处理器，就不说64GB大空间、USB3.0了，人家对三，京东云来个王炸~</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/v2-37fe3a4232d99818a111607b59cd08ce_720w.png" alt="img"></p><h2 id="R2106开启SSH"><a href="#R2106开启SSH" class="headerlink" title="R2106开启SSH"></a>R2106开启SSH</h2><p>拿到手之后先不要插 WAN 口网线，避免系统自动升级。开机按照默认配置进入管理界面之后，在路由设置&#x2F;系统&#x2F;升级检测路径关闭自动升级，确认底部版本显示为 1.2.2.r2080 - 1.3.0.r2106。然后使用 Chrome 浏览器打开路由器管理后台 <a href="http://192.168.68.1/">http://192.168.68.1/</a> 按 F12 打开控制台，参考截图输入下面的代码，通过调用接口的方式开启 SSH。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/Typora/202406210849331.png" alt="image-20240621084859555"></p><p>粘贴以下代码并回车执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: &#x27;http://&#x27; + $.cookie(&quot;HostAddrIP&quot;) + &#x27;/jdcapi&#x27;,</span><br><span class="line">    async: false,</span><br><span class="line">    data: JSON.stringify(&#123;</span><br><span class="line">        jsonrpc: &quot;2.0&quot;,</span><br><span class="line">        id: 1,</span><br><span class="line">        method: &quot;call&quot;,</span><br><span class="line">        params: [</span><br><span class="line">            $.cookie(&quot;sessionid&quot;),</span><br><span class="line">            &quot;service&quot;,</span><br><span class="line">            &quot;set&quot;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;name&quot;: &quot;dropbear&quot;,</span><br><span class="line">                &quot;instances&quot;: &#123;&quot;instance1&quot;: &#123;&quot;command&quot;: [&quot;/usr/sbin/dropbear&quot;]&#125;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;),</span><br><span class="line">    dataType: &#x27;json&#x27;,</span><br><span class="line">    type: &#x27;POST&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>dropbear 已启动，使用任意 ssh 客户端登录。</p><p>如需开机启动，可将 dropbear 添加到 &#x2F;etc&#x2F;rc.local。</p><p>本方法通过 ubus JSON-RPC 调用来使用 service set 启动程序，修改 command 也可运行其它程序。</p><h2 id="R2242使用webdav开启SSH"><a href="#R2242使用webdav开启SSH" class="headerlink" title="R2242使用webdav开启SSH"></a>R2242使用webdav开启SSH</h2><p><strong>刷机准备工作：</strong></p><ul><li>win10系统</li><li>U盘&#x2F;移动硬盘</li><li>Linux设备，最好是OpenWrt系统</li><li>DiskGenius分区工具</li><li>Notepad++编辑器</li></ul><p><strong>简单梳理一下思路：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/v2-874b3b62c39510aa9a8763b13063249e_720w.png" alt="img"></p><h3 id="第一步：U盘进行分区"><a href="#第一步：U盘进行分区" class="headerlink" title="第一步：U盘进行分区"></a>第一步：U盘进行分区</h3><p>电脑插入U盘或者移动硬盘，打开DiskGenius分区工具，选中需要操作的U盘：</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/v2-dcbd428205c7973f5f0a4fd6fd8a37f7_720w.png" alt="img">▲ 快速分区→自定2个分区→格式EXT4，这是Linux系统的格式→剩下的如图设置→确定即可，分区完成后弹出U盘</p><p>这一步最好照抄这个设置，如果分区名称不一致，后续的代码就需要自行调整了。</p><h3 id="第二步：建立软链接"><a href="#第二步：建立软链接" class="headerlink" title="第二步：建立软链接"></a>第二步：建立软链接</h3><p>这一步可能稍微麻烦一点，需要有一个能<strong>SSH连接的Linux设备</strong>，比如：玩客云、N1盒子、NAS系统、带USB接口的OpenWrt系统，也可以用电脑安装一个OpenWrt虚拟机直通一个USB接口。</p><p>我这里使用<code>带USB接口的OpenWrt系统</code>，U盘插入路由器，然后SSH连接路由器，</p><p>输入下面命令查看U盘挂载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/v2-6c8f26812b1b73ca91726f33e20aa9fc_720w.png" alt="img"></p><p>▲ 可以看到硬盘挂载成功，第一个分区25GB名称是<code>sda1</code>，第二个分区86GB名称是<code>sda5</code></p><p>这一步主要目的是确认下分区二的名称，建立软链接会用到，输入下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /etc/rc.local /mnt/sda5/rc.local</span><br><span class="line">ln -s /etc/init.d/done  /mnt/sda5/done </span><br></pre></td></tr></table></figure><p>▲ 可以逐条复制粘贴，也可以一次复制两条，不影响结果。</p><p>解释：在Linux系统中使用ln -s命令时，实际上是在创建一个指向另一个文件的快捷方式，执行命令<code>ln -s /etc/rc.local /mnt/sda5/rc.local</code>，在&#x2F;mnt&#x2F;sda5&#x2F;目录下创建了一个名为rc.local的快捷方式。</p><p>这样当我们修改<code>/mnt/sda5/rc.local</code>文件时，相当于是修改的路由器内部<code>/etc/rc.local</code>这个文件</p><h3 id="第三步：绑定亚瑟，开启webdav"><a href="#第三步：绑定亚瑟，开启webdav" class="headerlink" title="第三步：绑定亚瑟，开启webdav"></a>第三步：绑定亚瑟，开启webdav</h3><p>这一步的重点是<strong>绑定路由器后，关闭系统自动升级！防止京东云给我们升级了系统！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/image-20240617114706125.png" alt="image-20240617114706125"></p><p>▲ 打开无线宝APP，手机连接亚瑟WiFi网络，路由器WAN口接入互联网，然后搜索设备、立即绑定、输入后台密码、绑定成功后关机自动升级。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/v2-68c8ab9810f003e0739269a33c4c58e6_720w.png" alt="img"></p><p>▲ 来到外置存储设置→智能加速服务→选择sda1分区→确认</p><p>这一步完成后打开WIN10系统连接亚瑟的网络，准备进行下一步。</p><h3 id="第四步：挂载sda5分区，修改文件开启SSH"><a href="#第四步：挂载sda5分区，修改文件开启SSH" class="headerlink" title="第四步：挂载sda5分区，修改文件开启SSH"></a>第四步：挂载sda5分区，修改文件开启SSH</h3><p>打开→此电脑→右键空白处→添加一个网络位置→自定义网络位置</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/v2-93de5f63dc2ca71832adc7d3b10f5101_720w.png" alt="img"></p><p>▲ 填入：<a href="http://192.168.68.1:56589/">http://192.168.68.1:56589</a> 如果56589端口不行，换56590端口试试，一般就这俩端口 ，剩下的一直下一步，默认会打开sda5文件夹。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/image-20240617120935874.png" alt="image-20240617120935874"></p><p>▲ webdav挂载成功，可以编辑done和rc.local这两个文件了，这里使用Notepad++编辑器</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/image-20240617121122377.png" alt="image-20240617121122377"></p><p>▲ rc.local是配置开机自启动的，在exit 0或者&#x2F;usr&#x2F;sbi前一行加上<code>/usr/sbin/dropbear</code>，意思是开启SSH服务，保存即可。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/image-20240617121037397.png" alt="image-20240617121037397"></p><p>▲ done默认14 15 16这三行被注释掉了，把注释#号去掉，意思是让rc.local这个文件生效，保存即可。</p><p>然后可以拔掉U盘了，可以在系统后台重启路由器，咱直接断电、通电重启，简单粗暴，不出意外的话，SSH打开了！</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/v2-74ba7406d805cdc960d0fc411b01d87d_720w.png" alt="img"></p><p>▲ 打开CMD输入：<code>ssh root@192.168.68.1</code> 输入<code>yes</code>，输入路由器密码，大功告成！</p><h2 id="刷分区表"><a href="#刷分区表" class="headerlink" title="刷分区表"></a>刷分区表</h2><p>此步骤非必做，而且稍有危险。</p><p>默认的固件分区只有60MB。如果想装个iStoreOS之类的「比较大」的系统的话，可能会刷不进去。那不如大胆一点，直接把这60MB扩大点。</p><p>我找到了512M、1G、2G的分区表（我直接用了2G的）。下载后，刷入（写入gpt文件到<code>/dev/mmcblk0</code>的前34个扇区）</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/image-20240617123953748.png" alt="image-20240617123953748"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/tmp/gpt.<span class="built_in">bin</span> of=/dev/mmcblk0 bs=<span class="number">512</span> count=<span class="number">34</span> conv=fsync</span><br></pre></td></tr></table></figure><p>注意，这个分区表里面只有前面那些小分区，没有最后数据分区（接近50G或者100G）。后面刷好系统后，可以去系统里面再进行调整。</p><h2 id="在线刷入Uboot"><a href="#在线刷入Uboot" class="headerlink" title="在线刷入Uboot"></a>在线刷入Uboot</h2><blockquote><p>参考 <a href="https://post.smzdm.com/p/a07m70rr">https://post.smzdm.com/p/a07m70rr</a></p></blockquote><p>找到了一个在线输入uboot的教程，相对于下载uboot文件，然后本地scp上传，简单很多，关键是优雅~</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -o u-boot.mbn http://oss-hk4.oss-cn-hongkong.aliyuncs.com/tmp/u-boot.mbn </span><br><span class="line">dd if=/root/u-boot.mbn of=/dev/mmcblk0p13 </span><br><span class="line">dd if=/root/u-boot.mbn of=/dev/mmcblk0p14</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/image-20240617124141135.png" alt="image-20240617124141135">▲ 逐条复制、粘贴即可，理论上一起粘贴也没事~</p><p>终于uboot也刷入完成了，下面可以愉快的刷固件了，根据此大佬说更新到最新4015版本，u-boot依然有效，可以先跑京东豆子，比如跑4个月，回本后再刷机，实现完美白嫖~</p><h2 id="刷入istore版OpenWrt"><a href="#刷入istore版OpenWrt" class="headerlink" title="刷入istore版OpenWrt"></a>刷入istore版OpenWrt</h2><p>电脑接入路由器LAN口，路由器断电，用针顶住rest按键后通电，大概10秒左右，红灯闪烁变成蓝灯，松开！</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/image-20240617115434358.png" alt="image-20240617115434358"></p><p>电脑设置固定IP：192.168.1.11</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/image-20240617124250318.png" alt="image-20240617124250318"></p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/image-20240617124352105.png" alt="image-20240617124352105"></p><p>▲ 浏览器打开：192.168.1.1 选择istore固件，然后点击更新固件</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/image-20240617124433497.png" alt="image-20240617124433497"></p><p>▲ 出现这个页面后，电脑设置DHCP获取IP，等个几分钟，路由器灯光变绿，刷机成功！</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/v2-05b8c482252c95206f5b4b5beb320e67_720w.png" alt="img"></p><p>▲ 后台地址：192.168.1.1 密码：password</p><p>刷机很简单，OpenWrt系统大家都会玩了吧，istore os有应用商店，安装起来很方便，默认的空间只有3M，我们需要给软件包扩容！</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/image-20240617115954583.png" alt="image-20240617115954583"></p><blockquote><p>扩容方法参考：<a href="https://post.smzdm.com/p/a7p2opw5/">https://post.smzdm.com/p/a7p2opw5/</a> 感谢营在北京大佬</p></blockquote><p><strong>原方法有大概10步操作，对于不熟悉命令行的小白来说，有点复杂，我写了一个一键脚本，两步操作即可完成软件包扩容！</strong></p><h2 id="扩容软件包空间"><a href="#扩容软件包空间" class="headerlink" title="扩容软件包空间"></a>扩容软件包空间</h2><p>这个一键扩容脚本针对亚瑟刷<strong>istore版OpenWrt系统</strong>[<code>适用未刷GPT文件</code>]，其他版本可以确认下分区是否一致，酌情使用。</p><p> 系统→文件传输→选择文件expand_overlay.sh上传脚本</p><p>打开<code>TTYD终端</code>，输入下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /tmp/upload/expand\_overlay.sh &amp;&amp; /tmp/upload/expand\_overlay.sh</span><br></pre></td></tr></table></figure><p> 等待几分钟，扩容成功后，路由器会重启。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/v2-19d791ffee755f359a89f0cc7b3a2cee_720w.png" alt="img"></p><p>▲ 查看扩容成功！可以愉快的安装各种插件了~</p><h2 id="已刷OpenWrt，再刷大分区GPT文件命令"><a href="#已刷OpenWrt，再刷大分区GPT文件命令" class="headerlink" title="已刷OpenWrt，再刷大分区GPT文件命令"></a>已刷OpenWrt，再刷大分区GPT文件命令</h2><p>把<code>gpt.bin</code>文件丢到tmp目录里，进入ssh，输入以下指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">dd if=gpt.bin of=/dev/mmcblk0 bs=512 count=34</span><br><span class="line">dd if=/dev/zero of=/dev/mmcblk0p2</span><br><span class="line">dd if=/dev/zero of=/dev/mmcblk0p3</span><br><span class="line">sync</span><br></pre></td></tr></table></figure><p>进入uboot再重刷OpenWrt即可</p><h2 id="刷入华硕固件"><a href="#刷入华硕固件" class="headerlink" title="刷入华硕固件"></a>刷入华硕固件</h2><p>电脑接入路由器LAN口，路由器断电，用针顶住rest按键后通电，大概10秒左右，红灯闪烁变成蓝灯，松开！</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/image-20240617124503249.png" alt="image-20240617124503249"></p><p>▲ 进入uboot后先刷入过渡包<code>jdcax18002swrt.bin</code>进入系统后，升级正式固件</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/image-20240617124520313.png" alt="image-20240617124520313"></p><p>▲ 等待几分钟，把电脑设置成DHCP自动获取IP，浏览器输入<code>192.168.50.1</code>进入华硕固件后台，设置一下网络信息进入系统！</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/image-20240617124534764.png" alt="image-20240617124534764"></p><p>▲ 在固件升级这里上传正式固件3.0.0.4_JDCAX1800_B5.2.5_30050-g6c5467a.trx开始更新</p><p> 等待几分钟系统升级完成</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/v2-f50c926ce8833322acc8979d46d210de_720w.png" alt="img"></p><p>▲ 重新进入系统后，恢复下出厂设置即可！</p><p>教程引用：<br><a href="https://www.bilibili.com/read/cv34442695/">https://www.bilibili.com/read/cv34442695/</a><br><a href="https://mao.fan/article/72">https://mao.fan/article/72</a><br><a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&tid=8378206&highlight=ax1800">https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=8378206&amp;highlight=ax1800</a><br><a href="https://phyng.com/2024/05/05/ax1800-openwrt.html">https://phyng.com/2024/05/05/ax1800-openwrt.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> 不死uboot </tag>
            
            <tag> 京东云ax1800Pro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日签到集合 签到盒青龙版</title>
      <link href="/post/ql.html"/>
      <url>/post/ql.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>每日签到脚本，支持多账号使用，支持的网站众多</p><p><img src="https://img.imgdd.com/f210f3.d4b8837f-65cb-43db-ab07-50d383c49db6.png" alt="img"></p><h2 id="支持的签到列表"><a href="#支持的签到列表" class="headerlink" title="支持的签到列表"></a>支持的签到列表</h2><p>支持列表：<a href="https://sitoi.gitee.io/dailycheckin/">https://sitoi.gitee.io/dailycheckin/</a></p><p>可以在各文件夹查看</p><h4 id="1-dailycheckin-scripts："><a href="#1-dailycheckin-scripts：" class="headerlink" title="1.dailycheckin_scripts："></a>1.dailycheckin_scripts：</h4><p>该文件夹下是 <a href="https://github.com/sitoi/dailycheckin">sitoi&#x2F;dailycheckin</a> 该项目的全部支持脚本</p><p><a href="https://github.com/yuxian158/check/blob/master/dailycheckin_scripts/README.md">配置方式查看</a></p><p>AcFun | 百度搜索资源平台 | Bilibili | 天翼云盘 | CSDN | 多看阅读 | 恩山论坛 | Fa米家 | 网易云游戏 | 葫芦侠 | 爱奇艺 | 全民K歌 | MEIZU 社区 | 芒果 TV | 小米运动 | 网易云音乐 | 一加手机社区官方论坛 | 哔咔漫画 | 吾爱破解 | 什么值得买 | 百度贴吧 | V2EX | 腾讯视频 | 微博 | 联通沃邮箱 | 哔咔网单 | 王者营地 | 有道云笔记 | 智友邦 | 机场签到 | 欢太商城 | NGA | 掘金 | GLaDOS | HiFiNi | 时光相册 | 联通营业厅</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p><strong>进入容器后运行以下命令</strong>（docker exec -it ql bash）修改ql为你的青龙容器名字</p><p>以下命令全部都是进入容器后输入</p><h3 id="1-拉取仓库"><a href="#1-拉取仓库" class="headerlink" title="1.拉取仓库"></a>1.拉取仓库</h3><p>只使用dailycheckin_scripts：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql repo https://github.com/yuxian158/check.git &quot;ck_&quot; &quot;&quot; &quot;checksend|utils&quot;</span><br></pre></td></tr></table></figure><p>只使用others_scripts：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql repo https://github.com/yuxian158/check.git &quot;oc_&quot; &quot;&quot; &quot;checksend|utils&quot;</span><br></pre></td></tr></table></figure><p>我全都要:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql repo https://github.com/yuxian158/check.git &quot;ck_|oc_&quot; &quot;&quot; &quot;checksend|utils&quot;</span><br></pre></td></tr></table></figure><h3 id="2-运行以下命令"><a href="#2-运行以下命令" class="headerlink" title="2.运行以下命令"></a>2.运行以下命令</h3><p>旧版(青龙v2.12以下)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /ql/repo/yuxian158_check &amp;&amp; python3 utils.py</span><br></pre></td></tr></table></figure><p>新版</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /ql/data/repo/yuxian158_check &amp;&amp; python3 utils.py</span><br></pre></td></tr></table></figure><p>然后不出意外的话你可以在青龙面板的配置文件下找到check.toml或check.json文件</p><p>然后根据各文件夹下REDEME修改配置<a href="https://sitoi.gitee.io/dailycheckin/settings/">这里</a></p><h3 id="3-说明"><a href="#3-说明" class="headerlink" title="3.说明"></a>3.说明</h3><p>1.本仓库在12.21日的更新中同时支持了json和toml两种格式的配置文件，但是推荐使用toml格式配置文件</p><p>2.当toml和json配置文件共存时优先使用toml文件</p><p>3.为避免未设置的签到项目推送，请禁止该签到任务，或注释掉配置文件中关于这个任务的配置项目</p><p>4.在运行修改运行时间后若出现未知错误</p><p><strong>请先确认database.sqlite.back或crontab.db.back是否存在</strong>,然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /ql/data/db/ &amp;&amp; rm database.sqlite &amp;&amp; cp database.sqlite.back database.sqlite #v2.12+</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /ql/db/ &amp;&amp; rm database.sqlite &amp;&amp; cp database.sqlite.back database.sqlite #v2.11+</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /ql/db/ &amp;&amp; rm crontab.db &amp;&amp; cp crontab.db.back crontab.db #v2.11-</span><br></pre></td></tr></table></figure><h3 id="4-更新支持了多账号"><a href="#4-更新支持了多账号" class="headerlink" title="4.更新支持了多账号"></a>4.<strong>更新支持了多账号</strong></h3><p>toml配置方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[[ACFUN]]</span><br><span class="line">password = &quot;Sitoi&quot;</span><br><span class="line">phone = &quot;188xxxxxxxx&quot;</span><br><span class="line"></span><br><span class="line">[[ACFUN]]</span><br><span class="line">password = &quot;123456&quot;</span><br><span class="line">phone = &quot;135xxxxxxxx&quot;</span><br></pre></td></tr></table></figure><p>json配置方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  &quot;ACFUN&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">    &quot;password&quot;: &quot;Sitoi&quot;,</span><br><span class="line">    &quot;phone&quot;: &quot;18888xxxxxx&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;password&quot;: &quot;多账号 密码填写，请参考上面&quot;,</span><br><span class="line">&quot;phone&quot;: &quot;多账号 手机号填写，请参考上面&quot;</span><br><span class="line">&#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h3 id="5-通知配置"><a href="#5-通知配置" class="headerlink" title="5.通知配置"></a>5.通知配置</h3><p>来自于青龙的config.sh</p><p><strong>在2022.4.10更新接入消息推送APP</strong></p><p>环境变量为设置别名的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export MI_PUSH_ALIAS=&quot;********&quot;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h4 id="1-关于-toml-的语法参考："><a href="#1-关于-toml-的语法参考：" class="headerlink" title="1.关于 toml 的语法参考："></a>1.关于 toml 的语法参考：</h4><ul><li><a href="https://github.com/toml-lang/toml">toml-lang&#x2F;toml</a></li><li><a href="https://zhuanlan.zhihu.com/p/50412485">中文知乎介绍</a></li><li><a href="https://toml.io/cn/v1.0.0">TOML 教程中文版</a></li></ul><h4 id="2-排错指引"><a href="#2-排错指引" class="headerlink" title="2.排错指引"></a>2.排错指引</h4><p>1.在sitoi&#x2F;dailycheckin的某次更新中修改了键名，请尽量删除原配置文件后重新配置</p><p>2.本库找配置文件时使用了正则表达式,在最外层配置时可以不区分大小写，且只要包含字段就可以，甚至可以写中文(强烈不建议这么写,貌似toml不支持)</p><p>3.很多脚本并没有测试</p><p><strong>github项目地址：<a href="https://github.com/yuxian158/check">https://github.com/yuxian158/check</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青龙面板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenWrt带你畅享AirPlay 2无损音乐</title>
      <link href="/post/Airplay2.html"/>
      <url>/post/Airplay2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>用过openwrt固件老司机都知道有个airplay2，这个插件也出来很久了。如果想把一个老款音箱加上airplay2功能的话，可以买一个usb声卡接入到老款音箱，从而用iphone airplay直接把无损音乐投射到老款音箱里。绿联有一款此功能的设备，叫Airplay2无线音频接收器，竟然卖到596元。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/03/8_1_12_20_202403080112666.png" alt="image-20240308011135991"></p><p><strong>有群友说投送过去后没有声音，如果你也遇到此问题，请参考下面教程。</strong>👇</p><h2 id="1-ssh进op输入以下指令"><a href="#1-ssh进op输入以下指令" class="headerlink" title="1.ssh进op输入以下指令"></a>1.ssh进op输入以下指令</h2><blockquote><p>查看音频</p><p><code>aplay -l</code></p></blockquote><p>“查看能播放的声卡并且记住设备ID。 </p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/03/8_0_40_42_202403080040755.avif" alt="img"></p><h2 id="2-修改设置默认的播放声卡。"><a href="#2-修改设置默认的播放声卡。" class="headerlink" title="2.修改设置默认的播放声卡。"></a>2.修改设置默认的播放声卡。</h2><p>首先替换以下命令的X跟Y为你自己的设备ID，X修改为card后面的值，Y修改为device后面的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">defaults.ctl.card x</span><br><span class="line">defaults.pcm.card x</span><br><span class="line">defaults.timer.card x</span><br><span class="line">defaults.pcm.device y</span><br></pre></td></tr></table></figure><p>找到etc&#x2F;asound.conf进行修改，将替换后的命令粘贴进去、保存。</p><p><code>vi /etc/asound.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">defaults.ctl.card 1</span><br><span class="line">defaults.pcm.card 1</span><br><span class="line">defaults.timer.card 1</span><br><span class="line">defaults.pcm.device 0</span><br></pre></td></tr></table></figure><p>然后启用Apple AirPlay 2插件，再重启即可。 </p><p><code>reboot</code></p><h2 id="3-音量设定"><a href="#3-音量设定" class="headerlink" title="3.音量设定"></a>3.音量设定</h2><p>openwrt默认是最大音量或者无声，可以调整默认播放的音量。</p><p>SSH输入命令调整播放的音量：</p><p><code>alsamixer</code></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/03/8_0_46_12_202403080046545.avif" alt="img"></p><p>通过键盘左右箭头移动到speaker，用上下调整你想要的音量（推荐调整到绿色内），调整完成后按esc退出即可。此刻调整是实时的，但是重启后依旧会默认100的音量。所以需要进一步设置，确保重启后音量不会默认最大。调整完音量，esc退出。 </p><p>SSH输入命令：</p><p><code>alsactl --file /etc/asound.state store</code></p><p>再输入命令<code>vi /etc/rc.local</code>打开文件，将下面参数粘贴进去，再保存。</p><p><code>alsactl --file /etc/asound.state restore</code></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/03/8_1_16_6_202403080116368.png" alt="image-20240308005000593"></p><h2 id="4-选定声卡"><a href="#4-选定声卡" class="headerlink" title="4.选定声卡"></a>4.选定声卡</h2><p>进openwrt后台，AirPlay2插件选择声卡测试即可。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/03/8_0_58_27_202403080058516.png" alt="image-20240308005820227"></p><h2 id="5-最后"><a href="#5-最后" class="headerlink" title="5.最后"></a>5.最后</h2><ol><li><p>经测试部分主机不需要上述操作，AirPlay2插件里选声卡测试即可。</p></li><li><p>usb声卡不需要上述操作，直接在AirPlay2插件里选声卡测试即可。</p></li><li><p>进阶玩法，搭配PCHiFi 数字转盘遥控，让你的软路由秒变一台播放器</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/03/8_1_4_21_202403080104707.jpg" alt="7bf1914589edf1046cc9c7dd75d93d9"></p></li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2024/03/8_1_14_33_202403080114063.png" alt="image-20240308011431004"></p><h2 id="6-软路由选购"><a href="#6-软路由选购" class="headerlink" title="6.软路由选购"></a>6.软路由选购</h2><p><a href="https://enna.eu.org/buy/5">https://enna.eu.org/buy/5</a></p>]]></content>
      
      
      <categories>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> Airplay2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小米AX3000T刷不死uboot+刷openwrt系统教程</title>
      <link href="/post/ax3000t.html"/>
      <url>/post/ax3000t.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="硬件规格"><a href="#硬件规格" class="headerlink" title="硬件规格"></a>硬件规格</h2><ul><li>SoC: MediaTek MT7981B 2x A53</li><li>Flash: ESMT F50L1G41LB 128MB</li><li>RAM: NT52B128M16JR-FL 256MB</li><li>Ethernet: 4x 10&#x2F;100&#x2F;1000 Mbps</li><li>Switch: MediaTek MT7531AE</li><li>WiFi: MediaTek MT7976C</li><li>Button: Reset, Mesh</li><li>Power: DC 12V 1A</li></ul><p><a href="https://github.com/openwrt/openwrt/pull/12770">https://github.com/openwrt/openwrt/pull/12770</a></p><h2 id="刷机文件"><a href="#刷机文件" class="headerlink" title="刷机文件"></a>刷机文件</h2><p><strong>下载地址：</strong></p><blockquote><p><a href="https://pan.wwang.pw/%F0%9F%94%A5OpenWrt_LEAN/%E5%B0%8F%E7%B1%B3AX3000T">https://pan.wwang.pw/%F0%9F%94%A5OpenWrt_LEAN/%E5%B0%8F%E7%B1%B3AX3000T</a></p><p>如地址失效，加群获取即可。</p></blockquote><h2 id="开启SSH"><a href="#开启SSH" class="headerlink" title="开启SSH"></a>开启SSH</h2><p>代码中**stok&#x3D;**后面的<code>xxx</code>换成你自己的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://192.168.31.1/cgi-bin/luci/;stok=xxx/api/misystem/arn_switch -d &quot;open=1&amp;model=1&amp;level=%0Anvram%20set%20ssh_en%3D1%0A&quot;</span><br><span class="line"></span><br><span class="line">curl -X POST http://192.168.31.1/cgi-bin/luci/;stok=xxx/api/misystem/arn_switch -d &quot;open=1&amp;model=1&amp;level=%0Anvram%20commit%0A&quot;</span><br><span class="line"></span><br><span class="line">curl -X POST http://192.168.31.1/cgi-bin/luci/;stok=xxx/api/misystem/arn_switch -d &quot;open=1&amp;model=1&amp;level=%0Ased%20-i%20&#x27;s%2Fchannel%3D.*%2Fchannel%3D%22debug%22%2Fg&#x27;%20%2Fetc%2Finit.d%2Fdropbear%0A&quot;</span><br><span class="line"></span><br><span class="line">curl -X POST http://192.168.31.1/cgi-bin/luci/;stok=xxx/api/misystem/arn_switch -d &quot;open=1&amp;model=1&amp;level=%0A%2Fetc%2Finit.d%2Fdropbear%20start%0A&quot;</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/12/12_11_46_36_202312121146166.png" alt="image-20231212114030505"></p><p>WIN+R唤起命令提示符，依次输入以上命令，开启SSH，每条命令输入完成后出现<code>&#123;&quot;code&quot;:0&#125;</code>才可以</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/12/1_13_53_9_202312011353232.png" alt="image-20231201130753240"></p><p>开启SSH后需要获取root密码，去这里：<a href="https://wwang.pw/mi/">https://wwang.pw/mi/</a> ，输入路由器SN获取密码</p><h2 id="刷入uboot"><a href="#刷入uboot" class="headerlink" title="刷入uboot"></a>刷入uboot</h2><p>打开MobaXterm，输入路由器管理地址192.168.31.1，用户名root，密码就是刚刚获取到的，输入密码不会有显示，输入完成后直接回车即可。</p><p>把mt7981_ax3000t-fip-fixed-parts-multi-layout.bin文件上传到tmp目录下，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mtd write /tmp/mt7981_ax3000t-fip-fixed-parts-multi-layout.bin FIP</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/12/1_13_53_35_202312011353676.png" alt="image-20231201131752936"></p><h2 id="刷OPENWRT"><a href="#刷OPENWRT" class="headerlink" title="刷OPENWRT"></a>刷OPENWRT</h2><h3 id="进入uboot-WEB页面"><a href="#进入uboot-WEB页面" class="headerlink" title="进入uboot WEB页面"></a>进入uboot WEB页面</h3><ol><li>修改电脑IP为192.168.1.*，网关为192.168.1.1</li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/12/1_13_53_11_202312011353748.png" alt="image-20231201132041835"></p><ol start="2"><li><p>拔掉电源，按住reset键，蓝灯常亮即可进入BOOT，浏览器输入192.168.1.1，进入BOOT页面</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/12/1_13_53_13_202312011353711.png" alt="image-20231201132240380"></p></li></ol><h3 id="刷入H大的闭源immortalwrt固件"><a href="#刷入H大的闭源immortalwrt固件" class="headerlink" title="刷入H大的闭源immortalwrt固件"></a>刷入H大的闭源immortalwrt固件</h3><p>此固件是基于hanwckf大佬的<a href="https://github.com/hanwckf/immortalwrt-mt798x">immortalwrt-mt798x</a>项目，特点如下</p><ul><li>基于immortalwrt 21.02分支，内核版本5.4，目前仅支持mt7981&#x2F;mt7986</li><li>使用<a href="https://git01.mediatek.com/plugins/gitiles/openwrt/feeds/mtk-openwrt-feeds/">mtk-openwrt-feeds</a>提供的有线驱动、hnat驱动、内核补丁及配置工具，支持所有加速特性</li><li>mt7981&#x2F;mt7986均支持两个ppe，每个ppe最大支持32k连接数，默认开启1个ppe</li><li>使用mtwifi原厂无线驱动（目前默认使用7.6.6.1无线驱动，并提供7.6.7.0版本的二进制包），默认开启802.11k，支持warp在内的所有加速特性</li><li>使用luci-app-mtk作为无线配置界面，支持查看连接的客户端相关信息、支持ApCli中继扫描，不支持原生luci。目前原生luci无线界面已在开发中。</li></ul><p>参考下图刷入<code>immortalwrt-mediatek-mt7981-xiaomi_mi-router-ax3000t-squashfs-factory.bin</code>文件</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/12/1_13_53_27_202312011353705.png" alt="image-20231201132411525"></p><h3 id="刷入LEAN固件"><a href="#刷入LEAN固件" class="headerlink" title="刷入LEAN固件"></a>刷入LEAN固件</h3><p>此固件是基于LEAN大佬的<a href="https://github.com/coolsnowwolf/lede">lede源码</a>编译。</p><p>参考下图刷入<code>openwrt-mediatek-filogic-xiaomi_mi-router-ax3000t-squashfs-sysupgrade.bin</code>文件即可</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/12/1_16_56_53_202312011656531.jpg" alt="1701420685412"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/12/1_16_56_14_202312011656196.jpg" alt="1701420685423"></p><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><blockquote><p>后台地址 192.168.5.1  密码 password</p></blockquote><p>进不去后台的，插拔电源重启一下即可。</p><p><strong>注意：靠近电源接口的网口是WAN口</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/12/1_13_53_16_202312011353758.png" alt="d49cc9a6f05a63a523a0206cd1b5219"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/12/1_13_53_20_202312011353612.png" alt="becf3740731596ba03fad38fa83a473"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/12/1_13_53_22_202312011353848.png" alt="082aee3eeb4b7f3241e34085adcdb20"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/12/1_17_0_8_202312011700872.png" alt="image-20231201165955554"></p><h2 id="购买路由器"><a href="#购买路由器" class="headerlink" title="购买路由器"></a>购买路由器</h2><p>小店已上架此款路由器，刷好固件再发货，不愿意折腾的可以下单。</p><p>购买链接：<a href="https://shop.wwang.pw/">https://shop.wwang.pw/</a></p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> 不死uboot </tag>
            
            <tag> 小米ax3000t </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红米ax6000刷不死uboot+刷openwrt+刷回原厂系统教程</title>
      <link href="/post/ax6000-uboot.html"/>
      <url>/post/ax6000-uboot.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="开启SSH"><a href="#开启SSH" class="headerlink" title="开启SSH"></a>开启SSH</h2><blockquote><p>刷机工具下载地址：</p><p><a href="https://pan.wwang.pw/%F0%9F%94%A5OpenWrt_LEAN/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8%E7%B3%BB%E5%88%97/%E7%BA%A2%E7%B1%B3ax6000">https://pan.wwang.pw/%F0%9F%94%A5OpenWrt_LEAN/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8%E7%B3%BB%E5%88%97/%E7%BA%A2%E7%B1%B3ax6000</a></p><p>如地址失效，加群获取即可。</p></blockquote><p>说明：电脑先连上AX6000（网线、WiFi均可），并登录192.168.31.1</p><p>登陆成功后在网址栏可以看见token，即加粗部分<br>示例：192.168.31.1&#x2F;cgi-bin&#x2F;luci&#x2F;;stok&#x3D;<strong>60522452fadf088a65c6bf93645282a1</strong>&#x2F;web&#x2F;home#router</p><p>将下方的**{token}**替换为自己的token即可。</p><h3 id="开启TELNET"><a href="#开启TELNET" class="headerlink" title="开启TELNET"></a>开启TELNET</h3><p><strong>1.开启开发&#x2F;调试模式（此模式下允许修改Bdata）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.1/cgi-bin/luci/;stok=&#123;token&#125;/api/misystem/set_sys_time?timezone=%20%27%20%3B%20zz%3D%24%28dd%20if%3D%2Fdev%2Fzero%20bs%3D1%20count%3D2%202%3E%2Fdev%2Fnull%29%20%3B%20printf%20%27%A5%5A%25c%25c%27%20%24zz%20%24zz%20%7C%20mtd%20write%20-%20crash%20%3B%20</span><br></pre></td></tr></table></figure><p><strong>2.重启</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.1/cgi-bin/luci/;stok=&#123;token&#125;/api/misystem/set_sys_time?timezone=%20%27%20%3b%20reboot%20%3b%20</span><br></pre></td></tr></table></figure><p><strong>3.设置Bdata永久开启telnet</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.1/cgi-bin/luci/;stok=&#123;token&#125;/api/misystem/set_sys_time?timezone=%20%27%20%3B%20bdata%20set%20telnet_en%3D1%20%3B%20bdata%20set%20ssh_en%3D1%20%3B%20bdata%20set%20uart_en%3D1%20%3B%20bdata%20commit%20%3B%20</span><br></pre></td></tr></table></figure><p><strong>4.重启</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.1/cgi-bin/luci/;stok=&#123;token&#125;/api/misystem/set_sys_time?timezone=%20%27%20%3b%20reboot%20%3b%20</span><br></pre></td></tr></table></figure><h3 id="开启SSH："><a href="#开启SSH：" class="headerlink" title="开启SSH："></a>开启SSH：</h3><p>连上telnet后运行下列命令：</p><p><strong>1.修改root密码为admin（不修改也可以通过SN计算默认密码，此处不再赘述）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -e &#x27;admin\nadmin&#x27; | passwd root</span><br></pre></td></tr></table></figure><p><strong>2.固化SSH</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nvram set ssh_en=1</span><br><span class="line">nvram set telnet_en=1</span><br><span class="line">nvram set uart_en=1</span><br><span class="line">nvram set boot_wait=on</span><br><span class="line">nvram commit</span><br></pre></td></tr></table></figure><p><strong>3.临时开启SSH（重启会自动关闭，若想永久开启可以跳过，直接进行4）：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;s/channel=.*/channel=&quot;debug&quot;/g&#x27; /etc/init.d/dropbear</span><br><span class="line">/etc/init.d/dropbear restart</span><br></pre></td></tr></table></figure><p><strong>4.永久开启SSH（重启不会关闭）：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/auto_ssh &amp;&amp; cd /data/auto_ssh</span><br><span class="line">curl -O https://cdn.jsdelivr.net/gh/lemoeo/AX6S@main/auto_ssh.sh</span><br><span class="line">chmod +x auto_ssh.sh</span><br><span class="line"></span><br><span class="line">uci set firewall.auto_ssh=include</span><br><span class="line">uci set firewall.auto_ssh.type=&#x27;script&#x27;</span><br><span class="line">uci set firewall.auto_ssh.path=&#x27;/data/auto_ssh/auto_ssh.sh&#x27;</span><br><span class="line">uci set firewall.auto_ssh.enabled=&#x27;1&#x27;</span><br><span class="line">uci commit firewall</span><br></pre></td></tr></table></figure><p><strong>5.关闭开发&#x2F;调试模式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mtd erase crash</span><br></pre></td></tr></table></figure><p><strong>6.重启</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="备份分区"><a href="#备份分区" class="headerlink" title="备份分区"></a>备份分区</h2><p>SSH登录路由器查看分区：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/mtd</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mtd0: 08000000 00020000 &quot;spi0.1&quot;</span><br><span class="line">mtd1: 00100000 00020000 &quot;BL2&quot;</span><br><span class="line">mtd2: 00040000 00020000 &quot;Nvram&quot;</span><br><span class="line">mtd3: 00040000 00020000 &quot;Bdata&quot;</span><br><span class="line">mtd4: 00200000 00020000 &quot;Factory&quot;</span><br><span class="line">mtd5: 00200000 00020000 &quot;FIP&quot;</span><br><span class="line">mtd6: 00040000 00020000 &quot;crash&quot;</span><br><span class="line">mtd7: 00040000 00020000 &quot;crash_log&quot;</span><br><span class="line">mtd8: 01e00000 00020000 &quot;ubi&quot;</span><br><span class="line">mtd9: 01e00000 00020000 &quot;ubi1&quot;</span><br><span class="line">mtd10: 03200000 00020000 &quot;overlay&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/partitions</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  31        0     131072 mtdblock0</span><br><span class="line">  31        1       1024 mtdblock1</span><br><span class="line">  31        2        256 mtdblock2</span><br><span class="line">  31        3        256 mtdblock3</span><br><span class="line">  31        4       2048 mtdblock4</span><br><span class="line">  31        5       2048 mtdblock5</span><br><span class="line">  31        6        256 mtdblock6</span><br><span class="line">  31        7        256 mtdblock7</span><br><span class="line">  31        8      30720 mtdblock8</span><br><span class="line">  31        9      30720 mtdblock9</span><br><span class="line">  31       10      51200 mtdblock10</span><br><span class="line">253        0      15748 ubiblock0_1</span><br></pre></td></tr></table></figure><p>可以看到原厂的ubi和ubi1两个固件分区是30MB。</p><p>查看FIP在哪个分区，有的在分区4，有的在分区5；一定要看好自己的</p><p>备份好FIP和Factory分区：<br>使用dd命令备份到tmp文件夹下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/mtd4 of=/tmp/mtd4_Factory.bin</span><br><span class="line">dd if=/dev/mtd5 of=/tmp/mtd5_FIP.bin</span><br></pre></td></tr></table></figure><p>备份下载到电脑保存好。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/12/1_14_28_3_202212011428143.png" alt="Snipaste_2022-12-01_14-23-34"></p><h2 id="刷uboot"><a href="#刷uboot" class="headerlink" title="刷uboot"></a>刷uboot</h2><p>使用winscp软件，把mt7986_redmi_ax6000-fip-fixed-parts.bin上传到路由器的tmp目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mtd write /tmp/mt7986_redmi_ax6000-fip-fixed-parts.bin FIP</span><br></pre></td></tr></table></figure><p>输入命令回车后是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@XiaoQiang:~# mtd write /tmp/mt7986_redmi_ax6000-fip-fixed-parts.bin FIP</span><br><span class="line">Unlocking FIP ...</span><br><span class="line"></span><br><span class="line">Writing from /tmp/mt7986_redmi_ax6000-fip-fixed-parts.bin to FIP ...    </span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/12/1_14_28_18_202212011428889.png" alt="Snipaste_2022-12-01_14-27-07"></p><p>写入不死完等个10秒直接拔电；电脑以太网卡ipv4地址固定为192.168.31.X（X为2-254任意数字）</p><p>断电状态下；顶住reset孔插电，观察以太网卡，大约15秒即可松手，目前第一版不死Boot无灯提示</p><p>确认刷入完毕后，拔掉路由器电源。然后将电脑的IP地址设置为固定的192.168.31.2，接着按住路由器的RESET按钮后通电开机，等待15s后松开RESET（因为Uboot尚未支持LED指示灯，所以指示灯不会亮），用Chrome浏览器进入192.168.31.1，就会见到web页面，在uboot恢复页面选择要刷入的大分区固件。</p><h2 id="刷openwrt固件"><a href="#刷openwrt固件" class="headerlink" title="刷openwrt固件"></a>刷openwrt固件</h2><p>进入uboot的web界面，选factory.ubi固件刷入即可</p><p>237大佬的闭源OP的uboot大分区固件其实是sysupgrade.bin，但是可以uboot直接刷，固件能正常启动。</p><p>使用Chrome浏览器上传uboot大分区固件，然后点击update，等待出现更新成功，正在重启界面。</p><p>如果出现刷机失败，可以刷新192.168.31.1页面，重新上传再刷固件。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/30_15_11_22_202211301511777.png" alt="20221130151226"></p><p>有可能出现的错误界面：</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/30_15_12_33_202211301512600.png" alt="微信截图_20221130151226"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/12/3_13_58_13_202212031358361.png" alt="Snipaste_2022-12-03_13-57-38"></p><h2 id="刷回原厂固件"><a href="#刷回原厂固件" class="headerlink" title="刷回原厂固件"></a>刷回原厂固件</h2><p>输入查看分区，登录SSH执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/mtd</span><br></pre></td></tr></table></figure><p>查看FIP位置</p><p>上传备份的FIP分区文件到tmp目录下</p><p>登录SSH执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mtd write /tmp/mtd5_FIP.bin /dev/mtd5</span><br><span class="line">或者</span><br><span class="line">mtd write /tmp/mtd5_FIP.bin FIP</span><br></pre></td></tr></table></figure><p><strong>mtd5根据实际情况修改</strong></p><p>拔电，再用小米官方救砖工具就行了</p><p>小米路由官方修复工具<br><a href="http://bigota.miwifi.com/xiaoqiang/tools/MIWIFIRepairTool.x86.zip">MIWIFIRepairTool.x86.zip</a><br>红米AX6000 RB06官方固件<br><a href="https://cdn.cnbj1.fds.api.mi-img.com/xiaoqiang/rom/rb06/miwifi_rb06_firmware_7ddeb_1.0.60.bin">miwifi_rb06_firmware_7ddeb_1.0.60.bin</a></p><p>网线接路由器和电脑，路由器断电，电脑退出杀毒软件，还有Windows的自带Windows Defender防火墙杀毒，打开小米路由修复工具，选择官方的rb06固件，网卡选择当前连接路由器的网卡，点下一步，工具会自动配置网卡IP为192.168.31.100&#x2F;24，配置好后会显示刷机步骤，然后按住路由器reset插电开机，等到黄灯闪烁后可以松开reset，等待小米路由修复工具连接路由器开始上传固件，上传完后会刷机，刷机成功后蓝灯闪烁。等待10秒后重新断电插电即可恢复到官方系统。点击退出小米路由修复工具，网卡会自动恢复原来配置。</p><p>如果有的人刷回官方，发现及时路由器已正常上网，指示灯却一直蓝灯闪烁，可以尝试重新SSH登录，关闭开发者模式。<br>SSH登录输入指令清除crash分区并重启：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mtd erase crash</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>小店已上架此款路由器，刷好固件再发货，不愿意折腾的可以下单购买。</p><p>购买链接：<a href="https://shop.wwang.pw/">https://shop.wwang.pw/</a></p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> 不死uboot </tag>
            
            <tag> 红米ax6000 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xiaoya-Tvbox：海量专属影视资源库</title>
      <link href="/post/xiaoya-Tvbox.html"/>
      <url>/post/xiaoya-Tvbox.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>原文档放到这里：<a href="https://github.com/power721/alist-tvbox/blob/master/doc/README_zh.md">点击查看</a></p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a><strong>前提条件</strong></h2><ul><li>一台已经安装了Docker的服务器（软路由、vps等）。如果你还没有安装Docker，你可以参考<a href="https://docs.docker.com/engine/install/">Docker官方文档</a>来进行安装。</li><li>阿里云盘账号一个，且已经获取到了token、opentoken、转存id的值。</li><li>SSH连接工具，我这里使用的是 finalshell <a href="https://www.hostbuf.com/t/988.html">点击下载</a></li></ul><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a><strong>安装步骤</strong></h2><h3 id="步骤1：获取tvbox-xiaoya的Docker镜像"><a href="#步骤1：获取tvbox-xiaoya的Docker镜像" class="headerlink" title="步骤1：获取tvbox-xiaoya的Docker镜像"></a><strong>步骤1：获取tvbox-xiaoya的Docker镜像</strong></h3><p>首先用SSH工具连接你的软路由，我这里使用的是finalshell，如果你没有安装请：<a href="https://www.hostbuf.com/t/988.html">点击下载</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 4567:4567 -p 5344:80 -e ALIST_PORT=5344 -v /etc/xiaoya:/data --restart=always --name=xiaoya-tvbox haroldli/xiaoya-tvbox:latest</span><br></pre></td></tr></table></figure><h3 id="步骤2：创建配置文件"><a href="#步骤2：创建配置文件" class="headerlink" title="步骤2：创建配置文件"></a><strong>步骤2：创建配置文件</strong></h3><p>所需配置文件示范：<a href="https://www.aliyundrive.com/s/rP9gP3h9asE">点击转存到自己的阿里云盘（资源盘）</a> 注意一定是“资源盘”，转存后下载“配置示范文件”放到桌面备用。</p><h2 id="步骤3：获取阿里云盘token"><a href="#步骤3：获取阿里云盘token" class="headerlink" title="步骤3：获取阿里云盘token"></a><strong>步骤3：获取阿里云盘token</strong></h2><p>token 对应文件路径：&#x2F;etc&#x2F;xiaoya&#x2F;mytoken.txt <a href="https://aliyuntoken.vercel.app/">点击后扫码获取</a> 复制并保存到配置示范文件夹中的mytoken.txt中</p><p>open token 对应文件路径：&#x2F;etc&#x2F;xiaoya&#x2F;myopentoken.txt <a href="https://alist.nn.ci/tool/aliyundrive/request.html">点击获取</a> 复制并保存到配置示范文件夹中的myopentoken.txt中</p><p>folder id 对应文件路径：&#x2F;etc&#x2F;xiaoya&#x2F;temp_transfer_folder_id.txt <a href="https://www.aliyundrive.com/sign/in?spm=aliyundrive.index.0.0.2d836f60k2lbvf">阿里云盘网页版</a> 找到你刚转存的文件夹，点击进去，复制网址最后一段并保存到配置示范文件夹中的temp_transfer_folder_id.txt中</p><p>找到这个文件：**&#x2F;etc&#x2F;xiaoya**</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_23_30_0_202311222330490.png" alt="img"></p><p>并将所需txt文档上传到此文件夹</p><p>注意：这里的的mytoken.txt、meopentoken.txt、temp_transfer_folder_id.txt中的内容要替换为你自己阿里云盘的。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_23_30_3_202311222330440.png" alt="img"></p><h3 id="步骤4：访问tvbox-xiaoya"><a href="#步骤4：访问tvbox-xiaoya" class="headerlink" title="步骤4：访问tvbox-xiaoya"></a><strong>步骤4：访问tvbox-xiaoya</strong></h3><p>现在，你可以通过在浏览器中输入<a href="http://XXXXXXXXXXX:4567来访问你的tvbox-xiaoya影视资源库。">http://XXXXXXXXXXX:4567来访问你的tvbox-xiaoya影视资源库。</a></p><h2 id="配置你的影视资源库"><a href="#配置你的影视资源库" class="headerlink" title="配置你的影视资源库"></a><strong>配置你的影视资源库</strong></h2><p>进入以后打开高级模式，点击账号（如果你已经上传了txt配置文档，首次启动时会自动读取配置文件），如无账号请将token和opentonke填入相应位置。</p><p>如果操作无误的话就应该能看到资源库主页了。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_23_30_5_202311222330605.png" alt="img"></p><p>点击配置开始索引</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_23_30_15_202311222330261.png" alt="img"></p><p>索引无误后点击订阅，辅助默认订阅链接填入tvbox壳的配置地址就可以实现刷剧自由了。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_23_30_9_202311222330202.png" alt="img"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a><strong>结论</strong></h2><p>通过Docker和tvbox-xiaoya，你可以轻松地创建和管理你自己的影视资源库。如果你是一个影视爱好者，这将是一个非常有用的工具。如果你在使用过程中遇到任何问题，你可以查阅相关的文档或者寻求社区的帮助。</p>]]></content>
      
      
      <categories>
          
          <category> 教程|资讯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> tvbot </tag>
            
            <tag> xiaoya </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用AI升级你的Siri智商</title>
      <link href="/post/siri-ai.html"/>
      <url>/post/siri-ai.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>众所周知Siri可以实现搜索引擎的语音互动，但是它没有办法像ChatGPT那种信息交互式的问答，有时候变现会有点傻瓜。</p><p>现在可以通过直接把Siri和ChatGPT链接，或者通过整合阿里云的通意千问的大语言模型来建立链接，把Siri变得更懂你，让你的苹果手机变成AI手机。</p><h2 id="整合ChatGPT的方法："><a href="#整合ChatGPT的方法：" class="headerlink" title="整合ChatGPT的方法："></a><strong>整合ChatGPT的方法：</strong></h2><h3 id="第一步，安装适用IOS的官方ChatGPT"><a href="#第一步，安装适用IOS的官方ChatGPT" class="headerlink" title="第一步，安装适用IOS的官方ChatGPT"></a>第一步，安装适用IOS的官方ChatGPT</h3><p>与其他ChatGPT快捷方式有所区别，我们分享的这种快捷方式不需要共享OpenAI API密钥。只需要在iPhone上安装适用于iOS的官方ChatGPT应用程序即可。</p><p>注意用美区APPLE ID才能在App Store中找到官方ChatGPT，需要注意的是，下载和使用ChatGPT都需要使用魔法！</p><p>具体注册方法可以在网上查到很多，在此不赘述了。</p><h3 id="第二步，安装快捷方式"><a href="#第二步，安装快捷方式" class="headerlink" title="第二步，安装快捷方式"></a>第二步，安装快捷方式</h3><p>下载安装好ChatGPT,注册好用户名明码，登录以后。</p><p>在你的苹果手机“我的快捷指令”页面中，点击右上角的加号，并将ChatGPT添加到Siri中，注意要选择右边APP一栏，找到chatgpt。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_15_3_17_202311221503983.png" alt="image-20231122142256604"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_15_3_7_202311221503250.png" alt="image-20231122142236767"></p><p>选择chatgpt以后会有如下两个提示，选择第一个“Ask ChatGPT”</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_15_3_5_202311221503528.png" alt="image-20231122142315861"></p><p>进入这个页面后选择Message右侧的扩展按钮</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_15_3_3_202311221503431.png" alt="image-20231122142331553"></p><p>扩展按钮打开后，将所有选项选择，注意Model选取，点开后选择变量，然后需要一会儿的反应才会显示出ChatGPT3.5模型的选择</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_15_3_1_202311221503463.png" alt="image-20231122142348110"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_15_2_59_202311221502019.png" alt="image-20231122142402829"></p><p>以上维护好以后，点击完成，快捷指令就部署好了。</p><p>注意这个快捷指令的名字就是你跟Siri语音交互启动的大门钥匙，通常默认为Ask ChatGPT，这句话说起来虽然有点洋气，但不符合我接地气，我改名字为“瑞雪”，当然这个快捷指令可以发送到桌面，而且可以加上你喜欢的照片作为快捷指令头像，这里我选择了一只可爱的边牧，真的再合适不过。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_15_2_55_202311221502689.png" alt="image-20231122142519089"></p><p>安装好快捷方式后，需要在“设置”中找到“Siri和搜索”部分，打开用“嘿Siri”唤醒。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_15_2_53_202311221502206.png" alt="image-20231122142631148"></p><h3 id="第三步，使用方法"><a href="#第三步，使用方法" class="headerlink" title="第三步，使用方法"></a>第三步，使用方法</h3><p>以上完成后，就可以说“嘿Siri”，等她回应你的时候，然后说“瑞雪”，就可以开始使用ChatGPT了</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_15_2_50_202311221502676.png" alt="image-20231122143416974"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_15_2_48_202311221502303.png" alt="image-20231122143456472"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_15_2_38_202311221502600.png" alt="image-20231122143529804"></p><h2 id="整合阿里云的通意千问的大语言模型的方法："><a href="#整合阿里云的通意千问的大语言模型的方法：" class="headerlink" title="整合阿里云的通意千问的大语言模型的方法："></a><strong>整合阿里云的通意千问的大语言模型的方法：</strong></h2><h3 id="申请API-KEY以下步骤建议在PC网页上完成"><a href="#申请API-KEY以下步骤建议在PC网页上完成" class="headerlink" title="申请API-KEY以下步骤建议在PC网页上完成"></a>申请API-KEY以下步骤建议在PC网页上完成</h3><p>第一步：打开阿里云的灵积模型控制台首页：</p><p><a href="https://dashscope.console.aliyun.com/overview">https://dashscope.console.aliyun.com/overview</a> </p><p>或者你也可以进入阿里云官网，搜索“灵积模型服务”来进入。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_15_2_35_202311221502275.png" alt="image-20231122143802915"></p><p>需要申请和注册登录阿里云账号，如果这里你没有申请灵积模型的权限，你需要申请使用，需要阿里云账号实名认证之后，把灵机模型服务开通服务</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_15_2_33_202311221502111.png" alt="image-20231122143856076"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_15_2_31_202311221502540.png" alt="image-20231122143935984"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_15_5_17_202311221505851.png" alt="image-20231122143952188"></p><p>第二步 ：如果你已经申请开通成功，点击灵积模型控制台首页里的“控制”，或者左侧的“API-KEY管理” 创建API-KEY</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_15_5_15_202311221505366.png" alt="image-20231122144015517"></p><p>第三步 ：点击“创建新的API-KEY”，保存KEY备用，应该是一个“sk-”开头的字符串</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_15_5_12_202311221505495.png" alt="image-20231122144119596"></p><h3 id="添加快捷指令"><a href="#添加快捷指令" class="headerlink" title="添加快捷指令"></a>添加快捷指令</h3><p>你可以打开下面链接来快速添加这个快捷指令。</p><p><a href="https://www.icloud.com/shortcuts/b7dcc88e9e6f462385a2051c680ce701">https://www.icloud.com/shortcuts/b7dcc88e9e6f462385a2051c680ce701</a></p><table><thead><tr><th><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_15_2_25_202311221502831.jpg" alt="262387b854b3cf8bddafd1cfb3a42e4"></th><th><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_15_2_26_202311221502724.jpg" alt="907b2d8c4f74c40b9bbe9b6170fed50"></th><th><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_15_2_27_202311221502491.jpg" alt="7a219c5e46a1aa81f0e05113f000e89"></th></tr></thead><tbody><tr><td>1.点击“<strong>获取捷径</strong>”</td><td>2.把你在第一步获得的<strong>API-KEY</strong>粘贴进去</td><td>3.添加的快捷指令在左下“<strong>快捷指令</strong>”里可以看到</td></tr></tbody></table><p>默认的名字叫“小智小智”，建议长按后改一个名字。这个名字就是你在呼出Siri后说的话。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_15_2_23_202311221502698.png" alt="image-20231122145956842"></p><p>这样以后就可以通过“嘿 Siri”呼出Siri后，说“小智小智”然后等待它回复我“想问什么”后说出我的问题。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/11/22_15_5_0_202311221505854.png" alt="image-20231122150132209"></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>长按电源键，或者通过“嘿 Siri”命令来呼出Siri，然后说出你重命名后的名字，等Siri问你“想问什么”后，说出你的问题，就可以获得大语言模型回复的数据了。（如果你没有设置“嘿 Siri”，你要在手机的设置 - Siri与搜索 里打开这个功能）</p>]]></content>
      
      
      <categories>
          
          <category> 教程|资讯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGPT </tag>
            
            <tag> siri </tag>
            
            <tag> ai </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启谷歌浏览器新UI界面</title>
      <link href="/post/chrome.html"/>
      <url>/post/chrome.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>作为 Google Chrome 浏览器的隐藏设置实验室，<code>chrome://flags</code> 里常常存放着各种已经开发但尚未开放的功能，比如 <strong>并行下载功能 「Parallel downloading」</strong> 或者 <strong>阅读模式 「Reading Mode</strong>」。</p><p>Chrome 已经很久没有进行过大的样式修改，但近期在稳定分支中添加了新的 flags 实验性标志，带来了全新的设计与外观，启用方式如下：</p><ul><li>在 Chrome 浏览器的搜索栏中输入并访问 <strong>chrome:&#x2F;&#x2F;flags</strong>，开启下面这些配置项</li><li>Omnibox Expanded State Height<br>Omnibox Expanded State Shape<br>Chrome Refresh 2023<br>Chrome WebUI Refresh 2023<br>Parallel downloading (多线程下载)</li><li><strong>重启浏览器</strong>后即可使用 Chrome 的新外观</li></ul><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/10/28_17_17_32_202310281717302.png" alt="img"></p><p>毫无疑问，新式外观的最大特点就是使用了大量的“圆角”设计，补充并统一了众多功能的图标风格，各种下拉框（设置、邮件、收藏夹）的边距也变得更加宽裕；同时采用了与 Android 的 <strong>Material 3</strong> 效果相似的样式，相信使用或者关注 Android 13&#x2F;14 的用户会很眼熟。</p><h2 id="新UI变化"><a href="#新UI变化" class="headerlink" title="新UI变化"></a>新UI变化</h2><blockquote><p>浏览器地址框输入：<code>chrome://whats-new/</code></p><p>可查看说明</p></blockquote><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/10/28_17_16_23_202310281716305.png" alt="image-20231028171512120"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/10/28_17_16_24_202310281716874.png" alt="image-20231028171603674"></p>]]></content>
      
      
      <categories>
          
          <category> 教程|资讯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chrome </tag>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓手机神器Poweramp音乐播放器</title>
      <link href="/post/Poweramp.html"/>
      <url>/post/Poweramp.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Poweramp 是一款功能强大的音乐播放器应用，适用于 Android 平台。它提供了丰富的音频播放功能和个性化选项，是许多用户喜爱的音乐播放器之一。</p><p>以下是 Poweramp 的一些主要特点：</p><ol><li>强大的音频引擎：Poweramp 使用先进的音频引擎，支持各种常见的音频格式，包括 mp3、flac、wav、ogg、aac 等。它提供了出色的音频质量和高保真音乐体验。</li><li>10 带均衡器：Poweramp 内置了一个强大的10带图形均衡器，使用户能够自定义音频输出，调整音频的频率、增益和音调，以实现个性化的音效设置。</li><li>音频效果：除了均衡器之外，Poweramp 还提供了一系列音频效果，如混响、立体声扩展、音场控制等，以增强音乐的沉浸感和立体感。</li><li>动态标签：Poweramp 具有智能标签功能，能够自动获取和显示音乐文件的歌曲信息、专辑封面和歌词（如果可用）。这样，你可以更轻松地浏览和管理你的音乐库。</li><li>主题和定制：Poweramp 允许用户选择各种主题和皮肤，以个性化界面的外观。此外，用户还可以调整界面布局、字体大小和颜色，以满足自己的喜好。</li><li>高级功能：Poweramp 还提供了一些高级功能，如音乐播放队列管理、睡眠定时器、歌曲书签、无缝播放等。这些功能增强了用户的音乐播放体验，并提供了更多的控制选项。</li></ol><p>Poweramp 是一个广受欢迎的音乐播放器应用，以其强大的音频功能、个性化选项和高度可定制的界面而闻名。它为用户提供了出色的音乐体验，并成为许多音乐爱好者的首选播放器之一。</p><h2 id="APP界面"><a href="#APP界面" class="headerlink" title="APP界面"></a>APP界面</h2><table><thead><tr><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/10/12_17_43_36_202310121743240.jpg"></td><td align="center"><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/10/12_17_43_36_202310121743239.jpg"></td><td align="center"><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/10/12_17_43_36_202310121743238.jpg"></td></tr></tbody></table><table><thead><tr><th align="center"><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/10/12_17_43_36_202310121743246.jpg"></th><th align="center"><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/10/12_17_43_36_202310121743244.jpg"></th><th><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/10/12_17_43_36_202310121743242.jpg"></th><th><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/10/12_17_43_36_202310121743241.jpg"></th></tr></thead></table><table><thead><tr><th align="center"><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/10/12_17_43_36_202310121743238.jpg"></th><th><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/10/12_17_43_36_202310121743237.jpg"></th><th><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/10/12_17_43_36_202310121743236.jpg"></th></tr></thead></table><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/10/12_18_19_34_202310121819239.jpg"></p><h2 id="APP下载"><a href="#APP下载" class="headerlink" title="APP下载"></a>APP下载</h2><blockquote><p>完整版下载地址：</p><p><a href="https://p.xiaowansm.repl.co/OneDrive/%e2%9d%87%ef%b8%8fRouter%f0%9f%93%b1">https://p.xiaowansm.repl.co/OneDrive/%e2%9d%87%ef%b8%8fRouter%f0%9f%93%b1</a></p></blockquote><h2 id="无损音乐下载"><a href="#无损音乐下载" class="headerlink" title="无损音乐下载"></a>无损音乐下载</h2><p><strong>网页版：</strong></p><p><a href="https://free-mp3-download.net/">https://free-mp3-download.net/</a></p><p><strong>方格音乐，安卓版和电脑版</strong></p><p><a href="http://fonger.top/">http://fonger.top/</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程|资讯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 播放器 </tag>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>苹果IOS去广告，Quantumult X是最强神器</title>
      <link href="/post/Quantumult.html"/>
      <url>/post/Quantumult.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Quantumult X，即大家俗称的“圈叉”，它是一款功能强大的网络代理工具，主要为 iOS用户提供代理服务和网络优化。它支持多种代理协议，如 Shadowsocks、VMess、Trojan 等，同时具备自定义策略、规则、MitM、脚本引擎等强大功能。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/10/7_18_8_58_QuantumultXpicb.png" alt="Quantumult X"></p><p>使用条件：</p><ul><li>美区Apple ID（下载）</li><li>需付费$7.99（大概60RMB）</li></ul><p>Quantumult X的使用门槛较高，它未在国区上架，你需要注册一个美区的AppleID账号，登录后付费购买APP。</p><p>由于众所周知的原因，阿刚无法在此展开一步一步教大家如何下载安装，大家只能自己在网上搜索相关教程了。</p><p>Quantumult X安装后，你可快速添加节点、添加分流、重写规则、需要掌握一定的知识，对于我们来说，尤其是小白同学，最简单的是直接引用他人的规则，或者下载导入配置文件，俗称懒人配置。</p><p><strong>墨鱼规则</strong></p><blockquote><p><a href="https://github.com/ddgksf2013">https://github.com/ddgksf2013</a></p></blockquote><p>一个在Github上备受欢迎的Quantumult X规则，由ddgksf2013维护，也是阿刚目前在用的规则。</p><p><strong>主要包括：</strong></p><ul><li>去广告：包括各种APP内部广告、开屏广告、小程序广告</li><li>智能分流：网络请求自动匹配规则策略</li><li>VIP会员解锁：包括某音乐VIP、某听书VIP等等</li><li>应用增强：例如B站自动换区，度盘开启倍速、Spotify歌词翻译等等</li><li>网页优化：例如百度搜索去广告、谷歌搜索自动翻页等</li></ul><p>去广告列表、全部功能可在项目主页上查看。</p><p><strong>如何导入配置</strong></p><p>下面给大家说一下，在Quantumult X中，如何导入配置以及一些设置。我这里初始化了Quantumult X，删除了所有之前的配置。</p><p><strong>1，</strong>打开Quantumult X，点击右下角小风车</p><p>在设置中找到配置文件——&gt;下载配置</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/10/7_18_9_4_image-20231007173839060.png" alt="image-20231007173839060"></p><p>直接粘贴配置文件的在线地址，点击确定后即可导入</p><blockquote><p>地址：</p><p><a href="https://raw.githubusercontent.com/ddgksf2013/Profile/master/QuantumultX.conf">https://raw.githubusercontent.com/ddgksf2013/Profile/master/QuantumultX.conf</a></p></blockquote><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/10/7_18_8_48_image-20231007173914383.png" alt="image-20231007173914383"></p><p><strong>2，</strong>导入成功后，我们切换到<strong>自己已有的节点</strong>，虽然脚本附带了几个，但是连接不成功，没什么用，所以想要玩的爽，你必须要有自己的节点。</p><p>返回到设置中，在【分流】一栏中，点击规则资源，列表中罗列的便是墨鱼的分流规则，只有选中的规则才会生效，默认有一些未选中，大家可以根据实际需要勾选选择或者取消。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/10/7_18_8_53_image-20231007174142261.png" alt="image-20231007174142261"></p><p>在【重写】中，一定要确保打开状态。点击规则资源，罗列的是所有的重写规则，与上面一样选中的才会生效，按需选择。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/10/7_18_8_46_image-20231007174218311.png" alt="image-20231007174218311"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/10/7_18_8_39_image-20231007174252367.png" alt="image-20231007174252367"></p><p>和上面的一样，点击上面的“全部更新”按钮，更新一下规则。</p><p>3，MitM（英文全称Man-in-the-Middle），它通过在设备上部署根证书解密和分析HTTPS流量，通过使用 MitM 功能，Quantumult X 才可以拦截、查看和修改 HTTPS 请求和响应，因此在使用中，它必须开启。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/10/7_18_8_34_image-20231007175124760.png" alt="image-20231007175124760"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/10/7_18_8_31_image-20231007180149339.png" alt="image-20231007180149339"></p><p><strong>开启步骤：</strong></p><ul><li>点击生成证书</li><li>点配置证书，会自动调用Safari浏览器下载。</li><li>手机设置——&gt;通用——&gt;VPN与设备管理，找到已下载好的配置描述文件，点击安装。</li><li>手机设置——&gt;通用——&gt;证书信任设置，选择刚刚的证书，信任即可。</li><li>证书配置好后，最后才可打开MitM</li></ul><p>全部完成后，当你系统启用了代理，Quantumult X便开始接管你设备上流量，然后按照规则进行分类、重定向。</p><p>对于去广告，没有通杀世上所有广告的规则，从目前的应用来看，墨鱼已经是集大成者了，基本上没看到广告了。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/10/7_18_8_35_image-20231007180821872.png" alt="image-20231007180821872"></p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H3C NX30Pro 刷 openwrt 教程</title>
      <link href="/post/nx30pro.html"/>
      <url>/post/nx30pro.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/07/10_12_35_46_202307101235301.png" alt="image-20230706090251741"></p><p>H3C NX30 Pro 就是目前百元路由器中性价比最高的（除了运营商定制机），非常推荐。H3C NX30 Pro 和 360 T7、小米 WR30U 的硬件配置完全一样，用的都是百元路由器神U MT7981B，arm A53 双核 1.3Ghz，256M 的内存，也都是内置功放 Wi-Fi 信号没差，都是 200 元内最好。H3C NX30 Pro 主要优势是非运营商定制限制少，购买和保修都方便，目前刷机也是最方便的。</p><h2 id="OpenWrt"><a href="#OpenWrt" class="headerlink" title="OpenWrt"></a>OpenWrt</h2><p>固件部分截图</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/07/10_12_33_35_202307101233056.png" alt="image-20230710123133742"><br><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/07/10_12_33_37_202307101233331.png" alt="image-20230710123205881"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/07/10_12_34_3_202307101234748.png" alt="image-20230710123234934"></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>H3C NX30 Pro 路由器</li><li>有网口的 Windows 电脑（主要用 telnet、ssh，别的系统也行）</li><li><a href="https://pan.wwang.pw/%F0%9F%94%A5OpenWrt_LEAN/H3C%20NX30Pro">下载需要的文件</a> （包含了 putty.exe、winscp、和固件）</li><li>如地址失效，加群获取即可。</li></ul><h2 id="开启-SSH"><a href="#开启-SSH" class="headerlink" title="开启 SSH"></a>开启 SSH</h2><p>这一步请确保路由器能正常联网。NX30 Pro 默认开启了 telnet，默认的地址是 192.168.124.1，用户名是 H3C（全大写），密码就你设置的路由器后台密码，端口是 99。</p><p>打开 termius 选择 New Host 添加，Address 填写 192.168.124.1，取消勾选 SSH，勾选 Telnet，Port 端口填写上 99。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/07/10_12_34_29_202307101234474.png" alt="image-20230710114436384"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/07/10_12_26_50_202307101226400.png" alt="image-20230710114605324"><br>然后输入用户名和密码，输入密码不会显示，回车即可连上 Telnet。<br><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/07/10_12_26_48_202307101226316.png" alt="image-20230710114630926"><br>然后复制下面的代码到终端里执行即可开启 SSH：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">curl</span> -o /tmp/dropbear.ipk https://downloads.openwrt.org/releases/packages-19.07/aarch64_cortex-a53/base/dropbear_2019.78-2_aarch64_cortex-a53.ipk</span><br><span class="line">opkg install /tmp/dropbear.ipk</span><br><span class="line">/etc/init.d/dropbear enable</span><br><span class="line">/etc/init.d/dropbear start</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/07/10_12_33_7_202307101233216.png" alt="image-20230710114705715"></p><h2 id="备份系统"><a href="#备份系统" class="headerlink" title="备份系统"></a>备份系统</h2><p>在终端里执行这命令，将系统备份到 tmp 路径下，备份的过程比较慢，需要 1-2 分钟。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">dd</span> if=/dev/mtd5 of=/tmp/backup.img</span><br></pre></td></tr></table></figure><p>然后打开 WinSCP，文件协议选择 SCP，主机名 192.168.124.1，端口号 22，用户名 H3C，然后登录输入密码就能连上。<br><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/07/10_12_26_13_202307101226821.png" alt="image-20230710114842909"><br>登录后，将右侧 NX30Pro tmp 路径下的 backup.img 文件拖到电脑桌面保存，刷回官方固件需要用到。<br><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/07/10_12_26_11_202307101226549.png" alt="image-20230710115021504"></p><h2 id="刷写-uboot"><a href="#刷写-uboot" class="headerlink" title="刷写 uboot"></a>刷写 uboot</h2><p>两种方式二选其一即可，更推荐方法一，因为有可能 curl 因为网络问题无法正常下载 uboot。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/07/10_12_26_9_202307101226393.png" alt="image-20230710115204061"><br>将下载好的 uboot.bin 文件从左边电脑拖进右侧路由器 tmp 路径下。<br>然后执行命令，如图所示完成了写入 uboot。（请确保MD5 校验结果和图中相同，再敲回车执行， <strong>否则会变砖</strong> )</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cd</span> /tmp</span><br><span class="line">md5sum uboot.bin</span><br><span class="line">mtd write /tmp/uboot.bin FIP</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/07/10_12_26_7_202307101226316.png" alt="image-20230710121451156"></p><h2 id="刷写-openwrt"><a href="#刷写-openwrt" class="headerlink" title="刷写 openwrt"></a>刷写 openwrt</h2><p>路由器断电后，先按住背后 Reset 恢复按钮不放，再插电，等待 10s 左右松开背后 Reset，路由器就进入了 uboot，电脑用网线连接路由器 LAN1，并设置好静态 IP：IP地址填 192.168.1.2，子网掩码 255.255.255.0，网关 192.168.1.1，DNS 192.168.1.1。</p><p>现在浏览器打开 192.168.1.1 就能打开 uboot 后台。<br><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/07/10_12_26_5_202307101226220.png" alt="image-20230710122125323"><br>选择下载好的 factory.bin的固件，upload 上传后，update 更新，写入即可。<br><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/07/10_12_33_17_202307101233624.png" alt="image-20230710122243585"><br>更新完成后系统会重启进入 openwrt 的系统，默认的 WiFi 是 MTK 开头没有密码，后台地址 192.168.5.1，用户名 root，密码 password。<br><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/07/10_12_26_7_202307101226678.png" alt="image-20230710122557848"></p><h2 id="刷回官方"><a href="#刷回官方" class="headerlink" title="刷回官方"></a>刷回官方</h2><p>刷回官方非常简单，进入 uboot 后选择之前备份的 backup.img 文件更新即可，系统就会重启进入官方的系统。<br><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/07/10_12_33_25_202307101233691.png" alt="image-20230710122406606"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>H3C NX30 Pro 和之前推荐的两款 MT7981B 的路由配置没区别，非运营商定制，和最方便的刷机就是最大的优势，两百元价格内 MT7981B 的路由器有着最优秀的 WiFi 信号，还算不错的 CPU 性能，但我认为最重要的是能刷机并且有好的社区支持。</p><h2 id="购买路由器"><a href="#购买路由器" class="headerlink" title="购买路由器"></a>购买路由器</h2><p>小店已上架同配置路由器，刷好固件再发货，不愿意折腾的可以下单。</p><p>购买链接：<a href="https://shop.wwang.pw/buy/18">https://shop.wwang.pw/buy/18</a></p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思创CT3003路由器刷机教程</title>
      <link href="/post/ct3003.html"/>
      <url>/post/ct3003.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ol><li>下载配置文件 <a href="https://firmware.download.immortalwrt.eu.org/cnsztl/mediatek/filogic/openwrt-mediatek-mt7981-certon-ct3003-e-enabletelnet-cfg.tar.gz">https://firmware.download.immortalwrt.eu.org/cnsztl/mediatek/filogic/openwrt-mediatek-mt7981-certon-ct3003-e-enabletelnet-cfg.tar.gz</a> ,将配置文件重命名为 e-enabletelnet-cfg.tar.gz，登录后台，上传配置文件，确认重启。</li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/07/8_17_17_53_202307081717254.png" alt="image-20230708164406999"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/07/8_17_18_3_202307081718203.png" alt="image-20230708164510120"></p><ol start="2"><li>重启后系统会自动开启 telnet（用户名 root 密码 password）以及刷写 bootloader，等到指示灯绿灯闪烁则代表 bootloader 刷入成功。</li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/07/8_17_17_49_202307081717274.png" alt="image-20230708164608978"></p><ol start="3"><li>断电，按住 reset 并接入电源，持续三秒钟，待指示灯变绿后即可进入 webui 恢复界面，地址 192.168.1.1<br>u-boot 可能无法正确下发 ip，手动配置网卡即可：地址 192.168.1.10&#x2F;24<br>上传 Factory 固件并更新，等到自动重启后刷机完毕。</li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/07/8_17_17_46_202307081717097.png" alt="image-20230708164850679"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/07/8_17_19_26_202307081719794.png" alt="image-20230708164812577"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/07/8_17_17_47_202307081717983.png" alt="image-20230708164827011"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/07/8_17_17_47_202307081717728.png" alt="image-20230708164834818"></p><ol start="4"><li>网卡改为自动获取，192.168.5.1进后台，密码 password</li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/07/8_17_18_20_202307081718240.png" alt="image-20230708171818045"></p><p>开源驱动版：</p><p><a href="https://p.xiaowansm.repl.co/OneDrive/%F0%9F%94%A5OpenWrt_LEAN/%E6%80%9D%E5%88%9BCT3003">https://p.xiaowansm.repl.co/OneDrive/%F0%9F%94%A5OpenWrt_LEAN/%E6%80%9D%E5%88%9BCT3003</a></p><p>闭源驱动版：</p><p><a href="https://p.xiaowansm.repl.co/OneDrive/%F0%9F%9A%A9immortalwrt_18.06/%E6%80%9D%E5%88%9BCT3003">https://p.xiaowansm.repl.co/OneDrive/%F0%9F%9A%A9immortalwrt_18.06/%E6%80%9D%E5%88%9BCT3003</a></p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一键搭建Telegram的MTProto代理</title>
      <link href="/post/MTProto.html"/>
      <url>/post/MTProto.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="MTProto协议介绍"><a href="#MTProto协议介绍" class="headerlink" title="MTProto协议介绍"></a>MTProto协议介绍</h2><p>MTProto协议是 Telegram 为了对抗网络封锁开发的专用代理（MTProxy）协议，目前全平台的 TG 客户端中都支持MTProto协议和MTProxy代理。有了MTProxy代理，即使没有VPN或者其他代理的情况下，也能顺畅访问TG。</p><h3 id="一键搭建Telegram的MTProto代理"><a href="#一键搭建Telegram的MTProto代理" class="headerlink" title="一键搭建Telegram的MTProto代理"></a>一键搭建Telegram的MTProto代理</h3><p>1.正常连接ssh，更新系统</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get update #ubuntu和debain</span><br><span class="line">apt-get upgrade</span><br><span class="line"></span><br><span class="line">yum -y update #centos系统</span><br><span class="line">yum -y upgrade</span><br></pre></td></tr></table></figure><p>2.安装bbr网络加速</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure><p>3.一键脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://github.com/whunt1/onekeymakemtg/raw/master/mtproxy_go.sh &amp;&amp; chmod +x mtproxy_go.sh &amp;&amp; bash mtproxy_go.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程|资讯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Telegram </tag>
            
            <tag> MTProto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ai数字绘画【Stable Diffusion】浅玩</title>
      <link href="/post/draw.html"/>
      <url>/post/draw.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="🍒介绍"><a href="#🍒介绍" class="headerlink" title="🍒介绍"></a>🍒介绍</h2><blockquote><p>Github源码：</p><p><a href="https://github.com/CompVis/stable-diffusion">https://github.com/CompVis/stable-diffusion</a></p><p><a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui">https://github.com/AUTOMATIC1111/stable-diffusion-webui</a></p></blockquote><p>Stable Diffusion开源免费，模型超多，但是需要你有足够强的硬件设备，目前可实现的功能有文生图、图生图 、模型合并训练、文生视频 等，下面咱们看看各类GPT对Stable Diffusion的介绍😀</p><p>📌<strong>讯飞星火</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_13_59_16_202305251359521.png" alt="image-20230525131027454"></p><p>📌<strong>文心一言</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_13_59_14_202305251359339.png" alt="image-20230525131058002"></p><p>📌<strong>阿里通义千问</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_13_59_11_202305251359505.png" alt="image-20230525131138681"></p><p><strong>📌Claude</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_13_59_8_202305251359262.png" alt="image-20230525131301265"></p><p>📌<strong>ChatGPT4</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_13_59_6_202305251359363.png" alt="image-20230525132727928"></p><h3 id="模型和提示词"><a href="#模型和提示词" class="headerlink" title="模型和提示词"></a>模型和提示词</h3><blockquote><p><strong>C站：</strong><a href="https://civitai.com/">https://civitai.com/</a></p><p>大名鼎鼎的模型网站</p></blockquote><blockquote><p>GPT对Civitai 介绍⬇</p></blockquote><p>Civitai 是一个免费的人工智能艺术生成社区，其模型共享中心提供了大量的自定义模型供用户上传、分享和下载。用户可以使用 Civitai 的模型生成工具进行创作，将自己的数据训练的自定义模型转化为艺术作品。Civitai 还提供了模型管理软件，方便用户管理自己的模型。Civitai 是由 Civita Institute 运营的，Civita Institute 是一个非盈利性组织，致力于通过文化教育、艺术和人文主义的方法推动社会与文化进步。</p><blockquote><p>词图：</p><p><a href="https://www.prompttool.com/NovelAI">https://www.prompttool.com/NovelAI</a></p><p>生成提示词</p></blockquote><p>图片是否达到预期效果，模型和提示词是关键</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_13_59_3_202305251359702.png" alt="image-20230525135536265"></p><h2 id="🖥︎Win版"><a href="#🖥︎Win版" class="headerlink" title="🖥︎Win版"></a>🖥︎Win版</h2><p>我使用的是一个启动器，在里面可以查看到自己的电脑配置，显卡型号及显存多少，显存最好不低于6G，不然使用起来体验较差，显卡配置上不封顶，显存越高越好。模型管理中可以下载模型，常用主流模型都可以在里面找到，想用什么模型直接点击右边的下载按钮即可。</p><p><strong>部署完成后的界面</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_13_59_1_202305251359648.png" alt="image-20230525131921092"></p><p><strong>我这台电脑没独显[前几年高价卖了]，用CPU跑的很吃力，cpu满载状态，一张高清图跑了40分钟才完成。</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_13_58_57_202305251358746.png" alt="4911240a6a8b9f2d0e35d62f5e2878e"></p><h2 id="🍎MacOS版"><a href="#🍎MacOS版" class="headerlink" title="🍎MacOS版"></a>🍎MacOS版</h2><p>电脑是Mac Mini M2版本，8+256的丐版，性价比高，主要还是贫穷😆，不过实际体验下来，8G内存足够用了，m2芯片很给力，几分钟成图.</p><p><strong>📌软件界面</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_15_0_55_202305251500417.png" alt="c3ab709f7c8888e2c87fb4673c3239a"></p><p><strong>📌模型选择</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_14_20_4_202305251420953.png" alt="6bf3343f21883e1543e53f353331f77"></p><p><strong>📌图片生成中</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_15_0_51_202305251500982.png" alt="aa401482134da54f8874dda64d4d1c3"></p><h2 id="🙈图片赏析"><a href="#🙈图片赏析" class="headerlink" title="🙈图片赏析"></a>🙈图片赏析</h2><p>注意啦，大图来袭😉</p><p><strong>📌小红书纯欲风格</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_15_0_49_202305251500298.png" alt="2ce205da9256ff13ea7027cd20f9917"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_14_28_48_202305251428633.png" alt="97faeda93afb85914bcd67f79e3c1c5"></p><p><strong>📌卡通动漫风格</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_14_31_5_202305251431609.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_14_31_44_202305251431672.png"></p><p><strong>📌仿真风格</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_14_34_23_202305251434182.png" alt="785c74b3c93e3afb602bd184f2eeccc"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_14_33_51_202305251433547.png" alt="dcdc29207ff2e4bb2795fcd1433245c"></p><p><strong>📌这啥风格，我不知道</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_14_41_24_202305251441918.jpg" alt="c88fa36d05770fd19fad9a000ca4ac5"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_14_41_34_202305251441755.jpg" alt="a74b44595b8bb7b6c9c68285b8d059c"></p><hr><h3 id="图生图"><a href="#图生图" class="headerlink" title="图生图"></a>图生图</h3><p>选不同模型生成不同风格的图片</p><p><strong>📌原图</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_14_43_15_202305251443346.jpg" alt="9824a0e171defc2a98953faa7d60f9d"></p><p><strong>📌成图</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_14_59_38_202305251459366.png" alt="715fd309f98256b44df4f4c26631bcf"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_15_0_30_202305251500497.png" alt="3717a0829fa2748b8a7e324771dab64"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_14_59_32_202305251459977.png" alt="6beb61be4ee9115021adc4ab5eadc2d"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_14_59_30_202305251459496.png" alt="62f20fae499eb32aec3dd0e6c73fa9a"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_14_59_27_202305251459950.png" alt="ecb198c4add1ec66c8d6ac2e4a7e560"></p><p>​<strong>你喜欢哪种风格呢？我们在群里探讨一下</strong></p><p><strong>📌上面的图还不过瘾？能否生成限制级图？嗯，毋庸置疑，可以的。好，点到为止，不多说</strong></p><p><strong>📍更多高清大图，可去网盘观赏</strong></p><p>访问地址：<a href="https://xiaow.fly.dev/OneDrive/ai">https://xiaow.fly.dev/OneDrive/ai</a></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_14_14_9_202305251414601.png" alt="6ebee6f648b531f135382e4d34b45e8"></p><h2 id="❤探讨-amp-学习"><a href="#❤探讨-amp-学习" class="headerlink" title="❤探讨&amp;学习"></a>❤探讨&amp;学习</h2><p>技术发展日新月异，我们永远是新手，欢迎进群探讨学习。另外提供付费部署服务，给不想研究只想体验的土豪们提供。</p><p><strong>🍉扫下面微信，拉你入群畅聊。</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/25_14_59_45_202305251459939.png" alt="8e0c61d375d668ebe2df72d53ddacfa"></p>]]></content>
      
      
      <categories>
          
          <category> 教程|资讯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ai绘画 </tag>
            
            <tag> StableDiffusion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notion全平台中文汉化教程-支持网页、Windows、MacOS、安卓系统</title>
      <link href="/post/Notion.html"/>
      <url>/post/Notion.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Notion是最好用效率笔记软件之一，但是Notion有一个非常不友好的地方在于，他不支持中文版。无论是网页版还是电脑版还是手机版都不支持中文版。</p><p>这篇教程我来教大家如何让Notion在各平台支持中文。</p><h2 id="方法一、使用NotionCn插件"><a href="#方法一、使用NotionCn插件" class="headerlink" title="方法一、使用NotionCn插件"></a>方法一、使用NotionCn插件</h2><p>我要讲的第一种方式，就是使用NotionCn插件 这个方式适合使用网页版Notion的用户。</p><p><a href="https://raw.githubusercontent.com/techxiaofei/resource/main/blog/img/notion/cn/plugin.png"><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/22_14_42_38_plugin.png" alt="plugin"></a></p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>首先从插件商城下载并安装<a href="https://chrome.google.com/webstore/detail/notioncn/hmnaobgeiojplphcldmeiklgllchflpp">NotionCn插件</a></p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>前往Notion网页端，刷新重新加载页面即可完成汉化。</p><p>这个插件的翻译是经过开发者人工校对，翻译结果比较准确。</p><h2 id="方法二、Windows客户端中文汉化"><a href="#方法二、Windows客户端中文汉化" class="headerlink" title="方法二、Windows客户端中文汉化"></a>方法二、Windows客户端中文汉化</h2><p>如果你是Windows用户，首先你需要安装Notion的官方 <a href="https://www.notion.so/desktop">客户端</a>。安装登录之后是英文的客户端。</p><p>我们下一步就是安装汉化脚本，而汉化脚本主要基于官方中文词条+人工校对，可以说是目前翻译精度最高的汉化脚本。</p><h3 id="第一步-1"><a href="#第一步-1" class="headerlink" title="第一步"></a>第一步</h3><p>下载[Notion-zh_CN汉化脚本](<a href="https://greasyfork.org/scripts/430116-notion-zh-cn-notion%E7%9A%84%E6%B1%89%E5%8C%96%E8%84%9A%E6%9C%AC/code/Notion-zh_CN">https://greasyfork.org/scripts/430116-notion-zh-cn-notion的汉化脚本/code/Notion-zh_CN</a> notion的汉化脚本.user.js)，然后命名为<code>notion-zh_CN.js</code></p><h3 id="第二步-1"><a href="#第二步-1" class="headerlink" title="第二步"></a>第二步</h3><p>在Notion快捷方式下右键选择<code>打开文件所在的位置</code>，打开renderer文件夹：<code>\resources\app\renderer\</code>。</p><p><a href="https://raw.githubusercontent.com/techxiaofei/resource/main/blog/img/notion/cn/win_pos.png"><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/22_14_40_37_win_pos.png" alt="win_pos"></a></p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>把<code>notion-zh_CN.js</code>复制到上述<code>renderer</code>文件夹；</p><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>在上述renderer文件夹中使用编译器打开<code>preload.js</code>；</p><p>然后在在<code>preload.js</code>的最后一行添加以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require(&quot;./notion-zh_CN&quot;)</span><br></pre></td></tr></table></figure><p><a href="https://raw.githubusercontent.com/techxiaofei/resource/main/blog/img/notion/cn/win_require.png"><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/22_14_40_45_win_require.png" alt="win_require"></a></p><h3 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h3><p>重启Notion完成汉化</p><h2 id="方法三、Notion-Mac客户端汉化"><a href="#方法三、Notion-Mac客户端汉化" class="headerlink" title="方法三、Notion Mac客户端汉化"></a>方法三、Notion Mac客户端汉化</h2><p>同Windows客户端类似，首先你需要安装Notion的官方 <a href="https://www.notion.so/desktop">客户端</a>。安装之后是英文的客户端。</p><h3 id="第一步-2"><a href="#第一步-2" class="headerlink" title="第一步"></a>第一步</h3><p>下载[Notion-zh_CN汉化脚本](<a href="https://greasyfork.org/scripts/430116-notion-zh-cn-notion%E7%9A%84%E6%B1%89%E5%8C%96%E8%84%9A%E6%9C%AC/code/Notion-zh_CN">https://greasyfork.org/scripts/430116-notion-zh-cn-notion的汉化脚本/code/Notion-zh_CN</a> notion的汉化脚本.user.js)，命名为<code>notion-zh_CN.js</code>；</p><h3 id="第二步-2"><a href="#第二步-2" class="headerlink" title="第二步"></a>第二步</h3><p>打开<code>Finder &gt;&gt; 应用程序</code>，右键点击<code>Notion</code>，点击<code>显示包内容</code>。</p><p><a href="https://raw.githubusercontent.com/techxiaofei/resource/main/blog/img/notion/cn/mac_pkg.png"><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/22_14_40_51_mac_pkg.png" alt="mac_pkg"></a></p><h3 id="第三步-1"><a href="#第三步-1" class="headerlink" title="第三步"></a>第三步</h3><p>打开<code>Contents\Resources\app\renderer\</code>目录</p><h3 id="第四步-1"><a href="#第四步-1" class="headerlink" title="第四步"></a>第四步</h3><p>把<code>notion-zh_CN.js</code>放到上述renderer文件夹；</p><h3 id="第五步-1"><a href="#第五步-1" class="headerlink" title="第五步"></a>第五步</h3><p>使用编译器打开<code>preload.js</code>，然后在<code>preload.js</code>的最后一行添加以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require(&quot;./notion-zh_CN&quot;)</span><br></pre></td></tr></table></figure><p><a href="https://raw.githubusercontent.com/techxiaofei/resource/main/blog/img/notion/cn/mac_require.png"><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/22_14_41_21_mac_require.png" alt="mac_require"></a></p><h3 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h3><p>重启Notion，然后点击左边的<code>Settings &amp; members</code>，选择<code>Language &amp; Region</code>，然后随便选择一种语言，比如我选择日本语，然后自动会切换成中文。</p><p>因为我们安装了汉化包，所以无论我们选择什么语言都被中文覆盖。</p><p><a href="https://raw.githubusercontent.com/techxiaofei/resource/main/blog/img/notion/cn/mac_lang.png"><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/22_14_41_5_mac_lang.png" alt="mac_lang"></a></p><h2 id="方法四、Notion安卓客户端中文汉化"><a href="#方法四、Notion安卓客户端中文汉化" class="headerlink" title="方法四、Notion安卓客户端中文汉化"></a>方法四、Notion安卓客户端中文汉化</h2><p>直接在Android手机下载汉化版APK应用程序。</p><ol><li>点击下载<a href="https://github.com/Reamd7/notion-zh_CN/tree/main/apk">notion汉化apk</a></li><li>安装apk直接登录使用</li></ol><p>根据Notion-zh_CN汉化脚本的github文档，目前它还没有发布适用于苹果iOS系统的版本，iphone用户请耐心等待更新。</p>]]></content>
      
      
      <categories>
          
          <category> 教程|资讯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notion </tag>
            
            <tag> 笔记软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Telegram电报全平台中文汉化教程-支持Windows、MacOS、安卓，苹果系统</title>
      <link href="/post/Telegram.html"/>
      <url>/post/Telegram.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Telegram是一款非常强大的聊天软件，但是它有一个非常不友好的地方在于，他官方不支持中文版。虽然说如果英文好的话使用英语也没什么难度，但是我相信有更多的人使用英语有一定的难度，所以能不能想办法把Telegram电报汉化呢。</p><p>答案是有的。</p><p>这篇教程我来教大家如何让电报在各平台支持中文。教程非常简单，一分钟教会你。</p><h2 id="电脑客户端"><a href="#电脑客户端" class="headerlink" title="电脑客户端"></a>电脑客户端</h2><p>首先教大家如何在电脑端汉化Telegram客户端，Windows客户端和Mac客户端教程是一样的，首先看一下我的客户端，我们点击语言，可以看到只支持以下几种语言，是不支持中文的。</p><p>那我们在浏览器中输入这个链接： <a href="https://t.me/setlanguage/classic-zh-cn">汉化链接</a></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/22_14_37_18_link.png" alt="link"></p><p>然后这一段文字的意思就是，点击下方按钮来翻译你的电报软件设置成简体中文语言。</p><p>按钮是<code>设置语言</code>。</p><p>我们点击按钮，会跳出一个弹窗，点击<code>打开Telegram</code>，然后会自动打开电报，然后给一个弹窗，点击下方的<code>Change</code>，也就是修改。即可。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/22_14_37_12_change.png" alt="change"></p><p>这方法适用于Windows客户端和Mac客户端。</p><h2 id="手机App"><a href="#手机App" class="headerlink" title="手机App"></a>手机App</h2><p>下面我来教大家如何在电报手机软件里面设置中文汉化， 手机App包括Android和苹果版，使用方式也是一样的。 看一下官方的软件也是不支持中文的。</p><p>在浏览器中输入这个链接： <a href="https://t.me/setlanguage/classic-zh-cn">汉化链接</a></p><p>然后这一段文字的意思就是，点击下方按钮来翻译你的电报软件设置成简体中文语言。</p><p>按钮是<code>设置语言</code>。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/22_14_36_43_set.jpeg" alt="set"></p><p>我们点击按钮，会跳出一个弹窗，点击<code>打开Telegram</code>，然后会自动打开电报，然后给一个弹窗，点击下方的<code>Change</code>，也就是修改。即可。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/22_14_36_40_mobile_change.png" alt="mobile_change"></p><p>这方法适用于Android客户端和iOS客户端。</p><p>是不是非常简单。</p><p>如果你还没有Telegram或者对Telegram有任何使用上的问题，评论区留言，我会教你如何使用。</p>]]></content>
      
      
      <categories>
          
          <category> 教程|资讯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Telegram </tag>
            
            <tag> 社交软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go MusicFox – 终端里的「网易云音乐」，就该这么用电脑</title>
      <link href="/post/MusicFox.html"/>
      <url>/post/MusicFox.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><strong>Go MusicFox</strong> 是一款在终端中运行的网易云音乐播放器，通过命令行的方式实现登录、播放、下载、搜索、歌词、Last.fm、签到等功能。很酷，电脑就该这么用。</p><p>​<img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/11_12_30_16_WechatIMG7.png"></p><h2 id="什么是终端？"><a href="#什么是终端？" class="headerlink" title="什么是终端？"></a>什么是终端？</h2><p>终端（Terminal）可以指代一个软件程序，它允许用户与计算机进行交互式的会话。终端程序通常提供一个文本界面，用户可以在其中输入命令或操作系统指令，以完成特定的任务。</p><p>一般的终端软件，有命令提示符（CMD）、PowerShell、Windows Terminal、iTerm、Kitty 等。</p><p>虽然终端在视觉上一向给人功能不全的感觉，但 Go MusicFox 可以实现相当多的 macOS 交互，包括通知、菜单栏播放中状态、歌词显示、快捷键，甚至可以在 Mac 下实现睡眠暂停、蓝牙耳机连接断开响应、菜单栏控制等。</p><p>（这方面 Windows 版本要弱一点 😂）</p><h3 id="快捷键-amp-amp-下载"><a href="#快捷键-amp-amp-下载" class="headerlink" title="快捷键 &amp;&amp; 下载"></a>快捷键 &amp;&amp; 下载</h3><p>支持扫码登录，支持切换不同播放引擎（beep &#x2F; mpd &#x2F; osx），支持下载，只需要在听歌的时候，按下快捷键 d 就能下载到本地…</p><p>其它快捷键：</p><table><thead><tr><th align="left">按键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">h&#x2F;H&#x2F;LEFT</td><td align="left">左</td><td align="left"></td></tr><tr><td align="left">l&#x2F;L&#x2F;RIGHT</td><td align="left">右</td><td align="left"></td></tr><tr><td align="left">k&#x2F;K&#x2F;UP</td><td align="left">上</td><td align="left"></td></tr><tr><td align="left">j&#x2F;J&#x2F;DOWN</td><td align="left">下</td><td align="left"></td></tr><tr><td align="left">g</td><td align="left">上移到顶部</td><td align="left"></td></tr><tr><td align="left">G</td><td align="left">下移到底部</td><td align="left"></td></tr><tr><td align="left">q&#x2F;Q</td><td align="left">退出</td><td align="left"></td></tr><tr><td align="left">space</td><td align="left">暂停&#x2F;播放</td><td align="left"></td></tr><tr><td align="left">[</td><td align="left">上一曲</td><td align="left"></td></tr><tr><td align="left">]</td><td align="left">下一曲</td><td align="left"></td></tr><tr><td align="left">–</td><td align="left">减小音量</td><td align="left"></td></tr><tr><td align="left">&#x3D;</td><td align="left">加大音量</td><td align="left"></td></tr><tr><td align="left">n&#x2F;N&#x2F;ENTER</td><td align="left">进入选中的菜单</td><td align="left"></td></tr><tr><td align="left">b&#x2F;B&#x2F;ESC</td><td align="left">返回上级菜单</td><td align="left"></td></tr><tr><td align="left">w&#x2F;W</td><td align="left">退出并退出登录</td><td align="left"></td></tr><tr><td align="left">p</td><td align="left">切换播放方式</td><td align="left"></td></tr><tr><td align="left">P</td><td align="left">心动模式(仅在歌单中时有效)</td><td align="left"></td></tr><tr><td align="left">r&#x2F;R</td><td align="left">重新渲染UI</td><td align="left">如果UI界面因为某种原因出现错乱，可以使用这个重新渲染</td></tr><tr><td align="left">c&#x2F;C</td><td align="left">当前播放列表</td><td align="left"></td></tr><tr><td align="left">,</td><td align="left">喜欢当前播放歌曲</td><td align="left"></td></tr><tr><td align="left">&lt;</td><td align="left">喜欢当前选中歌曲</td><td align="left"></td></tr><tr><td align="left">.</td><td align="left">当前播放歌曲移除出喜欢</td><td align="left"></td></tr><tr><td align="left">&gt;</td><td align="left">当前选中歌曲移除出喜欢</td><td align="left"></td></tr><tr><td align="left">t</td><td align="left">标记当前播放歌曲为不喜欢</td><td align="left"></td></tr><tr><td align="left">T</td><td align="left">标记当前选中歌曲为不喜欢</td><td align="left"></td></tr><tr><td align="left">d</td><td align="left">下载当前播放歌曲</td><td align="left"></td></tr><tr><td align="left">D</td><td align="left">下载当前选中歌曲</td><td align="left"></td></tr><tr><td align="left">&#x2F;</td><td align="left">搜索当前列表</td><td align="left"></td></tr><tr><td align="left">?</td><td align="left">帮助信息</td><td align="left"></td></tr><tr><td align="left">a</td><td align="left">播放中歌曲的所属专辑</td><td align="left"></td></tr><tr><td align="left">A</td><td align="left">选中歌曲的所属专辑</td><td align="left"></td></tr><tr><td align="left">s</td><td align="left">播放中歌曲的所属歌手</td><td align="left"></td></tr><tr><td align="left">S</td><td align="left">选中歌曲的所属歌手</td><td align="left"></td></tr><tr><td align="left">o</td><td align="left">网页打开播放中歌曲</td><td align="left"></td></tr><tr><td align="left">O</td><td align="left">网页打开选中歌曲&#x2F;专辑…</td><td align="left"></td></tr><tr><td align="left">;&#x2F;:</td><td align="left">收藏选中歌单</td><td align="left"></td></tr><tr><td align="left">‘&#x2F;”</td><td align="left">取消收藏选中歌单</td><td align="left"></td></tr></tbody></table><p>另外，还可以手动修改配置文件 go-musicfox.ini，位于用户目录下的 <code>.go-musicfox/go-musicfox.ini</code>，比如 Windows 就是 <code>C:\Users\用户么\.go-musicfox\</code> 下，macOS 下是 <code>/Users/用户名/.go-musicfox</code>，里面有不少设置。</p><h2 id="支持-UnblockNeteaseMusic"><a href="#支持-UnblockNeteaseMusic" class="headerlink" title="支持 UnblockNeteaseMusic"></a>支持 UnblockNeteaseMusic</h2><p>支持通过 kuwo,kugou,migu,qq 来解锁灰色的音乐。</p><h2 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h2><ul><li><a href="https://github.com/go-musicfox/go-musicfox">GitHub</a></li></ul><p>Mac 用户可以通过 <code>brew install anhoder/go-musicfox/go-musicfox</code> 安装。</p><p>对于终端爱好者来说，真是一款不错的工具。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/05/11_12_33_56_WechatIMG16.png" alt="WechatIMG16"></p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MusicFox </tag>
            
            <tag> 网易云音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>飞书接入ChatGPT ai机器人搭建</title>
      <link href="/post/feishi-chatgpt.html"/>
      <url>/post/feishi-chatgpt.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>飞书是一款由字节跳动推出的企业级即时通讯工具，主要面向企业和团队使用。它提供了聊天、会议、文档协作、日程管理、任务管理等多种功能，支持多端同步，可以在电脑、手机、平板等设备上使用。除了基本的通讯功能外，飞书还提供了智能助手、人脸识别、语音识别等技术，以提高工作效率。同时，飞书还支持与其他应用程序的集成，可以方便地与其他企业应用程序进行集成，提高工作效率。</p><blockquote><p>项目地址：</p><p><a href="https://github.com/Leizhenpeng/feishu-chatgpt">https://github.com/Leizhenpeng/feishu-chatgpt</a></p><p>飞书平台自由度蛮高的，开发者大佬更新也很勤。</p></blockquote><h2 id="飞书配置步骤"><a href="#飞书配置步骤" class="headerlink" title="飞书配置步骤"></a>飞书配置步骤</h2><ol><li>注册飞书账号，再新建企业，前往<a href="https://open.feishu.cn/app?lang=zh-CN">开发者平台</a>创建应用,并获取到 APPID 和 Secret</li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/04/5_19_23_51_202304051923542.png" alt="img"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/04/5_19_23_49_202304051923043.png" alt="img"></p><ol start="2"><li>前往<code>应用功能-机器人</code>, 创建机器人</li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/04/5_19_23_47_202304051923075.png" alt="img"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/04/5_19_23_45_202304051923146.png" alt="img"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/04/5_19_23_43_202304051923216.png" alt="img"></p><ol start="3"><li><p>从 cpolar、serverless 或 Railway 获得公网地址，在飞书机器人后台的<code>事件订阅</code></p><p>板块填写。例如，</p><ul><li><code>http://xxxx.r6.cpolar.top</code>为 cpolar 暴露的公网地址</li><li><code>/webhook/event</code>为统一的应用路由</li><li>最终的回调地址为 <code>http://xxxx.r6.cpolar.top/webhook/event</code></li></ul></li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/04/5_19_23_41_202304051923454.png" alt="img"></p><ol start="4"><li>在飞书机器人后台的<code>机器人</code>板块，填写消息卡片请求网址。例如，<ul><li><code>http://xxxx.r6.cpolar.top</code>为 cpolar 暴露的公网地址</li><li><code>/webhook/card</code>为统一的应用路由</li><li>最终的消息卡片请求网址为 <code>http://xxxx.r6.cpolar.top/webhook/card</code></li></ul></li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/04/5_19_23_39_202304051923216.png" alt="img"></p><ol start="5"><li>在事件订阅板块，搜索三个词<code>机器人进群</code>、 <code>接收消息</code>、 <code>消息已读</code>, 把他们后面所有的权限全部勾选。 </li><li>进入权限管理界面，搜索<code>图片</code>, 勾选<code>获取与上传图片或文件资源</code>。 最终会添加下列回调事件<ul><li>im:resource(获取与上传图片或文件资源)</li><li>im:message</li><li>im:message.group_at_msg(获取群组中所有消息)</li><li>im:message.group_at_msg:readonly(接收群聊中@机器人消息事件)</li><li>im:message.p2p_msg(获取用户发给机器人的单聊消息)</li><li>im:message.p2p_msg:readonly(读取用户发给机器人的单聊消息)</li><li>im:message:send_as_bot(获取用户在群组中@机器人的消息)</li><li>im:chat:readonly(获取群组信息)</li><li>im:chat(获取与更新群组信息)</li></ul></li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/04/5_19_23_36_202304051923394.png" alt="img"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/04/5_19_23_34_202304051923446.png" alt="img"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/04/5_19_23_32_202304051923732.png" alt="img"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/04/5_19_23_30_202304051923884.png" alt="img"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/04/5_19_23_28_202304051923932.png" alt="img"></p><ol start="7"><li>发布版本，等待企业管理员审核通过</li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/04/5_19_23_27_202304051923050.png" alt="img"></p><h2 id="Railway部署"><a href="#Railway部署" class="headerlink" title="Railway部署"></a>Railway部署</h2><p>Railway是一种基于云的应用程序托管平台，它可以让开发人员轻松地部署和管理应用程序。它支持多种编程语言和框架，例如Node.js、Python、Ruby、React等。使用Railway，开发人员可以快速地将应用程序部署到云端，而无需担心服务器配置、数据存储和安全性等问题。此外，Railway还提供了一些有用的工具和功能，例如自动化部署、实时日志、性能监控等，以帮助开发人员更好地管理和优化应用程序。Railway的优点是易于使用、快速部署、高度可扩展和安全。</p><h4 id="1-生成-Railway-项目"><a href="#1-生成-Railway-项目" class="headerlink" title="1. 生成 Railway 项目"></a>1. 生成 Railway 项目</h4><p>点击下方按钮即可创建一个对应的 Railway 项目，其会自动 Fork 本项目到你的 Github 账号下。</p><p><a href="https://railway.app/template/10D-TF?referralCode=oMcVS2"><img src="https://camo.githubusercontent.com/081df3dd8cff37aab35044727b02b94a8e948052487a8c6253e190f5940d776d/68747470733a2f2f7261696c7761792e6170702f627574746f6e2e737667" alt="Deploy on Railway"></a></p><h4 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2. 配置环境变量"></a>2. 配置环境变量</h4><p>在打开的页面中，配置环境变量，每个变量的说明如下图所示：</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/04/5_19_23_23_202304051923680.png" alt="Railway 环境变量"></p><h4 id="3-部署项目"><a href="#3-部署项目" class="headerlink" title="3. 部署项目"></a>3. 部署项目</h4><p>填写完环境变量后，点击 Deploy 就完成了项目的部署。部署完成后还需获取对应的域名用于飞书机器人访问，如下图所示：</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/04/5_19_23_21_202304051923069.png" alt="Railway 域名"></p><p>如果不确定自己部署是否成功，可以通过访问上述获取到的域名 (<a href="https://xxxxxxxx.railway.app/ping">https://xxxxxxxx.railway.app/ping</a>) 来查看是否返回了<code>pong</code> ，如果返回了<code>pong</code>，说明部署成功。</p><h2 id="docker部署"><a href="#docker部署" class="headerlink" title="docker部署"></a>docker部署</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker build -t feishu-chatgpt:latest .</span><br><span class="line">docker run -d --name feishu-chatgpt -p 9000:9000 \</span><br><span class="line">--env APP_ID=xxx \</span><br><span class="line">--env APP_SECRET=xxx \</span><br><span class="line">--env APP_ENCRYPT_KEY=xxx \</span><br><span class="line">--env APP_VERIFICATION_TOKEN=xxx \</span><br><span class="line">--env BOT_NAME=chatGpt \</span><br><span class="line">--env OPENAI_KEY=&quot;sk-xxx1,sk-xxx2,sk-xxx3&quot; \</span><br><span class="line">--env API_URL=&quot;https://api.openai.com&quot; \</span><br><span class="line">--env HTTP_PROXY=&quot;&quot; \</span><br><span class="line">feishu-chatgpt:latest</span><br></pre></td></tr></table></figure><p>注意:</p><ul><li><code>BOT_NAME</code> 为飞书机器人名称，例如 <code>chatGpt</code></li><li><code>OPENAI_KEY</code> 为openai key，多个key用逗号分隔，例如 <code>sk-xxx1,sk-xxx2,sk-xxx3</code></li><li><code>HTTP_PROXY</code> 为宿主机的proxy地址，例如 <code>http://host.docker.internal:7890</code>,没有代理的话，可以不用设置</li><li><code>API_URL</code> 为openai api 接口地址，例如 <code>https://api.openai.com</code>, 没有反向代理的话，可以不用设置</li></ul><h3 id="小白简易化-docker部署"><a href="#小白简易化-docker部署" class="headerlink" title="小白简易化 docker部署"></a>小白简易化 docker部署</h3><ul><li>docker 地址: <a href="https://hub.docker.com/r/leizhenpeng/feishu-chatgpt">https://hub.docker.com/r/leizhenpeng/feishu-chatgpt</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always --name feishu-chatgpt2 -p 9000:9000 -v /etc/localtime:/etc/localtim:ro  \</span><br><span class="line">--env APP_ID=xxx \</span><br><span class="line">--env APP_SECRET=xxx \</span><br><span class="line">--env APP_ENCRYPT_KEY=xxx \</span><br><span class="line">--env APP_VERIFICATION_TOKEN=xxx \</span><br><span class="line">--env BOT_NAME=chatGpt \</span><br><span class="line">--env OPENAI_KEY=&quot;sk-xxx1,sk-xxx2,sk-xxx3&quot; \</span><br><span class="line">--env API_URL=https://api.openai.com \</span><br><span class="line">--env HTTP_PROXY=&quot;&quot; \</span><br><span class="line">dockerproxy.com/leizhenpeng/feishu-chatgpt:latest</span><br></pre></td></tr></table></figure><p>事件回调地址: <a href="http://ip:9000/webhook/event">http://IP:9000/webhook/event</a> 卡片回调地址: <a href="http://ip:9000/webhook/card">http://IP:9000/webhook/card</a></p><p>把它填入飞书后台</p><h2 id="docker-compose部署"><a href="#docker-compose部署" class="headerlink" title="docker-compose部署"></a>docker-compose部署</h2><p>编辑源码中的docker-compose.yaml，通过 environment 配置相应环境变量（或者通过 volumes 挂载相应配置文件），然后运行下面的命令即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 构建镜像</span><br><span class="line">docker compose build</span><br><span class="line"></span><br><span class="line"># 启动服务</span><br><span class="line">docker compose up -d</span><br><span class="line"></span><br><span class="line"># 停止服务</span><br><span class="line">docker compose down</span><br></pre></td></tr></table></figure><p>事件回调地址: <a href="http://ip:9000/webhook/event">http://IP:9000/webhook/event</a> 卡片回调地址: <a href="http://ip:9000/webhook/card">http://IP:9000/webhook/card</a></p><h2 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:Leizhenpeng/feishu-chatgpt.git</span><br><span class="line">cd feishu-chatgpt/code</span><br></pre></td></tr></table></figure><p>如果你的服务器没有公网 IP，可以使用反向代理的方式</p><p>飞书的服务器在国内对 ngrok 的访问速度很慢，所以推荐使用一些国内的反向代理服务商</p><ul><li><a href="https://dashboard.cpolar.com/">cpolar</a></li><li><a href="https://natapp.cn/">natapp</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 配置config.yaml</span><br><span class="line">mv config.example.yaml config.yaml</span><br><span class="line"></span><br><span class="line">//测试部署</span><br><span class="line">go run main.go</span><br><span class="line">cpolar http 9000</span><br><span class="line"></span><br><span class="line">//正式部署</span><br><span class="line">nohup cpolar http 9000 -log=stdout &amp;</span><br><span class="line"></span><br><span class="line">//查看服务器状态</span><br><span class="line">https://dashboard.cpolar.com/status</span><br><span class="line"></span><br><span class="line">// 下线服务</span><br><span class="line">ps -ef | grep cpolar</span><br><span class="line">kill -9 PID</span><br></pre></td></tr></table></figure><hr><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/04/5_19_40_7_202304051940741.png" alt="image-20230405194005922"></p><hr><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/04/13_10_22_5_202304131022997.jpg" alt="12"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/04/13_10_22_6_202304131022049.jpg" alt="13"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/04/13_10_22_6_202304131022035.jpg" alt="14"></p><p><strong>欢迎加入飞书ChatGPT交流群一起探讨学习，内置ai机器人，飞书app扫上面二维码即可加入。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 飞书 </tag>
            
            <tag> chatgpt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署dujiaoka独角数卡自动售货系统 支持X86和ARM架构</title>
      <link href="/post/dujiaoka.html"/>
      <url>/post/dujiaoka.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/18_22_18_45_202303182218039.png" alt="image-20230318221836646"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很早就想部署一套自己的发卡自动售货系统，研究了很久发现<code>独角数卡</code>相对更加成熟好用，可是折腾技术三年多最怕的就是<code>php</code>和<code>Laravel</code>之类的语言和框架，各种权限，守护之类配置麻烦，加上如果跑在<code>docker</code>里更加头疼，只能先<code>尝试硬装</code>了。</p><p>按照官方教程在<code>LNMP.org</code>环境下一步步的按照，涉及到需要修改<code>php</code>,<code>composer</code>,<code>supoervisor</code>,<code>redis</code>，<code>mysql</code>各种依赖，最终算是完美安装成功，使用上各方面都没问题，就是感觉部署太麻烦。于是又找到某大佬制作的<code>docker</code>版本 <a href="https://github.com/Apocalypsor/dujiaoka-docker">Apocalypsor&#x2F;dujiaoka-docker</a> 经过测试也很完美，部署和维护实在是方便。</p><p>但是发现基础镜像只支持<code>X86架构</code>，现在甲骨文 ARM 服务器这么火，完美党无法忍受，于是又经过一天的折腾解决了<code>ARM64 架构</code>的基础镜像，所有就有了本教程。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/stilleshan/dockerfiles/tree/main/dujiaoka">https://github.com/stilleshan/dockerfiles/tree/main/dujiaoka</a></p><h3 id="准备主目录"><a href="#准备主目录" class="headerlink" title="准备主目录"></a>准备主目录</h3><p>创建一个<code>dujiaoka</code>主目录用于存放所有相关配置，数据，数据库和缓存文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir dujiaoka &amp;&amp; cd dujiaoka</span><br><span class="line"># 创建主目录</span><br><span class="line">mkdir storage uploads</span><br><span class="line">chmod -R 777 storage uploads</span><br><span class="line"># 创建数据目录用于挂载</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/18_22_20_38_202303182220817.jpg" alt="1679149232994"></p><p>访问<a href="https://github.com/stilleshan/dockerfiles/tree/main/dujiaoka"><code>项目地址</code></a>下载<code>env.conf</code>和<code>docker-compose.yml</code>到上述的<code>dujiaoka</code>目录中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 env.conf</span><br><span class="line"># 重要步骤</span><br></pre></td></tr></table></figure><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>修改<code>docker-compose.yml</code>中的<code>MySQL</code>密码，首次启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>首次启动后，会自动生成<code>mysql</code>和<code>redis</code>的数据目录。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/18_22_22_31_202303182222613.jpg" alt="1679149343833"></p><h3 id="网页安装"><a href="#网页安装" class="headerlink" title="网页安装"></a>网页安装</h3><p>访问配置好的域名进行安装：</p><ul><li>将<code>MySQL</code>的地址改为<code>db</code></li><li>将<code>MySQL</code>的用户名改为<code>dujiaoka</code></li><li>将<code>Redis</code>的地址改为<code>redis</code></li><li>填写网站名称</li><li>填写网站<code>url</code>地址</li></ul><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/18_22_23_24_202303182223470.jpg" alt="1679149398753"></p><p>点击安装，并成功安装，<strong>先修改其他参数后在进行登录使用</strong>。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/18_22_23_46_202303182223202.jpg" alt="1679149420611"></p><p>停止容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><p>将<code>docker-compose.yml</code>中的<code>INSTALL</code>改为<code>false</code></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/18_22_25_13_202303182225228.jpg" alt="1679149509207"></p><p>将<code>env.conf</code>中的<code>APP_DEBUG</code>改为<code>false</code><br>此时可以看到<code>env.conf</code>中的相关配置已经自动变为安装时填写的参数</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/18_22_25_33_202303182225934.jpg" alt="1679149527377"></p><p>是否开启https (前端开启了后端也必须为true)</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/18_22_30_15_202303182230541.png" alt="image-20230318223014318"></p><p>再次启动容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line"># 再次启动开始使用</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/18_22_26_20_202303182226509.jpg" alt="1679149575388"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/18_22_26_36_202303182226351.jpg" alt="1679149591543"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/18_22_27_20_202303182227061.png" alt="image-20230318222718085"></p><h3 id="完成部署"><a href="#完成部署" class="headerlink" title="完成部署"></a>完成部署</h3><p>自此已完成安装部署，访问域名开始使用：</p><ul><li>容器内含有<code>php</code>,<code>composer</code>,<code>redis</code>,<code>supervisor</code>进程守护,任意设置都会自动生效.完全无需任何其他操作.</li><li>所有配置，数据，缓存，数据库都存储在整个<code>dujiaoka</code>目录中，定期备份即可。</li><li>如需迁移服务器，仅需打包本目录到新服务器，执行上述所有<code>chmod 777</code>的权限命令，再次<code>docker-compose up -d</code>即可恢复上线。</li></ul><hr><p>转载<a href="https://www.ioiox.com/archives/159.html">https://www.ioiox.com/archives/159.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dujiaoka </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typecho使用CDN后无法登陆后台解决办法</title>
      <link href="/post/hTypecho-cdn.html"/>
      <url>/post/hTypecho-cdn.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p>进入typecho后台，点击登录按钮，系统没有任何反应，仍然停留在当前登录页面。</p><h2 id="解决措施"><a href="#解决措施" class="headerlink" title="解决措施"></a>解决措施</h2><h3 id="添加不缓存规则"><a href="#添加不缓存规则" class="headerlink" title="添加不缓存规则"></a>添加<code>不缓存规则</code></h3><p><strong>又拍云设置</strong></p><p>在CDN配置 –&gt; 缓存控制 –&gt; 缓存配置 ，添加一条 不缓存规则 ，资源路径为后台的路径 <code>/admin/*</code> ，状态码留空即可。</p><p><strong>多吉云设置</strong></p><p>添加<code>不缓存规则</code></p><p>在CDN配置 –&gt;域名管理 –&gt;修改配置 –&gt; 缓存与响应 ，添加一条 不缓存规则 ，资源路径为后台的路径 <code>/admin</code> ，生效类型选<code>目录</code>即可。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/17_12_50_44_202303171250015.png" alt="image-20230317125043043"></p><h3 id="关掉重定向跟随"><a href="#关掉重定向跟随" class="headerlink" title="关掉重定向跟随"></a>关掉<code>重定向跟随</code></h3><p><strong>又拍云设置</strong></p><p>在CDN配置 –&gt; 性能优化 –&gt; 重定向跟随 ，改为OFF。</p><p><strong>多吉云设置</strong></p><p>在CDN配置 –&gt;域名管理 –&gt;修改配置 –&gt; 回源配置，关闭即可</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/17_12_50_16_202303171250326.png" alt="image-20230317124937277"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Typecho </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于ChatGPT3.5-Turbo模型的镜像站</title>
      <link href="/post/ChatGPT35.html"/>
      <url>/post/ChatGPT35.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/10_10_40_58_202303101040592.png" alt="cover (1)"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>OpenAI 这两天发布了 ChatGPT API，基于 gpt-3.5-turbo 模型，这是一个 GPT-3.5 的优化版本，用于支持开发者把 ChatGPT 集成到自己的产品中，同时把 API 调用价格降到 $0.002 每千 token，意味着处理 100万字符的文本只需要 2 美元，也就是差不多十几块钱人民币，效果更好、价格更低，这让 ChatGPT API 更具性价比，因此这两天基于 ChatGPT API 的各种套壳应用如雨后春笋般大量冒出。</p><ul><li>支持填入自己的 key ，也可内置key后直接使用</li><li>支持系统角色指令</li><li>思维发散程度，数值越大思维越天马行空，就是越胡言乱语</li><li>记录对话内容，刷新不会消失</li><li>支持连续对话</li><li>内置Prompt 预设</li><li>支持导出图片和Markdown语法</li><li>无需魔法，直接使用</li></ul><h2 id="ChatGPT官网"><a href="#ChatGPT官网" class="headerlink" title="ChatGPT官网"></a>ChatGPT官网</h2><p>ChatGPT注册：</p><p><a href="https://chat.openai.com/">https://chat.openai.com</a></p><p>key获取：</p><p><a href="https://platform.openai.com/account/api-keys">https://platform.openai.com/account/api-keys</a></p><h2 id="站点直达"><a href="#站点直达" class="headerlink" title="站点直达"></a>站点直达</h2><p><a href="https://ai.wwang.eu.org/">https://ai.wwang.eu.org</a></p><iframe id="test" width="100%" height="670px" frameborder="0" src="https://ai.wwang.eu.org/"></iframe><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/10_10_35_43_202303101035805.png" alt="image-20230310103542765"></td><td align="center"><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/10_10_32_52_202303101032501.png" alt="image-20230310102823929"></td></tr></tbody></table><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/10_10_32_51_202303101032848.png" alt="image-20230310102830657"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>ChatGPT3.5-Turbo模型很强大很智能，不是之前text-davinci-003模型可比的。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenWrt固件定制服务</title>
      <link href="/post/op-vip.html"/>
      <url>/post/op-vip.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="https://jsd.cdn.zzko.cn/gh/xiaowansm5/img@master/logo/cover.682kxr00cxw0.webp"></p><h2 id="📢定制固件说明："><a href="#📢定制固件说明：" class="headerlink" title="📢定制固件说明："></a>📢定制固件说明：</h2><ul><li>您是否在为寻找心仪的固件而东奔西走？</li><li>固件没有您想要的功能和插件？</li><li>固件过于臃肿，影响运行速度和稳定性？</li></ul><p>📍<strong>是否有上述痛点？来吧，联系我们吧</strong></p><p>📍<strong>定制范畴包括但不限于</strong>：插件集成、默认参数预设、ui定制</p><hr><h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><p>QQ：<a href="https://wpa.qq.com/wpa_jump_page?v=3&uin=85151535&site=qq&menu=yes">85151535</a></p><p>TG：<a href="https://t.me/xiaowan_sm">@xiaowan_sm</a></p><hr><h2 id="OpenWrt-LuCI-插件中英文名称对照表"><a href="#OpenWrt-LuCI-插件中英文名称对照表" class="headerlink" title="OpenWrt_LuCI 插件中英文名称对照表"></a><a href="https://blog.wwang.pw/post/OpenWrt_LuCI.html">OpenWrt_LuCI 插件中英文名称对照表</a></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br></pre></td><td class="code"><pre><span class="line">luci-app-accesscontrol # 访问时间控制</span><br><span class="line"></span><br><span class="line">luci-app-adblock # ADB 广告过滤</span><br><span class="line"></span><br><span class="line">luci-app-adbyby-plus # 广告屏蔽大师Plus +</span><br><span class="line"></span><br><span class="line">luci-app-adguardhome # adguardhome广告过滤</span><br><span class="line"></span><br><span class="line">luci-app-advanced # 高级设置（内置luci-app-fileassistant文件助手）</span><br><span class="line"></span><br><span class="line">luci-app-advanced-reboot # 高级重启</span><br><span class="line"></span><br><span class="line">luci-app-aliyundrive-webdav # 阿里云盘</span><br><span class="line"></span><br><span class="line">luci-app-ahcp # 支持 AHCPd</span><br><span class="line"></span><br><span class="line">luci-app-airplay2 # Apple AirPlay2 无损音频接收服务器</span><br><span class="line"></span><br><span class="line">luci-app-aliddns # 阿里 DDNS</span><br><span class="line"></span><br><span class="line">luci-app-amule # aMule 下载工具</span><br><span class="line"></span><br><span class="line">luci-app-argon-config # argon主题设置,要配合argon主题使用</span><br><span class="line"></span><br><span class="line">luci-app-aria2 # Aria2 下载工具</span><br><span class="line"></span><br><span class="line">luci-app-alist # 聚合网盘工具</span><br><span class="line"></span><br><span class="line">luci-app-arpbind # IP/MAC 绑定</span><br><span class="line"></span><br><span class="line">luci-app-asterisk # 支持 Asterisk 电话服务器</span><br><span class="line"></span><br><span class="line">luci-app-attendedsysupgrade # 固件更新升级相关</span><br><span class="line"></span><br><span class="line">luci-app-autoreboot # 支持计划重启</span><br><span class="line"></span><br><span class="line">luci-app-autoupdate # 定时更新固件插件</span><br><span class="line"></span><br><span class="line">luci-app-baidupcs-web # 百度网盘管理</span><br><span class="line"></span><br><span class="line">luci-app-bcp38 # BCP38 网络入口过滤（不确定）</span><br><span class="line"></span><br><span class="line">luci-app-bird1-ipv4 # 对Bird1-ipv4的支持</span><br><span class="line"></span><br><span class="line">luci-app-bird1-ipv6 # 对Bird1-ipv6的支持</span><br><span class="line"></span><br><span class="line">luci-app-bmx6 # BMX6路由协议</span><br><span class="line"></span><br><span class="line">luci-app-cifs-mount # CIFS/SMB挂载设置</span><br><span class="line"></span><br><span class="line">luci-app-cifsd # CIFS/SMB网络共享</span><br><span class="line"></span><br><span class="line">luci-app-cjdns # 加密IPV6网络相关</span><br><span class="line"></span><br><span class="line">luci-app-clamav # ClamAV杀毒软件</span><br><span class="line"></span><br><span class="line">luci-app-commands # Shell命令模块</span><br><span class="line"></span><br><span class="line">luci-app-control-timewol # 定时网络设备唤醒</span><br><span class="line"></span><br><span class="line">luci-app-control-webrestriction # 访问限制</span><br><span class="line"></span><br><span class="line">luci-app-control-weburl # 网址过滤</span><br><span class="line"></span><br><span class="line">luci-app-cpulimit # CPU性能调整</span><br><span class="line"></span><br><span class="line">luci-app-cshark # CloudShark捕获工具</span><br><span class="line"></span><br><span class="line">luci-app-cupsd # CUPS 打印服务器</span><br><span class="line"></span><br><span class="line">luci-app-ddns # 动态域名 DNS（集成阿里DDNS客户端）</span><br><span class="line"></span><br><span class="line">luci-app-ddns-go # 动态域名 DNS</span><br><span class="line"></span><br><span class="line">luci-app-ddnsto # 内网穿透</span><br><span class="line"></span><br><span class="line">luci-app-diag-core # core诊断工具</span><br><span class="line"></span><br><span class="line">luci-app-diskman # 磁盘管理工具</span><br><span class="line"></span><br><span class="line">luci-app-dnscrypt-proxy # DNSCrypt解决DNS污染</span><br><span class="line"></span><br><span class="line">luci-app-dnsforwarder # DNSForwarder防DNS污染</span><br><span class="line"></span><br><span class="line">luci-app-docker # 不带控制面板的docker</span><br><span class="line"></span><br><span class="line">luci-app-dockerman # 带控制面板的docker</span><br><span class="line"></span><br><span class="line">luci-app-dump1090 # 民航无线频率（不确定）</span><br><span class="line"></span><br><span class="line">luci-app-dynapoint # DynaPoint（未知）</span><br><span class="line"></span><br><span class="line">luci-app-e2guardian # Web内容过滤器</span><br><span class="line"></span><br><span class="line">luci-app-easymesh # 简单MESH(可有线+无线回程)</span><br><span class="line"></span><br><span class="line">luci-app-eqos # 内网IP地址限速</span><br><span class="line"></span><br><span class="line">luci-app-familycloud # 家庭云盘</span><br><span class="line"></span><br><span class="line">luci-app-fileassistant # 文件助手</span><br><span class="line"></span><br><span class="line">luci-app-filebrowser # 文件管理器</span><br><span class="line"></span><br><span class="line">luci-app-filetransfer # 文件传输（可web安装ipk包）</span><br><span class="line"></span><br><span class="line">luci-app-firewall # 添加防火墙</span><br><span class="line"></span><br><span class="line">luci-app-frpc # 内网穿透Frp客户端</span><br><span class="line"></span><br><span class="line">luci-app-frps # 内网穿透Frp服务端</span><br><span class="line"></span><br><span class="line">luci-app-fwknopd # Firewall Knock Operator服务器</span><br><span class="line"></span><br><span class="line">luci-app-godproxy # 广告拦截</span><br><span class="line"></span><br><span class="line">luci-app-gost # GO语言实现的安全隧道（隐蔽的https代理）</span><br><span class="line"></span><br><span class="line">luci-app-gowebdav # GoWebDav 是一个轻巧、简单、快速的 WebDav 服务端程序</span><br><span class="line"></span><br><span class="line">luci-app-guest-wifi # WiFi访客网络</span><br><span class="line"></span><br><span class="line">luci-app-haproxy-tcp # HAProxy负载均衡-TCP</span><br><span class="line"></span><br><span class="line">luci-app-hd-idle # 硬盘休眠</span><br><span class="line"></span><br><span class="line">luci-app-hnet # Homenet Status家庭网络控制协议</span><br><span class="line"></span><br><span class="line">luci-app-https-dns-proxy # 通过HTTPS代理为DNS提供Web UI</span><br><span class="line"></span><br><span class="line">luci-app-ipsec-vpnserver-manyusers # ipsec-vpn（VPN服务器）</span><br><span class="line"></span><br><span class="line">luci-app-iptvhelper # iptvhelper,帮助你轻松配置IPTV</span><br><span class="line"></span><br><span class="line">luci-app-kodexplorer # KOD可道云私人网盘</span><br><span class="line"></span><br><span class="line">luci-app-koolddns # 支持阿里DDNS、DnsPod动态域名解析</span><br><span class="line"></span><br><span class="line">luci-app-linkease # 易有云文件管理器</span><br><span class="line"></span><br><span class="line">luci-app-lxc # LXC容器管理</span><br><span class="line"></span><br><span class="line">luci-app-mentohust # 锐捷验证</span><br><span class="line"></span><br><span class="line">luci-app-minidlna # 完全兼容DLNA / UPnP-AV客户端的服务器软件</span><br><span class="line"></span><br><span class="line">luci-app-mjpg-streamer # 兼容Linux-UVC的摄像头程序</span><br><span class="line"></span><br><span class="line">luci-app-music-remote-center #PCHiFi 数字转盘遥控</span><br><span class="line"></span><br><span class="line">luci-app-mwan3 # MWAN3负载均衡</span><br><span class="line"></span><br><span class="line">luci-app-mwan3helper # MWAN3分流助手</span><br><span class="line"></span><br><span class="line">luci-app-n2n_v2 # N2N内网穿透 N2N v2 VPN服务</span><br><span class="line"></span><br><span class="line">luci-app-netdata # 实时监控中文版</span><br><span class="line"></span><br><span class="line">luci-app-nfs # NFS网络共享</span><br><span class="line"></span><br><span class="line">luci-app-nft-qos # QOS流量控制 Nftables版</span><br><span class="line"></span><br><span class="line">luci-app-nlbwmon # 网络带宽监视器</span><br><span class="line"></span><br><span class="line">luci-app-noddos # NodDOS Clients 阻止DDoS攻击（丢弃）</span><br><span class="line"></span><br><span class="line">luci-app-nps # 内网穿透nps</span><br><span class="line"></span><br><span class="line">luci-app-ntpc # NTP时间同步服务器</span><br><span class="line"></span><br><span class="line">luci-app-oaf # 应用过滤</span><br><span class="line"></span><br><span class="line">luci-app-ocserv # OpenConnect VPN服务</span><br><span class="line"></span><br><span class="line">luci-app-olsr # OLSR配置和状态模块</span><br><span class="line"></span><br><span class="line">luci-app-olsr-services # OLSR服务器</span><br><span class="line"></span><br><span class="line">luci-app-olsr-viz # OLSR可视化</span><br><span class="line"></span><br><span class="line">luci-app-oled # 为1306 0.91 oled专用，如果oled不显示，请看这里</span><br><span class="line"></span><br><span class="line">luci-app-onliner # 流量监控</span><br><span class="line"></span><br><span class="line">luci-app-openclash # openclash</span><br><span class="line"></span><br><span class="line">luci-app-openvpn # OpenVPN客户端</span><br><span class="line"></span><br><span class="line">luci-app-openvpn-server # 易于使用的OpenVPN服务器 Web-UI</span><br><span class="line"></span><br><span class="line">luci-app-oscam # OSCAM服务器</span><br><span class="line"></span><br><span class="line">luci-app-p910nd #打印服务</span><br><span class="line"></span><br><span class="line">luci-app-pagekitec # Pagekitec内网穿透客户端</span><br><span class="line"></span><br><span class="line">luci-app-passwall # XX上网</span><br><span class="line"></span><br><span class="line">luci-app-passwall2 # XX上网</span><br><span class="line"></span><br><span class="line">luci-app-polipo # Polipo代理(是一个小型且快速的网页缓存代理)</span><br><span class="line"></span><br><span class="line">luci-app-poweroff # 关机</span><br><span class="line"></span><br><span class="line">luci-app-pppoe-relay # PPPoE NAT穿透 点对点协议（PPP）</span><br><span class="line"></span><br><span class="line">luci-app-pppoe-server # 宽带接入认证服务器</span><br><span class="line"></span><br><span class="line">luci-app-pptp-server # VPN服务器 PPTP</span><br><span class="line"></span><br><span class="line">luci-app-privoxy # Privoxy网络代理(带过滤无缓存)</span><br><span class="line"></span><br><span class="line">luci-app-ps3netsrv # PS3 NET服务器（用于加载蓝光/游戏ISO/PKG）</span><br><span class="line"></span><br><span class="line">luci-app-pushbot # 全能推送（微信推送修改版）</span><br><span class="line"></span><br><span class="line">luci-app-qbittorrent # BT下载工具（完整版）</span><br><span class="line"></span><br><span class="line">luci-app-qbittorrent_static # BT下载工具</span><br><span class="line"></span><br><span class="line">luci-app-qos # 流量服务质量(QoS)流控</span><br><span class="line"></span><br><span class="line">luci-app-radicale # CalDAV/CardDAV同步工具</span><br><span class="line"></span><br><span class="line">luci-app-ramfree # 释放内存</span><br><span class="line"></span><br><span class="line">luci-app-rclone # 命令行云端同步工具</span><br><span class="line"></span><br><span class="line">luci-app-rebootschedule # 多功能定时任务（重启网络、重启系统、重启WIFI、重新拨号…）</span><br><span class="line"></span><br><span class="line">luci-app-rp-pppoe-server # Roaring Penguin PPPoE Server 服务器</span><br><span class="line"></span><br><span class="line">luci-app-samba # 网络共享</span><br><span class="line"></span><br><span class="line">luci-app-samba4 # 网络共享（Samba4）</span><br><span class="line"></span><br><span class="line">luci-app-serverchan # 微信推送</span><br><span class="line"></span><br><span class="line">luci-app-shadowsocks-libev # SS-libev服务端</span><br><span class="line"></span><br><span class="line">luci-app-shairplay # 支持AirPlay功能</span><br><span class="line"></span><br><span class="line">luci-app-siitwizard # SIIT配置向导 SIIT-Wizzard</span><br><span class="line"></span><br><span class="line">luci-app-simple-adblock # 简单的广告拦截</span><br><span class="line"></span><br><span class="line">luci-app-smartdns # SmartDNS</span><br><span class="line"></span><br><span class="line">luci-app-smartinfo # 穿越蓝天磁盘监控</span><br><span class="line"></span><br><span class="line">luci-app-socat # 多功能的网络工具</span><br><span class="line"></span><br><span class="line">luci-app-softethervpn # SoftEther VPN服务器 NAT穿透</span><br><span class="line"></span><br><span class="line">luci-app-splash # Client-Splash是无线MESH网络的一个热点认证系统</span><br><span class="line"></span><br><span class="line">luci-app-store # 在线商店</span><br><span class="line"></span><br><span class="line">luci-app-supervisord # 一款golang开发的进程管理</span><br><span class="line"></span><br><span class="line">luci-app-sqm # 流量智能队列管理（QOS）</span><br><span class="line"></span><br><span class="line">luci-app-squid # Squid代理服务器</span><br><span class="line"></span><br><span class="line">luci-app-ssr-plus # Plus+ XX上网</span><br><span class="line"></span><br><span class="line">luci-app-ssrserver-python #ShadowsocksR Python服务器</span><br><span class="line"></span><br><span class="line">luci-app-statistics # 流量监控工具</span><br><span class="line"></span><br><span class="line">luci-app-switch-lan-play # 虚拟局域网联机工具</span><br><span class="line"></span><br><span class="line">luci-app-syncdial # 多拨虚拟网卡（原macvlan）</span><br><span class="line"></span><br><span class="line">luci-app-syncthing # syncthing同步工具</span><br><span class="line"></span><br><span class="line">luci-app-tencentddns # 腾讯DDNS</span><br><span class="line"></span><br><span class="line">luci-app-timecontrol # 时间控制跟（luci-app-accesscontrol）差不多，不同的是这个可以配合高级设置一起使用</span><br><span class="line"></span><br><span class="line">luci-app-tinyproxy # Tinyproxy是 HTTP(S)代理服务器</span><br><span class="line"></span><br><span class="line">luci-app-transmission # BT下载工具</span><br><span class="line"></span><br><span class="line">luci-app-travelmate # 旅行路由器</span><br><span class="line"></span><br><span class="line">luci-app-ttnode # 甜糖星愿自动采集插件</span><br><span class="line"></span><br><span class="line">luci-app-ttyd # 网页终端命令窗</span><br><span class="line"></span><br><span class="line">luci-app-turboacc # Turbo ACC 网络加速</span><br><span class="line"></span><br><span class="line">luci-app-udpxy # udpxy做组播服务器</span><br><span class="line"></span><br><span class="line">luci-app-udp2raw # udp2raw-tunnel管理界面-隧道服务器管理</span><br><span class="line"></span><br><span class="line">luci-app-uhttpd # uHTTPd Web服务器</span><br><span class="line"></span><br><span class="line">luci-app-unblockmusic #解锁网易云灰色歌曲</span><br><span class="line"></span><br><span class="line">luci-app-unblockneteasemusic #新版本解除网易云音乐播放限制</span><br><span class="line"></span><br><span class="line">luci-app-unbound # Unbound DNS解析器</span><br><span class="line"></span><br><span class="line">luci-app-upnp # 通用即插即用UPnP（端口自动转发）</span><br><span class="line"></span><br><span class="line">luci-app-usb-printer # USB 打印服务器</span><br><span class="line"></span><br><span class="line">luci-app-uugamebooster # UU网游加速器</span><br><span class="line"></span><br><span class="line">luci-app-v2ray-server # V2Ray 服务器</span><br><span class="line"></span><br><span class="line">luci-app-verysync # 微力同步</span><br><span class="line"></span><br><span class="line">luci-app-vlmcsd # KMS激活服务器</span><br><span class="line"></span><br><span class="line">luci-app-vnstat # vnStat网络监控（图表）</span><br><span class="line"></span><br><span class="line">luci-app-vpnbypass # VPN BypassWebUI 绕过VPN设置</span><br><span class="line"></span><br><span class="line">luci-app-vsftpd # FTP服务器</span><br><span class="line"></span><br><span class="line">luci-app-vssr # XX上网</span><br><span class="line"></span><br><span class="line">luci-app-watchcat # 断网检测功能与定时重启</span><br><span class="line"></span><br><span class="line">luci-app-webadmin # Web管理页面设置</span><br><span class="line"></span><br><span class="line">luci-app-wifischedule # WiFi 计划</span><br><span class="line"></span><br><span class="line">luci-app-wireguard # VPN服务器 WireGuard状态</span><br><span class="line"></span><br><span class="line">wifidog-wiwiz # 拼拼WiFi(luci-app-eqos必选，然后在Network —&gt; Captive Portals —&gt; wifidog-wiwiz 勾选上)</span><br><span class="line"></span><br><span class="line">luci-app-wolplus # 新版网络唤醒，替换luci-app-wol</span><br><span class="line"></span><br><span class="line">luci-app-wrtbwmon # 实时流量监测</span><br><span class="line"></span><br><span class="line">luci-app-webd # Webd 是一款轻量级的 (self-hosted) 自建网盘</span><br><span class="line"></span><br><span class="line">luci-app-xlnetacc # 迅雷快鸟</span><br><span class="line"></span><br><span class="line">luci-app-zerotier # ZeroTier内网穿透</span><br><span class="line"></span><br><span class="line">luci-theme-Light # Light 主题</span><br><span class="line"></span><br><span class="line">luci-theme-argon # argon 主题</span><br><span class="line"></span><br><span class="line">luci-theme-atmaterial # atmaterial 主题</span><br><span class="line"></span><br><span class="line">luci-theme-bootstrap # bootstrap 主题</span><br><span class="line"></span><br><span class="line">luci-theme-darkmatter # 黑色 主题</span><br><span class="line"></span><br><span class="line">luci-theme-infinityfreedom # 透明效果 主题</span><br><span class="line"></span><br><span class="line">luci-theme-material # material 主题</span><br><span class="line"></span><br><span class="line">luci-theme-netgear # 网件 主题</span><br><span class="line"></span><br><span class="line">luci-theme-neobird # neobird 主题</span><br><span class="line"></span><br><span class="line">luci-theme-opentomcat # opentomcat 主题</span><br><span class="line"></span><br><span class="line">luci-theme-rosy # rosy 主题</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红米ax6s刷OpenWrt+救砖教程</title>
      <link href="/post/ax6s.html"/>
      <url>/post/ax6s.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>红米路由器ax6s是一款支持WiFi6的无线路由器，采用联发科MT7622双核1.35GHz处理器，256MB内存，它的无线速率最高可达3200Mbps（2.4GHz 800Mbps、5GHz 2402Mbps）12，信号强度也比较优秀。</p><p><video src="https://p.xiaowansm.repl.co/OneDrive/%F0%9F%94%A5OpenWrt_LEAN/%E7%BA%A2%E7%B1%B3AX6S/%E7%BA%A2%E7%B1%B3AX6S%E5%88%B7%E6%9C%BA%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B.mp4?sign=-TOzxOKvYswxYY7xHfwFH0HnYdQn06GxwYh50lgsdLU=:0" controls="controls" width="100%" height="500">您的浏览器不支持 video </p><p><strong>先下载刷机工具和固件</strong>▼</p><blockquote><p><a href="https://p.xiaowansm.repl.co/OneDrive/%f0%9f%94%a5OpenWrt_LEAN/%e7%ba%a2%e7%b1%b3AX6S">全套刷机工具和固件</a></p></blockquote><h2 id="一、升级miwifi-rb03-firmware-stable-1-2-7-bin固件"><a href="#一、升级miwifi-rb03-firmware-stable-1-2-7-bin固件" class="headerlink" title="一、升级miwifi_rb03_firmware_stable_1.2.7.bin固件"></a>一、升级miwifi_rb03_firmware_stable_1.2.7.bin固件</h2><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/5_19_15_20_202303051915602.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/5_19_15_22_202303051915804.png"></p><h2 id="二、输入SN码，点计算出自己的密码"><a href="#二、输入SN码，点计算出自己的密码" class="headerlink" title="二、输入SN码，点计算出自己的密码"></a>二、输入SN码，点计算出自己的密码</h2><blockquote><p><a href="https://wwang.pw/mi/">https://wwang.pw/mi/</a></p></blockquote><iframe id="test" width="100%" height="500px" frameborder="0" src="https://wwang.pw/mi/"></iframe><h2 id="三、telnet连接路由器，用户名root，密码是上面算出来的密码，执行以下命令"><a href="#三、telnet连接路由器，用户名root，密码是上面算出来的密码，执行以下命令" class="headerlink" title="三、telnet连接路由器，用户名root，密码是上面算出来的密码，执行以下命令"></a>三、telnet连接路由器，用户名root，密码是上面算出来的密码，执行以下命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nvram set ssh_en=1 &amp; nvram set uart_en=1 &amp; nvram set boot_wait=on &amp; nvram set bootdelay=3 &amp; nvram set flag_try_sys1_failed=0 &amp; nvram set flag_try_sys2_failed=1</span><br><span class="line"></span><br><span class="line">nvram set flag_boot_rootfs=0 &amp; nvram set &quot;boot_fw1=run boot_rd_img;bootm&quot;</span><br><span class="line"></span><br><span class="line">nvram set flag_boot_success=1 &amp; nvram commit &amp; /etc/init.d/dropbear enable &amp; /etc/init.d/dropbear start</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/5_19_15_41_202303051915055.png"></p><h2 id="四、刷入底包固件"><a href="#四、刷入底包固件" class="headerlink" title="四、刷入底包固件"></a>四、刷入底包固件</h2><p>ssh连接路由器，用户名root，密码还是刚才算出来的密码，windows用winscp这个软件连接路由器，将<strong>openwrt-mediatek-mt7622-xiaomi_redmi-router-ax6s-squashfs-factory.bin</strong>固件上传到tmp目录</p><blockquote><p>执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mtd -r write /tmp/openwrt-mediatek-mt7622-xiaomi_redmi-router-ax6s-squashfs-factory.bin firmware</span><br></pre></td></tr></table></figure><p>路由器会自动重启进入op，默认ip 192.168.5.1，用户名root，密码password</p></blockquote><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/5_19_15_29_202303051915340.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/5_19_15_31_202303051915337.png"></p><h2 id="五、升级更新包sysupgrade-bin"><a href="#五、升级更新包sysupgrade-bin" class="headerlink" title="五、升级更新包sysupgrade.bin"></a>五、升级更新包sysupgrade.bin</h2><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/5_19_15_34_202303051915437.png"></p><p>按照上图刷入sysupgrade.bin固件，再点执行，然后等待几分钟即可，默认ip 192.168.5.1，用户名root，密码password。</p><h2 id="六、救砖教程"><a href="#六、救砖教程" class="headerlink" title="六、救砖教程"></a>六、救砖教程</h2><p><strong>准备工作：</strong></p><ul><li><p>电脑、网线、牙签或者卡针、小米救砖工具包、红米ax6s原厂固件</p></li><li><p>下载<a href="https://pan.wwang.pw/d/%F0%9F%94%A5OpenWrt_LEAN%E7%89%88%EF%BC%88%E7%9C%8B%E4%B8%8D%E6%87%82%E7%9A%84%E5%B0%B1%E7%82%B9%E5%BC%80%E6%AD%A4%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%89/%E7%BA%A2%E7%B1%B3AX6S/%E5%B0%8F%E7%B1%B3%E5%AE%98%E6%96%B9%E6%95%91%E7%A0%96%E5%B7%A5%E5%85%B7MIWIFIRepairTool.x86.zip?sign=buwpNd16HGAK57F0kDTcUc-bxYSxxQj5seGknRl2fXI=:0">小米救砖工具包</a>，下载<a href="https://pan.wwang.pw/d/%F0%9F%94%A5OpenWrt_LEAN%E7%89%88%EF%BC%88%E7%9C%8B%E4%B8%8D%E6%87%82%E7%9A%84%E5%B0%B1%E7%82%B9%E5%BC%80%E6%AD%A4%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%89/%E7%BA%A2%E7%B1%B3AX6S/%E5%88%B7%E6%9C%BA%E5%B7%A5%E5%85%B7/miwifi_rb03_firmware_stable_1.2.7%EF%BC%88%E5%86%85%E6%B5%8B%E7%89%88%EF%BC%89.bin?sign=K4oso6iyeMLv7g1VUb0q_7yuFyekwOBydIJs9zKL-cA=:0">小米原厂固件</a></p></li></ul><ol><li><strong>固定电脑的网口ip地址</strong></li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/5_19_40_19_202303051940131.png"></p><ol start="2"><li><p><strong>准备一根网线，一头插电脑，另外一头插到路由器的LAN口</strong></p></li><li><p>解压小米救砖工具包，打开MIWIFIRepairTool.x86.exe</p></li><li><p>点浏览，选<code>miwifi_rb03_firmware_stable_1.2.7.bin</code>，再点下一步</p></li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/5_19_40_15_202303051940697.png"></p><ol start="5"><li>再选网卡，我这里是以太网5，根据实际情况选择，再点下一步</li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/5_19_40_13_202303051940868.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/5_19_40_12_202303051940088.png"></p><ol start="6"><li>拔掉路由器电源，再按住RESET键不要松手，再插上电源，等到黄灯闪烁后再松开，救砖工具会跳出进度条，等到路由器蓝灯闪烁，则刷机成功，插拔电源重启即可。</li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/5_19_40_9_202303051940821.png"></p><ol start="7"><li>把电脑网卡改成自动获取，稍等几分钟即可进小米后台了</li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/5_19_40_8_202303051940311.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/5_19_40_5_202303051940473.png"></p><h2 id="购买路由器"><a href="#购买路由器" class="headerlink" title="购买路由器"></a>购买路由器</h2><p>小店售有一些路由器，刷好固件再发货，不愿意折腾的可以下单。</p><p>购买链接：<a href="https://shop.wwang.pw/">https://shop.wwang.pw/</a></p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷机 </tag>
            
            <tag> openwrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比 Win11 自带更现代化的强大文件管理器Files！多标签Tags分栏</title>
      <link href="/post/Files.html"/>
      <url>/post/Files.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>「<strong>文件管理器</strong>」是我们每天都必须要频繁使用的工具，但无论是 Windows 系统自带的资源管理器，还是苹果 macOS自带的“访达”(Finder) ，大家普遍都觉得并不好用。</p><p> Windows 平台其实也有很多优秀替代品或增强工具，比如 TC、Listary、Directory Opus 、XYplorer 等。但这些软件都较老了，而「<strong>Files</strong>」则是一款在设计上更现代化的符合 Windows 11气质的 UWP 版文件管理器……</p><h3 id="比-Win11-自带更现代化的强大文件管理器！多标签-x2F-Tags-x2F-分栏"><a href="#比-Win11-自带更现代化的强大文件管理器！多标签-x2F-Tags-x2F-分栏" class="headerlink" title="比 Win11 自带更现代化的强大文件管理器！多标签&#x2F;Tags&#x2F;分栏"></a>比 Win11 自带更现代化的强大文件管理器！多标签&#x2F;Tags&#x2F;分栏</h3><p>「<strong>Files</strong>」是一款采用了微软“Fluent Design”设计风格的开源免费文件管理器。由于它名字过于普通，同时也是上架到微软商店的 UWP 版应用，所以大家一般都习惯叫它「<strong>Files UWP</strong>」。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/3_19_40_3_202303031940878.png" alt="image-20230303184543707"></p><p>Files App 应用获得了 2022 年度微软官方举办的 Microsoft Store App Awards 最佳软件榜单奖项，可谓是拥有非常高的人气。该软件不仅支持呼声极高的“<strong>多标签页</strong>”功能，同时也拥有双分栏 (窗格) 的文件浏览、文件打标签 Tags 分类等功能。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/3_19_40_11_202303031940127.png" alt="image-20230303184654058"></p><p>设计上也大量运用了“圆角”的现代化设计 UI 界面，工具栏、地址栏、菜单等元素都有了不同程度的调整优化，还加入了大量的动画效果，使得整个软件用起来感觉足够的精致。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/3_19_40_15_202303031940479.gif" alt="图片"></p><h3 id="宛如原生，胜过原生！"><a href="#宛如原生，胜过原生！" class="headerlink" title="宛如原生，胜过原生！"></a>宛如原生，胜过原生！</h3><p>Files 这款软件并没有像 Total Commander、Directory Opus 、XYplorer 那样大幅改变了用户的使用习惯，它跟原生的<strong>资源管理器</strong>很相像，可算是 Windows 自带文件管理器的“加强进化版”！所以随便上手即用，没有任何学习门槛，也不必改变以往的操作习惯。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/3_19_40_44_202303031940448.png" alt="image-20230303184844024"></p><p>它最受好评的地方是可以弥补自带资源管理器的几个痛点之处，比如像浏览器一般的选项卡 (多标签页)、列表浏览、更详细的文件预览窗口、文件 Tags 标签系统，以及如上图一样的双文件夹“分栏浏览”布局等等。</p><h3 id="优雅圆润的界面，细节更丰富"><a href="#优雅圆润的界面，细节更丰富" class="headerlink" title="优雅圆润的界面，细节更丰富"></a>优雅圆润的界面，细节更丰富</h3><p>尽管第一眼看过去，Files 应用跟 Windows 11 自带的文件管理器区别不大，但其实在很多细节的视觉设计上得还是更细腻更优雅。比如你可以设置主题颜色；比如文件夹、磁盘等都加上圆角的背景效果，从视觉上能更轻易地跟文件区分开来，可以提高分拣文件的效率。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/3_19_40_18_202303031940721.jpeg" alt="图片"></p><p>同时 Files 支持双文件分栏显示，可以根据高效地管理文件。同时，在 UI 上对平板、触摸屏的用户来说，使用体验明显比原生资源管理器更好，而且也支持明亮和暗黑模式的主题。</p><h3 id="更好用的多标签页、侧边栏"><a href="#更好用的多标签页、侧边栏" class="headerlink" title="更好用的多标签页、侧边栏"></a>更好用的多标签页、侧边栏</h3><p>Files UWP 支持了无数人呼声最高“多标签页”功能，同时还可以以“列表”的方式来显示标签页，在需要打开多个不同文件夹时，这个功能可以更加方便高效地切换。</p><p>在侧边栏上，你可以自定义要显示的「常用入口」，比如本地磁盘驱动器、网络磁盘、回收站、收藏夹，或将自己的常用文件夹固定到侧边栏上，方便随时快速打开。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/3_19_40_20_202303031940636.png" alt="image-20230303184943561"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/3_19_40_39_202303031940391.png" alt="image-20230303185019443"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/3_19_40_23_202303031940034.png" alt="image-20230303185109663"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/3_19_40_34_202303031940408.png" alt="image-20230303185041249"></p><p>侧边栏方面，你可以自由设置要显示的内容，包括收藏夹、回收站、驱动器、网络驱动器等。以及也可以把常用的文件夹固定到侧栏的收藏夹里面。</p><h3 id="文件标签-Tags-系统"><a href="#文件标签-Tags-系统" class="headerlink" title="文件标签 Tags 系统"></a>文件标签 Tags 系统</h3><p>Files 还支持 Windows 本身并没有的 Tags 文件标签功能，它可以像 Mac 系统一样给文件打上不同的颜色标签来进行分类管理以及查询搜索。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/3_19_40_30_202303031940941.png" alt="image-20230303185420977"></p><p>我们可以在设置里的标签里面新建标签。这对于文档较多的办公用户来说，Tags 文件标签归类是一个不错的文件管理方法。</p><h3 id="将-Files-设为-Win11-默认文件管理器"><a href="#将-Files-设为-Win11-默认文件管理器" class="headerlink" title="将 Files 设为 Win11 默认文件管理器"></a>将 Files 设为 Win11 默认文件管理器</h3><p>要开启该功能，用户只需进入 <strong>设置 – 高级</strong>  – 开启 “<strong>将 Files 设为默认文件管理器</strong>” 即可。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/3_19_40_28_202303031940133.png" alt="image-20230303190023964"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>Files UWP</strong> 还有许许多多的小功能细节，比如自定义外观&#x2F;主题颜色、多任务双窗口模式、紧凑模式等等，都需要你上手亲自体验。</p><p>由于它是开源免费的应用，所以如果你正在使用 Win11、Win10，并且觉得自带的资源管理器不够好用，那么就该试试这款“加强版”的 Files App 了。它虽不是那种能让你耳目一新的工具，但确实能从中感受到不少比原生文件管理器更多的细节。</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给你的Win11系统替换HarmonyOS Sans SC字体</title>
      <link href="/post/winzt.html"/>
      <url>/post/winzt.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/3_18_26_28_202303031826702.png" alt="image-20230303182619927"></p><p>下载<a href="https://pan.w2aa.ml/api/raw/?path=/Windows/System%20Fonts%20Replacer%E8%BD%AF%E4%BB%B6%20%E5%AD%97%E4%BD%93%E6%9B%BF%E6%8D%A2%E5%8C%85.7z">鸿蒙字体 Windows系统替换包和System Fonts Replacer字体替换工具</a><br>1.将字体文件夹msyh，msyhbd，msyhl三个文件拖拽到字体替换工具 点击开始执行任务。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/3_18_28_35_202303031828364.png" alt="image-20230303182834462"></p><p>2.执行完毕后不要重启电脑，再将剩下的两个字体（右键–为所有用户安装），需要管理员身份。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/3_18_30_4_202303031830250.png" alt="image-20230303183002881"></p><p>3.安装完成后重启电脑就行了。这字体不比Mac的好看？</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>replit上部署alist</title>
      <link href="/post/replit-alist.html"/>
      <url>/post/replit-alist.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>Replit是一个基于浏览器的协作式IDE，可以在线编写和运行50多种语言的代码。</p><p>Alist是一个支持多种存储的文件列表程序，使用 Gin 和 Solidjs。</p></blockquote><p>replit已经禁止部署alist，所以之前的方法不可用了，想要成功部署请往下看▼</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/3_12_23_49_202303031223582.jpeg" alt="Screenshot_2023-02-16-07-48-59-629_mark.via.jpg"></p><p>进<a href="https://replit.com/">replit官网</a>新建一个bash项目，复制下面的代码粘贴到<code>main.sh</code>文件内。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo Hello World</span><br><span class="line">URL=$&#123;REPL_SLUG&#125;.$&#123;REPL_OWNER&#125;.repl.co</span><br><span class="line">while true; do curl -s &quot;https://$URL&quot; &gt;/dev/null 2&gt;&amp;1 &amp;&amp; echo &quot;$(date +&#x27;%Y%m%d%H%M%S&#x27;) Keeping online ...&quot; &amp;&amp; sleep 300; done &amp;</span><br><span class="line">chmod +x ./replit</span><br><span class="line">nohup ./replit server</span><br></pre></td></tr></table></figure><p>再去下载<a href="https://github.com/alist-org/alist/releases/latest/download/alist-linux-musl-amd64.tar.gz">alist主程序</a>解压后改名replit，拖到bash项目目录里面▼</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/3_12_26_55_202303031226340.png" alt="image-20230303122654319"></p><p>上传完成后，再点<code>Run</code>运行</p><p>▼这样就启动好了。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/3_12_30_51_202303031230477.png" alt="image-20230303123049330"></p><p>点Shell输入命令<code>./replit admin</code>查看你的初始密码去登录就行了▼</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/3_12_34_39_202303031234349.png" alt="image-20230303123438158"></p><p>示例图▼</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/3_12_41_2_202303031241984.png" alt="image-20230303124100136"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo教程：给Butterfly添加51la统计</title>
      <link href="/post/hexo-51la.html"/>
      <url>/post/hexo-51la.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>适配butterfly只需要在butterfly的配置项的inject的head里添加即可。（注意修改id和ck）</p><blockquote><p>根据yaml规则，引号后面不能有空格，如果自己直接复制统计站的代码，记得手动删除引号后面的空格。</p></blockquote><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/10_18_18_20_202303101818134.png" alt="image-20230309174203556"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- &lt;script charset=&quot;UTF-8&quot; id=&quot;LA_COLLECT&quot; src=&quot;//sdk.51.la/js-sdk-pro.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">- &lt;script src=&quot;https://sdk.51.la/perf/js-sdk-perf.min.js&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</span><br><span class="line">- &lt;script&gt; LA.init(&#123;id:&quot;XXXXX&quot;,ck:&quot;XXXXX&quot;&#125;)&lt;/script&gt;</span><br><span class="line">- &lt;script&gt;new LingQue.Monitor().init(&#123;id:&quot;XXXXX&quot;,sendSuspicious:true&#125;);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>用这个格式来添加灵雀监控平台和网站统计。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo教程：给butterfly添加侧边栏电子钟</title>
      <link href="/post/hexo-clock.html"/>
      <url>/post/hexo-clock.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>效果如下：</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/9_9_58_44_202303090958991.png" alt="image-20230309095751427"></p><p>如果有安装店长的插件版侧边栏电子钟（与店长的电子钟冲突），在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 卸载原版电子钟</span><br><span class="line">npm uninstall hexo-butterfly-clock</span><br></pre></td></tr></table></figure><p>安装插件,在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-clock-anzhiyu --save</span><br></pre></td></tr></table></figure><p>添加配置信息，以下为写法示例在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># electric_clock</span><br><span class="line"># see https://anzhiy.cn/posts/fc18.html</span><br><span class="line">electric_clock:</span><br><span class="line">  enable: true # 开关</span><br><span class="line">  priority: 5 #过滤器优先权</span><br><span class="line">  enable_page: all # 应用页面</span><br><span class="line">  exclude:</span><br><span class="line">  # - /posts/</span><br><span class="line">  # - /about/</span><br><span class="line">  layout: # 挂载容器类型</span><br><span class="line">    type: class</span><br><span class="line">    name: sticky_layout</span><br><span class="line">    index: 0</span><br><span class="line">  loading: https://cdn.cbd.int/hexo-butterfly-clock-anzhiyu/lib/loading.gif #加载动画自定义</span><br><span class="line">  clock_css: https://cdn.cbd.int/hexo-butterfly-clock-anzhiyu/lib/clock.min.css</span><br><span class="line">  clock_js: https://cdn.cbd.int/hexo-butterfly-clock-anzhiyu/lib/clock.min.js</span><br><span class="line">  ip_api: https://widget.qweather.net/simple/static/js/he-simple-common.js?v=2.0</span><br><span class="line">  qweather_key: # 和风天气key</span><br><span class="line">  gaud_map_key: # 高得地图web服务key</span><br><span class="line">  default_rectangle: false # 开启后将一直显示rectangle位置的天气，否则将获取访问者的地理位置与天气</span><br><span class="line">  rectangle: 112.982279,28.19409 # 获取访问者位置失败时会显示该位置的天气，同时该位置为开启default_rectangle后的位置</span><br></pre></td></tr></table></figure><p>其中qweather_key 和gaud_map_key 最好自己去申请对应的 api key，默认使用我自己的，可能会被限制，不保证可靠性</p><details>  <summary>【点击查看参考教程】</summary><ol><li>登录后进入控制台</li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/9_10_27_21_202303091027251.png" alt="image-20230309093848181"></p><ol start="2"><li>创建应用</li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/9_10_27_13_202303091027107.png" alt="image-20230309093936336"></p><ol start="3"><li><p>填写应用名称和 key 名称随意</p></li><li><p>选择 WebApi</p></li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/9_9_40_35_202303090940860.png" alt="image-20230309094026708"></p><ol start="5"><li>复制 key</li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/9_10_27_13_202303091027215.png" alt="image-20230309094120874"></p><p><code>gaud_map_key</code> 申请地址: <a href="https://lbs.amap.com/">https://lbs.amap.com/</a></p><ol><li><p>登录后进入控制台</p></li><li><p>创建应用，名称随意，类型选其他</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/9_10_27_36_202303091027396.png" alt="image-20230309094213635"></p></li></ol><p>点击添加, <code>key</code>名称随意，<code>服务平台</code>选择<code>Web服务</code>,点击提交</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/9_10_27_32_202303091027445.png" alt="image-20230309094255695"></p><p>复制 key</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/9_10_27_45_202303091027044.png" alt="image-20230309094349211"></p></details><p><strong>参数释义</strong></p><table><thead><tr><th>参数</th><th>备选值&#x2F;类型</th><th>释义</th></tr></thead><tbody><tr><td>priority</td><td>number</td><td>【可选】过滤器优先级，数值越小，执行越早，默认为 10，选填</td></tr><tr><td>enable</td><td>true&#x2F;false</td><td>【必选】控制开关</td></tr><tr><td>enable_page</td><td>path&#x2F;all</td><td>【可选】填写想要应用的页面的相对路径（即路由地址）,如根目录就填’&#x2F;‘,分类页面就填’&#x2F;categories&#x2F;‘。若要应用于所有页面，就填’all’，默认为 all</td></tr><tr><td>exclude</td><td>path</td><td>【可选】填写想要屏蔽的页面，可以多个。写法见示例。原理是将屏蔽项的内容逐个放到当前路径去匹配，若当前路径包含任一屏蔽项，则不会挂载。</td></tr><tr><td>layout.type</td><td>id&#x2F;class</td><td>【可选】挂载容器类型，填写 id 或 class，不填则默认为 id</td></tr><tr><td>layout.name</td><td>text</td><td>【必选】挂载容器名称</td></tr><tr><td>layout.index</td><td>0 和正整数</td><td>【可选】前提是 layout.type 为 class，因为同一页面可能有多个 class，此项用来确认究竟排在第几个顺位</td></tr><tr><td>loading</td><td>URL</td><td>【可选】电子钟加载动画的图片</td></tr><tr><td>clock_css</td><td>URL</td><td>【可选】电子钟样式 CDN 资源</td></tr><tr><td>clock_js</td><td>URL</td><td>【可选】电子钟执行脚本 CDN 资源</td></tr><tr><td>ip_api</td><td>URL</td><td>【可选】获取时钟 IP 的 API</td></tr><tr><td>qweather_key</td><td>text</td><td>【可选】和风天气 key</td></tr><tr><td>gaud_map_key</td><td>text</td><td>【可选】高得地图 web 服务 key</td></tr><tr><td>default_rectangle</td><td>text</td><td>【可选】开启后将一直显示 rectangle 位置的天气，否则将获取访问者的地理位置与天气</td></tr><tr><td>rectangle</td><td>text</td><td>【可选】获取访问者位置失败时会显示该位置的天气，同时该位置为开启 default_rectangle 后的位置</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>New Bing防止跳转cnbing的方法</title>
      <link href="/post/newbing.html"/>
      <url>/post/newbing.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>其实老早就申请了，一直在等候列表中……</p><p>28号收到了通过的邮件</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/1_8_21_28_202303010821627.png" alt="image-20230301082127041"></p><p>简单分享一下使用的体验，然后分享一个国内小伙伴如何防止bing自动跳转到cn.bing的方法。</p><h2 id="解决bing跳转cn-bing的方法"><a href="#解决bing跳转cn-bing的方法" class="headerlink" title="解决bing跳转cn.bing的方法"></a>解决bing跳转cn.bing的方法</h2><p>国内用bing非常难受，会自动跳转到 cn.bing.com，而众所周知的原因，cn.bing是没有new bing的功能的，即使你已经通过了申请 。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/1_8_24_32_202303010824688.png" alt="image-20230301082431591"></p><p>所以，申请通过了之后，为了以后方便，我们需要解决的第一个问题就是——如何防止浏览器自动跳转cn.bing</p><p><strong>简单分享一下方法：</strong></p><p>1、打开链接：<a href="https://microsoftedge.microsoft.com/addons/Microsoft-Edge-Extensions-Home?hl=zh-CN">Microsoft Edge 加载项</a></p><p>2、搜索：<code>header editor</code></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/1_8_25_57_202303010825568.webp" alt="image-20230228145342235"></p><p>3、安装之后填入下面的内容</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/1_8_26_23_202303010826963.webp" alt="image-20230228145218105"></p><p>名称：Bing（随便写）</p><p>规则类型：修改请求头</p><p>匹配类型：正则表达式</p><p>匹配规则：<code>^http(s?)://www\.bing\.com/(.*)</code></p><p>执行类型：常规</p><p>头名称：<code>x-forwarded-for</code></p><p>头内容：<code>8.8.8.8</code></p><p>然后记得打开：</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/1_8_28_25_202303010828124.png" alt="image-20230301082824024"></p><p>就可以愉快使用了！</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/1_8_55_44_202303010855159.gif" alt="New Bing防止跳转cnbing的方法"></p><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>电脑上下了个Microsoft Edge的客户端，然后登录微软账号，<code>bing.com</code>搜索：</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/1_8_45_25_202303010845667.png" alt="image-20230301084524605"></p><p>点击聊天或者鼠标上滑就能触发互动模式了。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/1_8_30_18_202303010830182.png" alt="image-20230301083017104"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>比起ChatGPT，New Bing的特点是：</p><ul><li>不需要魔法上网</li><li>回答问题实效性更好一些，ChatGPT目前只知道2021年之前的内容。</li><li>回答的问题是会有参考来源的，猜测回答应该是在这些参考来源里面提炼总结出来的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hugo食用指南</title>
      <link href="/post/hugo.html"/>
      <url>/post/hugo.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Hugo是一款静态网站生成器，用Go语言编写，它具有快速，灵活，强大的特性。Hugo可以轻松地创建博客，静态网站，文档站点，以及任何其他网站。Hugo拥有一个强大的主题系统，可以轻松定制和美化网站，并且支持Markdown，HTML，CSS，JavaScript等多种格式。Hugo还支持多语言，可以轻松创建多语言网站。</p><h2 id="安装hugo"><a href="#安装hugo" class="headerlink" title="安装hugo"></a>安装hugo</h2><p>Hugo中文文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.gohugo.org/</span><br></pre></td></tr></table></figure><p>Hugo官方官网</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gohugo.io</span><br></pre></td></tr></table></figure><p>Hugo安装包下载地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/gohugoio/hugo/releases</span><br></pre></td></tr></table></figure><p>在下载Hugo安装包时，有Hugo和Hugo-extended两种可运行文件下载，其中Hugo仅支持JS，Hugo-extended是Hugo的扩展版本，在支持JS的基础上还支持TS，所以在下载时建议下载Hugo-extended版本的可执行文件。</p><h3 id="Windows系统的安装与配置"><a href="#Windows系统的安装与配置" class="headerlink" title="Windows系统的安装与配置"></a>Windows系统的安装与配置</h3><p>在<a href="https://github.com/gohugoio/hugo/releases">Hugo安装包下载地址：Releases · gohugoio&#x2F;hugo (github.com)</a>下载好Hugo.exe文件后，将Hugo.exe文件放在想要存放的位置即可，比如我这里放在<code>D:\Blog\Hugo</code>文件夹下面，此时在该文件夹下面打开cmd命令提示符即可运行Hugo的相关命令，运行命令Hugo命令实际上就是在调用Hugo.exe文件。</p><h4 id="Windows环境变量配置"><a href="#Windows环境变量配置" class="headerlink" title="Windows环境变量配置"></a>Windows环境变量配置</h4><p>​    此电脑 – 属性 – 高级系统设置 – 高级 –环境变量 – Path</p><p>​    在Windows的系统环境变量配置中，添加存放Hugo.exe文件的文件夹，确定之后即可在其他任意地方运行Hugo命令而不是仅在安装位置运行。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/25_21_47_48_202302252147886.png" alt="Windows下Hugo环境变量配置"></p><h3 id="安装检查"><a href="#安装检查" class="headerlink" title="安装检查"></a>安装检查</h3><p>​    在配置好环境变量后，在cmd或者shell（尽量不要在可执行文件存放的位置中）中运行Hugo命令检查是否安装成功，一般而言使用version查看是否安装成功。</p><p>在cmd和shell中执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo version</span><br></pre></td></tr></table></figure><p>成功示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo v0.110.0-e32a493b7826d02763c3b79623952e625402b168+extended windows/amd64 BuildDate=2023-01-17T12:16:09Z VendorInfo=gohugoio</span><br></pre></td></tr></table></figure><h2 id="创建Hugo站点"><a href="#创建Hugo站点" class="headerlink" title="创建Hugo站点"></a>创建Hugo站点</h2><p>使用Hugo创建一个新的站点非常简单。在终端或命令行工具中输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo new site blog-hugo</span><br></pre></td></tr></table></figure><p>这会在当前目录下创建一个名为<code>blog-hugo</code>的新站点。你也可以自定义站点的名称和位置。</p><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p>两款漂亮的主题：</p><p><a href="https://github.com/CaiJimmy/hugo-theme-stack">https://github.com/CaiJimmy/hugo-theme-stack</a></p><p><a href="https://github.com/Mantyke/Hugo-stack-theme-mod">https://github.com/Mantyke/Hugo-stack-theme-mod</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd blog-hugo/themes</span><br><span class="line">git clone https://github.com/CaiJimmy/hugo-theme-stack</span><br></pre></td></tr></table></figure><p>这会将”Hugo-stack-theme-mod”主题下载到<code>blog-hugo/themes</code>目录中。</p><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p><code>blog-hugo</code>根目录下<code>config.toml</code>重命名为<code>config_backup.toml</code></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/25_22_11_59_202302252211680.png" alt="image-20230225221158693"></p><p>再把<code>blog-hugo\themes\hugo-theme-stack\exampleSite</code>的文件拷贝到<code>blog-hugo</code>根目录</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/25_22_19_15_202302252219311.png" alt="image-20230225221914126"></p><p><code>config.yaml</code>是站点的配置文件，修改它即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">baseurl: https://example.com</span><br><span class="line">languageCode: zh-cn</span><br><span class="line">theme: stack</span><br><span class="line">paginate: 5</span><br><span class="line">title: 时光Blog</span><br><span class="line"></span><br><span class="line"># Change it to your Disqus shortname before using</span><br><span class="line">disqusShortname: stack</span><br><span class="line"></span><br><span class="line"># GA Tracking ID</span><br><span class="line">googleAnalytics:</span><br><span class="line"></span><br><span class="line"># Theme i18n support</span><br><span class="line"># Available values: en, fr, id, ja, ko, pt-br, zh-cn, zh-tw, es, de, nl, it, th, el, uk</span><br><span class="line">DefaultContentLanguage: zh-cn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Set hasCJKLanguage to true if DefaultContentLanguage is in [zh-cn ja ko]</span><br><span class="line"># This will make .Summary and .WordCount behave correctly for CJK languages.</span><br><span class="line">hasCJKLanguage: true</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h4><p>使用Markdown语法编写文章，我习惯使用Typora软件，搭配图床非常好用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 青龙面板安装搭建保姆级教程</span><br><span class="line">date: 2023-02-25T18:29:44+08:00</span><br><span class="line">draft: false</span><br><span class="line">categories:</span><br><span class="line">  - Linux</span><br><span class="line">  - 教程</span><br><span class="line">tags:</span><br><span class="line">  - 青龙面板</span><br><span class="line">  - docker</span><br><span class="line">image: http://browser9.qhimg.com/bdr/__85/t0179b947962a684673.jpg</span><br><span class="line">---</span><br><span class="line">正文</span><br></pre></td></tr></table></figure><p>在上面的代码中，<code>title</code>指定文章的标题，<code>date</code>指定文章的发布时间，<code>draft</code>设置为<code>false</code>表示文章已经发布。在<code>---</code>之后的部分就是文章的正文内容，使用Markdown语法编写。</p><p><code>青龙面板安装搭建保姆级教程.md</code>文件放入<code>blog-hugo/content/post</code>目录</p><h4 id="左侧菜单中文化"><a href="#左侧菜单中文化" class="headerlink" title="左侧菜单中文化"></a>左侧菜单中文化</h4><p>修改<code>blog-hugo\content\page</code>目录里文件，about对应关于，archives是归档，friends是友链，search是搜索</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/25_22_37_50_202302252237576.png" alt="image-20230225223749605"></p><p>再修改每个文件夹内的index.md文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">title: 关于</span><br><span class="line">description: Hugo, the world&#x27;s fastest framework for building websites</span><br><span class="line">date: &#x27;2019-02-28&#x27;</span><br><span class="line">aliases:</span><br><span class="line">  - about-us</span><br><span class="line">  - about-hugo</span><br><span class="line">  - contact</span><br><span class="line">license: CC BY-NC-ND</span><br><span class="line">lastmod: &#x27;2020-10-09&#x27;</span><br><span class="line">menu:</span><br><span class="line">    main: </span><br><span class="line">        weight: -50</span><br><span class="line">        params:</span><br><span class="line">            icon: user</span><br></pre></td></tr></table></figure><p>把<code>title:</code> 后面改成对应的中文</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/25_22_39_53_202302252239421.png" alt="image-20230225223952114"></p><h4 id="归档页修改"><a href="#归档页修改" class="headerlink" title="归档页修改"></a>归档页修改</h4><p><code>blog-hugo\content\categories</code>目录内新建分类文件夹，文件夹内再新建<code>_index.md</code>文件</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/25_22_41_9_202302252241631.png" alt="image-20230225224106629"></p><p><strong>修改<code>_index.md</code>文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: &quot;教程&quot;</span><br><span class="line">description: &quot;分享一些教程和折腾的经验&quot;</span><br><span class="line">slug: &quot;教程&quot;</span><br><span class="line">image: &quot;教程.png&quot;</span><br><span class="line">style:</span><br><span class="line">    background: &quot;#2a9d8f&quot;</span><br><span class="line">    color: &quot;#fff&quot;</span><br></pre></td></tr></table></figure><p>背景图片放入同目录</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/25_22_44_39_202302252244847.png" alt="image-20230225224438579"></p><p><strong>效果如下</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/25_22_45_24_202302252245376.png" alt="image-20230225224522799"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/25_22_45_40_202302252245385.png" alt="image-20230225224539387"></p><h4 id="预览站点"><a href="#预览站点" class="headerlink" title="预览站点"></a>预览站点</h4><p>在cmd中输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo server -D</span><br></pre></td></tr></table></figure><p>这会启动一个本地的Web服务器，你可以在浏览器中访问<code>http://localhost:1313/</code>预览你的站点。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/25_22_34_56_202302252234492.png" alt="image-20230225223455079"></p><h2 id="部署站点"><a href="#部署站点" class="headerlink" title="部署站点"></a>部署站点</h2><p>当你满意站点的样式和内容后，你可以使用Hugo生成静态文件，并将它们部署到服务器上。在终端或命令行工具中输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo</span><br></pre></td></tr></table></figure><p>这会在当前目录下生成静态文件，包括HTML、CSS、JS等。你可以将这些文件上传到你的Web服务器上。你可以使用FTP或SCP等工具将文件上传到服务器上，也可以将静态文件部署到GitHub Pages或Netlify等平台上。</p><p>如果你想将静态文件部署到GitHub上，可以按照以下步骤操作：</p><ol><li><p>在GitHub上创建一个新的仓库，名称为<code>blog-hugo</code></p></li><li><p>运行以下命令生成静态文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo</span><br></pre></td></tr></table></figure></li><li><p>将生成的静态文件上传到GitHub仓库中，在终端或命令行工具中进入站点根目录，运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd </span><br><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m &#x27;deploy&#x27;</span><br><span class="line">git push -f https://$&#123;ghp_xxx&#125;@github.com/xiaowansm5/blog-hugo.git master:main</span><br></pre></td></tr></table></figure></li></ol><p><code>ghp_xxx</code>填入你的github令牌，<code>master:</code>填入仓库分支</p><p>至此，你已经成功地使用Hugo创建了一个静态网站并将其部署到了GitHub上。</p><h2 id="示例站点"><a href="#示例站点" class="headerlink" title="示例站点"></a>示例站点</h2><p>我搭建的hugo博客：</p><p><a href="https://wwang.eu.org/">https://wwang.eu.org</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hugo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适用OpenWrt固件和NAS的静态导航页源码</title>
      <link href="/post/openwrt-www.html"/>
      <url>/post/openwrt-www.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://xcloud.fly.dev/OneDrive/server/nav.zip">https://xcloud.fly.dev/OneDrive/server/nav.zip</a></p><h2 id="修改源码"><a href="#修改源码" class="headerlink" title="修改源码"></a>修改源码</h2><p>依葫芦画瓢修改index.html文件，最好使用Visual Studio Code进行修改</p><h2 id="上传文件到openwrt"><a href="#上传文件到openwrt" class="headerlink" title="上传文件到openwrt"></a>上传文件到openwrt</h2><p>确保你的openwrt已经安装了uhttpd插件，使用WinSCP等软件登录openwrt，再把源码整个文件夹拖到<code>www</code>目录下</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/24_13_19_23_202302241319927.png" alt="image-20230224131915226"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/24_13_20_24_202302241320965.png" alt="1"></p><h2 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h2><p>地址是：openwrt后台ip&#x2F;nav</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/24_13_24_17_202302241324980.png" alt="image-20230224132416230"></p><h2 id="其他玩法"><a href="#其他玩法" class="headerlink" title="其他玩法"></a>其他玩法</h2><p>静态网站都可以按照这个方法搭建，比如静态博客,在线音乐站等等</p><p>示例：</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/24_13_41_13_202302241341229.png" alt="image-20230224132931379"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/24_13_34_59_202302241334647.png" alt="image-20230224133152752"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/24_14_10_34_202302241410867.gif" alt="openwrt搭建静态站点"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>配合公网ip或内网穿透(frp，nps，ddnsto等)就能外网访问了。</p>]]></content>
      
      
      <categories>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frps和 Nginx 共存 80 443 端口及泛域名支持教程</title>
      <link href="/post/frps.html"/>
      <url>/post/frps.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ol><li>域名泛解析到服务器</li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/20_21_37_5_202302202137905.png" alt="image-20230220213704645"></p><ol start="2"><li>添加站点，添加泛域名</li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/20_21_37_26_202302202137320.png" alt="image-20230220212631869"></p><ol start="3"><li>添加反代</li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/20_21_37_45_202302202137021.png" alt="image-20230220212708964"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信接入ChatGPT API 微信就是ChatGPT AI人工智能bot【二】</title>
      <link href="/post/ChatGPT-bot.html"/>
      <url>/post/ChatGPT-bot.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="一、登陆OpenAI官网登录你的账号，获取API-key"><a href="#一、登陆OpenAI官网登录你的账号，获取API-key" class="headerlink" title="一、登陆OpenAI官网登录你的账号，获取API key"></a>一、登陆OpenAI官网登录你的账号，获取API key</h2><p>官网：<a href="http://www.openai.com/">www.openai.com</a></p><h2 id="二、Wechat-Chatgpt项目"><a href="#二、Wechat-Chatgpt项目" class="headerlink" title="二、Wechat-Chatgpt项目"></a>二、Wechat-Chatgpt项目</h2><p><a href="https://github.com/AutumnWhj/ChatGPT-wechat-bot">https://github.com/AutumnWhj/ChatGPT-wechat-bot</a></p><h2 id="三、开始配置服务器"><a href="#三、开始配置服务器" class="headerlink" title="三、开始配置服务器"></a>三、开始配置服务器</h2><p>安装Node环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade</span><br><span class="line"></span><br><span class="line">curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -</span><br><span class="line"></span><br><span class="line">sudo apt-get install nodejs</span><br></pre></td></tr></table></figure><p>克隆项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/AutumnWhj/ChatGPT-wechat-bot</span><br></pre></td></tr></table></figure><p>安装依赖并创建配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 进去ChatGPT-wechat-bot目录</span><br><span class="line">cd ChatGPT-wechat-bot</span><br><span class="line"></span><br><span class="line"># 安装依赖</span><br><span class="line">npm install</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>&#x2F;src&#x2F;config.ts内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /src/config.ts</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  // 填入你的OPENAI_API_KEY</span><br><span class="line">  OPENAI_API_KEY: &#x27;&#x27;,</span><br><span class="line">  // 设置获取消息的重试次数</span><br><span class="line">  retryTimes: 3,</span><br><span class="line">  // 在群组中设置唤醒微信机器人的关键词</span><br><span class="line">  groupKey: &#x27;小艾&#x27;,</span><br><span class="line">  // 在私聊中设置唤醒微信机器人的关键词</span><br><span class="line">  privateKey: &#x27;&#x27;,</span><br><span class="line">  // 重置上下文的关键词，如可设置为reset</span><br><span class="line">  resetKey: &#x27;reset&#x27;,</span><br><span class="line">  // 开启会后收到ChatGPT的自动回复</span><br><span class="line">  autoReply: true,</span><br><span class="line">  // 根据正则匹配是否自动通过好友验证</span><br><span class="line">  friendShipRule: /chatgpt|chat/,</span><br><span class="line">  // 是否在群聊中按照回复的格式进行回复</span><br><span class="line">  groupReplyMode: true,</span><br><span class="line">  // 是否在私聊中按照回复的格式进行回复</span><br><span class="line">  privateReplyMode: false,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>填入你的OPENAI_API<strong>填入<code>OPENAI_API_KEY</code></strong></p><p>启动服务并扫码登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/15_10_31_51_202302151031678.png" alt="image-20230215103143231"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGPT </tag>
            
            <tag> bot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信接入ChatGPT API 微信就是ChatGPT AI人工智能bot【一】</title>
      <link href="/post/ChatGPT.html"/>
      <url>/post/ChatGPT.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="一、登陆OpenAI官网登录你的账号，获取API-key"><a href="#一、登陆OpenAI官网登录你的账号，获取API-key" class="headerlink" title="一、登陆OpenAI官网登录你的账号，获取API key"></a>一、登陆OpenAI官网登录你的账号，获取API key</h2><p>官网：<a href="http://www.openai.com/">www.openai.com</a></p><h2 id="二、Wechat-Chatgpt项目"><a href="#二、Wechat-Chatgpt项目" class="headerlink" title="二、Wechat-Chatgpt项目"></a>二、Wechat-Chatgpt项目</h2><p><a href="https://github.com/fuergaosi233/wechat-chatgpt">https://github.com/fuergaosi233/wechat-chatgpt</a></p><h2 id="三、开始配置服务器"><a href="#三、开始配置服务器" class="headerlink" title="三、开始配置服务器"></a>三、开始配置服务器</h2><p>安装Node环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade</span><br><span class="line"></span><br><span class="line">curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -</span><br><span class="line"></span><br><span class="line">sudo apt-get install nodejs</span><br></pre></td></tr></table></figure><p>克隆项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/fuergaosi233/wechat-chatgpt.git</span><br></pre></td></tr></table></figure><p>安装依赖并创建配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 进去wechat-chatgpt目录</span><br><span class="line">cd wechat-chatgpt</span><br><span class="line"></span><br><span class="line"># 切换到new-wechatgpt分支</span><br><span class="line">git checkout new-wechatgpt</span><br><span class="line"></span><br><span class="line"># 安装依赖</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"># 创建配置文件</span><br><span class="line">cp config.yaml.example config.yaml</span><br><span class="line">cp .env.example .env</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>config.yaml内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chatGPTAccountPool:</span><br><span class="line">  - email: 填写你的ChatGPT账号</span><br><span class="line">    password: 填写你的ChatGPT密码</span><br><span class="line">    isGoogleLogin: false</span><br><span class="line">chatPrivateTiggerKeyword: &quot;&quot;</span><br><span class="line">openAIProxy: &quot;&quot;</span><br></pre></td></tr></table></figure><p>.env内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CHAT_GPT_EMAIL=</span><br><span class="line">CHAT_GPT_PASSWORD=</span><br><span class="line">CHAT_GPT_RETRY_TIMES=</span><br><span class="line">CHAT_PRIVATE_TRIGGER_KEYWORD=</span><br><span class="line">OPENAI_PROXY=</span><br><span class="line">NOPECHA_KEY=</span><br><span class="line">CAPTCHA_TOKEN=</span><br><span class="line">OPENAI_API_KEY=填写你的API_KEY</span><br></pre></td></tr></table></figure><p>修改模型</p><p>打开文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd wechat-chatgpt</span><br><span class="line">vi node_modules/chatgpt/build/index.js          </span><br><span class="line"></span><br><span class="line">(73行)</span><br></pre></td></tr></table></figure><p>修改模型为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-davinci-003</span><br></pre></td></tr></table></figure><p>启动服务并扫码登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/15_10_31_51_202302151031678.png" alt="image-20230215103143231"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGPT </tag>
            
            <tag> bot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clash for Mac 版使用教程 | ClashX 教程</title>
      <link href="/post/ClashX.html"/>
      <url>/post/ClashX.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>说明：ClashX 软件版权及后续权益属于软件作者，软件相关介绍及说明可参考作者主页：<a href="https://github.com/yichengchen/clashX">https://github.com/yichengchen/clashX</a></p><p>ClashX 的新版本支持一键导入功能，请确保您已安装最新版的 ClashX。</p><p>1、下载好后安装该软件（如提示来历不明开发者，请去设置-隐私中将此APP信任）</p><hr><p>2、使用Safari浏览器登录进入个人中心，在<strong>仪表盘</strong>页面或<strong>我的订阅</strong>页面找到“<strong>一键订阅</strong>”按钮，点击并选择“<strong>导入到Clash</strong>”选项。点击后会自动提示跳转到ClashX客户端。</p><p>如果系统无法自动跳转，则可点击“<strong>一键订阅</strong>”按钮的“<strong>复制订阅地址</strong>”选项，并在稍后填入到ClashX客户端中进行手动下载。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/9_14_52_19_202302091452603.png" alt="img"></p><hr><p>3、一键导入成功的用户请直接前进到第6步。旧版本客户端用户需要进一步手动添加托管配置地址。前往菜单项的<strong>配置</strong> – <strong>托管配置</strong> – <strong>设置地址</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/9_14_52_21_202302091452173.png" alt="img"></p><hr><p>4、将第2步复制的配置文件托管地址复制到URL输入框，点击OK即可。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/9_14_52_21_202302091452470.png" alt="img"></p><hr><p>5、客户端将从BosLife API中心验证地址并下载配置文件。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/9_14_52_18_202302091452707.png" alt="img"></p><hr><p>6、设置软件模式。首先勾选<strong>设置为系统代理</strong>（软件启动生效），然后根据需求选择<strong>出站模式</strong>，建议为<strong>规则判断</strong>即可。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/9_14_52_20_202302091452327.png" alt="img"></p><hr><h3 id="进阶操作：可选白名单模式配置文件"><a href="#进阶操作：可选白名单模式配置文件" class="headerlink" title="进阶操作：可选白名单模式配置文件"></a>进阶操作：可选白名单模式配置文件</h3><p>注意：1. BosLife不提供任何进阶代码编写指导，也不接受关于进阶功能的工单支持请求，无编程经验的用户请一定不要操作进阶功能。</p><ol start="2"><li>进阶操作仅适用于客户端v1.72.0及更新版本。</li></ol><p>BosLife 为进阶用户提供了可选的简易白名单模式配置文件，相比默认订阅配置文件，白名单模式配置文件的区别有：</p><ul><li>规则模式下，带有“<strong>自动选择</strong>”和“<strong>故障转移</strong>”分组，分别对应 <strong>url-test</strong> 模式和 <strong>fallback</strong> 模式，默认 BosLife 分组保留。</li><li>配置文件使用<strong>混合端口</strong>来代替旧版本的<strong>三端口分离</strong>，即 <strong>mixed-port</strong> 代替 <strong>port</strong>、<strong>socks-port</strong>、<strong>redir-port</strong>。</li><li>带有 <strong>redir-host</strong> 的增强模式 dns 处理，默认禁用 dns-ipv6。</li><li>默认<strong>白名单模式</strong>，即当所有分流规则均无匹配项时，默认走代理。</li></ul><h6 id="操作步骤（简略）"><a href="#操作步骤（简略）" class="headerlink" title="操作步骤（简略）"></a>操作步骤（简略）</h6><ol><li>上述基本操作步骤2时，点击“一键订阅”按钮的“复制订阅地址”选项。</li><li>上述基本操作步骤4时，在URL输入栏中粘贴自己的订阅地址，在地址最后添加<code>&amp;flag=clashw</code>标签，点击“OK”按钮后客户端会自动下载白名单配置文件，后续步骤相同。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> ClashX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openwrt固件关闭ipv6图文教程</title>
      <link href="/post/openwrt-ipv6.html"/>
      <url>/post/openwrt-ipv6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/16_19_17_45_202302161917068.PNG" alt="关闭ipv6"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/16_19_17_42_202302161917612.PNG" alt="关闭ipv6-1"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/16_19_17_44_202302161917429.PNG" alt="关闭ipv6-2"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/16_19_17_44_202302161917203.PNG" alt="关闭ipv6-3"></p>]]></content>
      
      
      <categories>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> ipv6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openwrt固件闭源无线驱动设置教程</title>
      <link href="/post/op-wifi.html"/>
      <url>/post/op-wifi.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>使用了闭源无线驱动的openwrt固件无线信号强，但是设置无线的时候比较卡顿，这是正常的，多点耐心即可</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/15_17_31_54_202302151731909.jpg" alt="img"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/15_17_32_3_202302151732038.jpg" alt="img"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/15_17_32_8_202302151732332.jpg" alt="img"></p><p><strong>点了《保存&amp;应用》后会卡着不动，等30秒钟后直接点左侧《无线》即可</strong></p><p><strong>5G也是一样的设置方式.</strong></p><p><strong>如果是下图的情况也不要着急，等待一会,刷新页面即可恢复正常（按F5键刷新）</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/15_17_32_15_202302151732645.jpg" alt="img"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/15_17_32_13_202302151732123.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> 闭源无线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过ZeroTier插件远程管理软路由</title>
      <link href="/post/zt.html"/>
      <url>/post/zt.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>OpenWrt是一款开源的路由器系统，可以自由安装各种插件，但由于是非商业化的系统，没有统一的云管理平台，所以远程管理相对麻烦，需要借助于第三方服务器。当然如果家里宽带有独立公网ip，还可以通过ddns实现远程管理。</p><p>这里给大家介绍一种内网穿透的方法，ZeroTier是一款比较常用的内网穿透软件，支持运行在多种平台中，如windows、macos、android、openwrt、linux等，</p><p><img src="https://gitlab.com/xiaowansm/img/raw/main/pictures/2023/02/4_21_6_38_640.png" alt="图片"></p><p>ZeroTier类似于虚拟专网软件，拨号成功后可以实现点对点直通，ZeroTier是可以免费使用的，普通个人使用完全没问题，免费版本最大支持25台设备。</p><p><img src="https://gitlab.com/xiaowansm/img/raw/main/pictures/2023/02/4_21_6_45_640.png" alt="图片"></p><p>这里教大家如何通过ZeroTier实现远程管理openwrt系统，这样可以很方便的实时查看路由器状态，比如实时查看小孩是否正在玩游戏。</p><p>首先我们需要在zerotier官网注册一个账号</p><p>官网地址</p><p><a href="http://www.zerotier.com/">www.zerotier.com</a></p><p><img src="https://gitlab.com/xiaowansm/img/raw/main/pictures/2023/02/4_21_6_48_640.png" alt="图片"></p><p>注册成功后登录，然后新建一个网络</p><p><img src="https://gitlab.com/xiaowansm/img/raw/main/pictures/2023/02/4_21_7_47_640.png" alt="图片"></p><p><img src="https://gitlab.com/xiaowansm/img/raw/main/pictures/2023/02/4_21_9_2_image-20230204210900683.png" alt="image-20230204210900683"></p><p><img src="https://gitlab.com/xiaowansm/img/raw/main/pictures/2023/02/4_21_9_36_image-20230204210934950.png" alt="image-20230204210934950"></p><p>复制新建的网络id，该id用于各个终端进行注册，只要输入了该id，就可以将设备绑定到该网络。</p><p>进入openwrt后台的zerotier插件界面</p><p><img src="https://gitlab.com/xiaowansm/img/raw/main/pictures/2023/02/4_21_9_58_640.png" alt="图片"></p><p>输入上面新建网络的id并启用zerotier，如下图所示</p><p><img src="https://gitlab.com/xiaowansm/img/raw/main/pictures/2023/02/4_21_11_15_640.png" alt="图片"></p><p>这样openwrt中就配置完成，回到zerotier官网的网络界面，滚动到页面下方的设备列表，可以看到有一台新的设备</p><p><img src="https://gitlab.com/xiaowansm/img/raw/main/pictures/2023/02/4_21_11_13_640.png" alt="图片"></p><p>由于还没有授权，需要勾选授权加入网络</p><p><img src="https://gitlab.com/xiaowansm/img/raw/main/pictures/2023/02/4_21_11_10_640.png" alt="图片"></p><p>这样openwrt系统就注册成功了，为了远程能够管理，我们还需要将远程的电脑加入到该网络，可以理解为将openwrt系统和电脑加入到同一个局域网（虚拟）</p><p>windows中的操作过程类似，需要先下载一个windows客户端然后加入到新的网络</p><p><img src="https://gitlab.com/xiaowansm/img/raw/main/pictures/2023/02/4_21_11_7_640.png" alt="图片"></p><p>输入网络id即可加入，同样也需要在设备列表中勾选授权，授权成功后可以看到有两台设备在该网络下面</p><p><img src="https://gitlab.com/xiaowansm/img/raw/main/pictures/2023/02/4_21_11_4_640.png" alt="图片"></p><p>在windows网络适配其中看到新建了一个虚拟网卡，该虚拟网卡的ip由zerotier服务器分配，同一个网络的虚拟网卡在同一个网段，注意该ip为私有网络地址，在zerotier服务器中可以配置。</p><p><img src="https://gitlab.com/xiaowansm/img/raw/main/pictures/2023/02/4_21_11_1_640.png" alt="图片"></p><p><img src="https://gitlab.com/xiaowansm/img/raw/main/pictures/2023/02/4_21_10_59_640.png" alt="图片"></p><p>下面我们进入openwrt后台通过ifconfig命令查看网卡信息，同样可以看到多出了一个虚拟网卡，其ip和window的虚拟网卡在同一个网段。</p><p><img src="https://gitlab.com/xiaowansm/img/raw/main/pictures/2023/02/4_21_7_26_640.png" alt="图片"></p><p>现在我们在windows电脑中直接访问openwrt的虚拟ip即可实现远程管理openwrt系统</p><p><img src="https://gitlab.com/xiaowansm/img/raw/main/pictures/2023/02/4_21_7_24_640.png" alt="图片"></p><p><img src="https://gitlab.com/xiaowansm/img/raw/main/pictures/2023/02/4_21_7_1_640.png" alt="图片"></p><p><img src="https://gitlab.com/xiaowansm/img/raw/main/pictures/2023/02/4_21_7_4_640.png" alt="图片"></p><p>当然在openwrt系统中也可以直接ping通windows虚拟网卡的ip</p><p><img src="https://gitlab.com/xiaowansm/img/raw/main/pictures/2023/02/4_21_7_9_640.png" alt="图片"></p><p><img src="https://gitlab.com/xiaowansm/img/raw/main/pictures/2023/02/4_21_7_16_640.png" alt="图片"></p><p>可能很多同学不理解为什么两个局域网的ip能够跨公网互通，这里就涉及到虚拟专用网络的知识了，以openwrt系统访问windows为例，当我们ping 10.243.53.247地址时，首先会找到直连路由走到zerotier接口，而该接口的数据会经过zerotier-one进程进行封包处理，然后再将包发送到zerotier服务器，而发送到zerotier服务器的报文会通过默认路由发出，通过公网传输后到达zerotier服务器，然后转发到对端的windows物理网卡，最终到达windows zerotier虚拟网卡并解隧道报文，对于虚拟网卡来说，它是无法感知中间传输时加了隧道，而对于物理网卡来说，也不知道报文内容还包含一层ip报文，当然也不需要关心，隧道的核心思想就是双层ip头部，绕过防火墙的原理也是如此，只是加密算法和协议的不同而已。</p><p><img src="https://gitlab.com/xiaowansm/img/raw/main/pictures/2023/02/4_21_7_13_640.png" alt="图片"></p><p>以上就是通过zerotier远程访问openwrt系统的教程，当然也可以通过zerotier远程管理windows或linux电脑，只要保证各个设备加入到同一网络即可，结合静态路由还可以实现私网到私网的互通。</p>]]></content>
      
      
      <categories>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> ZeroTier </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wget 使用技巧</title>
      <link href="/post/wget.html"/>
      <url>/post/wget.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>wget 是一个命令行的下载工具。对于我们这些 Linux 用户来说，几乎每天都在使用它。下面为大家介绍几个有用的 wget 小技巧，可以让你更加高效而灵活的使用 wget。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -r -np -nd http://example.com/packages/</span><br></pre></td></tr></table></figure><p>  这条命令可以下载 <a href="http://example.com/">http://example.com</a> 网站上 packages 目录中的所有文件。其中，<code>-np</code> 的作用是不遍历父目录，<code>-nd</code> 表示不在本机重新创建目录结构。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -r -np -nd --accept=iso http://example.com/centos-5/i386/</span><br></pre></td></tr></table></figure><p>  与上一条命令相似，但多加了一个 <code>--accept=iso</code> 选项，这指示 wget 仅下载 i386 目录中所有扩展名为 iso 的文件。你也可以指定多个扩展名，只需用逗号分隔即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -i filename.txt</span><br></pre></td></tr></table></figure><p>  此命令常用于批量下载的情形，把所有需要下载文件的地址放到 filename.txt 中，然后 wget 就会自动为你下载所有文件了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c http://example.com/really-big-file.iso</span><br></pre></td></tr></table></figure><p>  这里所指定的 <code>-c</code> 选项的作用为断点续传。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -m -k (-H) http://www.example.com/</span><br></pre></td></tr></table></figure><p>  该命令可用来镜像一个网站，wget 将对链接进行转换。如果网站中的图像是放在另外的站点，那么可以使用 <code>-H</code> 选项。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用软件upx、unzip、tar那点事</title>
      <link href="/post/tar.html"/>
      <url>/post/tar.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="使用-UPX-压缩可执行文件"><a href="#使用-UPX-压缩可执行文件" class="headerlink" title="使用 UPX 压缩可执行文件"></a>使用 UPX 压缩可执行文件</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install upx -y</span><br></pre></td></tr></table></figure><h4 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upx [options] yourfile</span><br></pre></td></tr></table></figure><p>upx 对文件的默认操作即为压缩，使用上述命令会使用默认参数压缩并替换文件 yourfile。<br>upx 支持如下可选参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-1[23456789]：不同的压缩级别，数值越高压缩率越高，但耗时更长。对于小于 512 KiB 的文件默认使用 -8，其他的默认为 -7。</span><br><span class="line">--best：最高压缩级别</span><br><span class="line">--brute：尝试使用各种压缩方式来获取最高压缩比</span><br><span class="line">--ultra-brute：尝试使用更多的参数来获取更高的压缩比</span><br><span class="line">-o [file]：将压缩文件保存为 [file]</span><br></pre></td></tr></table></figure><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upx -d [yourfile]</span><br></pre></td></tr></table></figure><p>[scode type&#x3D;”share”]压缩的程序占用更少的硬盘空间，但会在打开时消耗更多的 <code>CPU</code> 资源，在运行时占用更多的内存（或 <code>swap</code> 空间、<code>/tmp</code> 存储等）[&#x2F;scode]</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>UPX 可以压缩各种类型的可执行文件<br>压缩后的文件可以直接由操作系统执行<br>压缩过程不会修改源文件，也就意味着解压后直接可以得到原始文件<br>不会产生额外的动态库调用</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>运行的程序不会共享数据段（汇编），所以多实例运行的程序不适合压缩<br>使用 <code>ldd</code> 和 <code>size</code> 命令无法获取到程序的有效信息</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>为什么压缩后的文件可由系统直接执行？<br>UPX 将程序压缩，并在头部加入解压的程序，具体的原理可以参看参考[2]。<br>在 Linux 系统中可以使用 <code>strings</code> 命令查看可执行文件的内容，通过查看 <code>UPX</code> 压缩后的程序可以看到，<code>UPX</code> 在文件中写入了自己的特征码。</p><h4 id="设置全局可用"><a href="#设置全局可用" class="headerlink" title="设置全局可用"></a>设置全局可用</h4><p>为了方便使用移动 upx 到系统变量目录，如果不愿意使用 root 的话可以将 upx 目录添加到环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp upx*/upx /usr/bin</span><br></pre></td></tr></table></figure><p>然后就可以使用了</p><h3 id="gunzip-和-unzip-解压文件到指定的目录"><a href="#gunzip-和-unzip-解压文件到指定的目录" class="headerlink" title="gunzip 和 unzip 解压文件到指定的目录"></a>gunzip 和 unzip 解压文件到指定的目录</h3><h4 id="gzip-命令："><a href="#gzip-命令：" class="headerlink" title="gzip 命令："></a>gzip 命令：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gzip test.txt </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">它会将文件压缩为文件 `test.txt.gz`，原来的文件则没有了，解压缩也一样</span> </span><br><span class="line">gunzip test.txt.gz </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">它会将文件解压缩为文件 test.txt，原来的文件则没有了，为了保留原有的文件，我们可以加上 -c 选项并利用 linux 的重定向</span> </span><br><span class="line">gzip -c test.txt &gt; /root/test.gz </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这样不但可以将原有的文件保留，而且可以将压缩包放到任何目录中，解压缩也一样</span> </span><br><span class="line">gunzip -c /root/test.gz &gt; ./test.txt </span><br></pre></td></tr></table></figure><h4 id="zip-命令："><a href="#zip-命令：" class="headerlink" title="zip 命令："></a>zip 命令：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zip test.zip test.txt </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">它会将 test.txt 文件压缩为 test.zip ，当然也可以指定压缩包的目录，例如 /root/test.zip</span> </span><br><span class="line">unzip test.zip </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">它会默认将文件解压到当前目录，如果要解压到指定目录，可以加上 -d 选项</span> </span><br><span class="line">unzip test.zip -d /root/</span><br></pre></td></tr></table></figure><h3 id="如何解压缩-tar-xz-文件"><a href="#如何解压缩-tar-xz-文件" class="headerlink" title="如何解压缩 tar.xz 文件"></a>如何解压缩 tar.xz 文件</h3><p>下面的例子显示了如何将压缩包内容，解压到文件夹<code>/home/linuxize/files</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xf archive.tar.xz -C /home/linuxize/files</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> upx </tag>
            
            <tag> unzip </tag>
            
            <tag> tar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docusaurus部署并推送到Github</title>
      <link href="/post/docusaurus.html"/>
      <url>/post/docusaurus.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>搭建本地的项目</p><ul><li><p><a href="https://www.docusaurus.cn/docs/installation">docusaurus官网脚手架</a></p></li><li><p>脚手架的设计真的很良心，像react脚手架一样安装启动，<code>my-website</code>就是项目的名字，<code>classic</code>是<code>docusaurus</code>的默认主题，官网中也有其他的可以下载插件<a href="https://www.docusaurus.cn/docs/configuration#%E4%B8%BB%E9%A2%98%E3%80%81%E6%8F%92%E4%BB%B6%E5%92%8C%E9%A2%84%E8%AE%BE%E9%85%8D%E7%BD%AE">配置主题</a></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx @docusaurus/init@latest init my-website classic</span><br></pre></td></tr></table></figure><ul><li>安装完成之后根据提示</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd my-website</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure><ul><li>这个时候已经可以在<code>localhost:3000</code>，看到项目的主页了</li></ul><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><ul><li><p>配置文件是<a href="https://github.com/yingwinwin/yingwinwin.github.io/blob/master/docusaurus.config.js"><code>docusaurus.config.js</code></a>，在里面修改一些主页的展示，这里的部分自己改一改都知道是什么意思了。我在这个文件中写了注释可以参考一下。</p></li><li><p>侧边栏的配置文件<a href="https://github.com/yingwinwin/yingwinwin.github.io/blob/master/sidebars.js"><code>sidebars.js</code></a>，可以参考，也可以看官方文档。</p></li><li><p>修改好自己的配置之后，就可以尝试部署了。</p></li></ul><h3 id="站点信息"><a href="#站点信息" class="headerlink" title="站点信息"></a>站点信息</h3><p>站点信息的部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  title: &#x27;My Site&#x27;,</span><br><span class="line">  tagline: &#x27;The tagline of my site&#x27;,</span><br><span class="line">  url: &#x27;https://your-docusaurus-test-site.com&#x27;,</span><br><span class="line">  baseUrl: &#x27;/&#x27;,</span><br><span class="line">  favicon: &#x27;img/favicon.ico&#x27;,</span><br><span class="line">  organizationName: &#x27;facebook&#x27;,</span><br><span class="line">  projectName: &#x27;docusaurus&#x27;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>下面是配置项说明：</p><ul><li><code>title</code>：站点标题，显示在浏览器标签页。</li><li><code>tagline</code>：网站简介，显示在 <code>meta</code> 标签，可以给搜索结果提供摘要。</li><li><code>url</code>：网站域名，用于生成 sitemap 文件。</li><li><code>baseUrl</code>：资源文件的路劲。</li><li><code>favicon</code>：站点图标的位置，站点图标会显示在标签页标题的前面。</li><li><code>organizationName</code>：公司或组织名称。</li><li><code>projectName</code>：项目名称。</li></ul><h3 id="页头配置"><a href="#页头配置" class="headerlink" title="页头配置"></a>页头配置</h3><p>还是在 <code>docusaurus.config.js</code> 中的 <code>module.exports</code> 对象中配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  themeConfig: &#123;</span><br><span class="line">    navbar: &#123;</span><br><span class="line">      title: &#x27;My Site&#x27;,</span><br><span class="line">      logo: &#123;</span><br><span class="line">        alt: &#x27;My Site Logo&#x27;,</span><br><span class="line">        src: &#x27;img/logo.svg&#x27;,</span><br><span class="line">      &#125;,</span><br><span class="line">      links: [</span><br><span class="line">        &#123;</span><br><span class="line">          to: &#x27;docs/install/&#x27;,</span><br><span class="line">          activeBasePath: &#x27;docs/&#x27;,</span><br><span class="line">          label: &#x27;Docs&#x27;,</span><br><span class="line">          position: &#x27;left&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; to: &#x27;blog&#x27;, label: &#x27;Blog&#x27;, position: &#x27;left&#x27; &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          href: &#x27;https://github.com/facebook/docusaurus&#x27;,</span><br><span class="line">          label: &#x27;GitHub&#x27;,</span><br><span class="line">          position: &#x27;right&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>navbar</code> 中的内容就是页头配置，下面是一些配置项说明：</p><ul><li><code>title</code>：页头的标题。</li><li><code>logo.alt</code>：页头 Logo 的描述，相当于 <code>img</code> 的 <code>alt</code>。</li><li><code>logo.src</code>：页头 Logo 的图片地址。</li></ul><p><code>links</code>中的内容是页头导航链接配置，下面是配置项说明：</p><ul><li><code>to</code>：路由链接的跳转地址，地址就是 <code>docs</code> 目录中的文件名，不需要加 <code>md</code>。</li><li><code>activeBasePath</code>：设置要处于选中状态的路劲，如果设置为 <code>docs</code>，只要访问 <code>docs</code> 目录中的页面，设置了 <code>docs</code> 的链接样式就是选中状态。</li><li><code>label</code>：链接标签中的文字内容。</li><li><code>position</code>：链接定位，<code>left</code> 居左，<code>right</code> 居右。</li><li><code>href</code>：链接跳转地址，相当于 <code>a</code> 的 <code>href</code>，一般用于外部链接跳转。</li></ul><p><code>href</code> 设置的地址是不能无刷新跳转的，只有 <code>to</code> 才能无刷新跳转，但是 <code>to</code> 只能设置内容链接，而且需要使用相对路劲。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  themeConfig: &#123;</span><br><span class="line">    footer: &#123;</span><br><span class="line">      style: &#x27;dark&#x27;,</span><br><span class="line">      links: [</span><br><span class="line">        &#123;</span><br><span class="line">          title: &#x27;Docs&#x27;,</span><br><span class="line">          items: [</span><br><span class="line">            &#123;</span><br><span class="line">              label: &#x27;Style Guide&#x27;,</span><br><span class="line">              to: &#x27;docs/&#x27;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              label: &#x27;Second Doc&#x27;,</span><br><span class="line">              to: &#x27;docs/install/&#x27;,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      copyright: `Copyright © $&#123;new Date().getFullYear()&#125; My Project, Inc. Built with Docusaurus.`,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>footer</code> 和 上面的 <code>navbar</code> 一样都是写在 <code>themeConfig</code> 中。</p><p><code>links</code> 中的数组是链接组，一个链接组中可以包含多个链接。链接的属性还是和页头的链接属性是一样的，只是没有 <code>position</code>。</p><p><code>copyright</code> 是页脚的版权信息。</p><h3 id="首页配置"><a href="#首页配置" class="headerlink" title="首页配置"></a>首页配置</h3><p>在项目目录中有一个 <code>src</code> 目录，<code>src</code> 目录中又有一个 <code>pages</code> 目录，<code>pages</code> 目录中的 <code>index.js</code> 就是首页文件。</p><p>在 <code>index.js</code>中有一个 <code>features</code> 数组，数组中的内容就是首页的项目描述。</p><p><code>features</code>数组内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">const features = [</span><br><span class="line">  &#123;</span><br><span class="line">    title: &lt;&gt;Easy to Use&lt;/&gt;,</span><br><span class="line">    imageUrl: &#x27;img/undraw_docusaurus_mountain.svg&#x27;,</span><br><span class="line">    description: (</span><br><span class="line">      &lt;&gt;</span><br><span class="line">        Docusaurus was designed from the ground up to be easily installed and</span><br><span class="line">        used to get your website up and running quickly.</span><br><span class="line">      &lt;/&gt;</span><br><span class="line">    ),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &lt;&gt;Focus on What Matters&lt;/&gt;,</span><br><span class="line">    imageUrl: &#x27;img/undraw_docusaurus_tree.svg&#x27;,</span><br><span class="line">    description: (</span><br><span class="line">      &lt;&gt;</span><br><span class="line">        Docusaurus lets you focus on your docs, and we&amp;apos;ll do the chores. Go</span><br><span class="line">        ahead and move your docs into the &lt;code&gt;docs&lt;/code&gt; directory.</span><br><span class="line">      &lt;/&gt;</span><br><span class="line">    ),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &lt;&gt;Powered by React&lt;/&gt;,</span><br><span class="line">    imageUrl: &#x27;img/undraw_docusaurus_react.svg&#x27;,</span><br><span class="line">    description: (</span><br><span class="line">      &lt;&gt;</span><br><span class="line">        Extend or customize your website layout by reusing React. Docusaurus can</span><br><span class="line">        be extended while reusing the same header and footer.</span><br><span class="line">      &lt;/&gt;</span><br><span class="line">    ),</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>要更改元素结构或属性可以在 <code>index.js</code> 中的 <code>Feature</code> 函数中更改。</p><h2 id="撰写博客"><a href="#撰写博客" class="headerlink" title="撰写博客"></a>撰写博客</h2><p>博客的 Markdown 文件存放在项目目录下的 <code>blog</code> 目录中。</p><p>博客的 Markdown 文件开头也需要填写文章信息，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">id: vscode</span><br><span class="line">title: VSCode 远程开发配置</span><br><span class="line">author: Mr. Ma</span><br><span class="line">author_title: 程序员</span><br><span class="line">author_url: https://github.com/wgao19</span><br><span class="line">author_image_url: https://www.misterma.com/img/avatar.jpg</span><br><span class="line">tags: [VScode, 远程开发]</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>下面是文章信息说明：</p><ul><li><code>id</code>：文章 ID，用于自定义 URL 地址。</li><li><code>title</code>：文章标题。</li><li><code>author</code>：作者。</li><li><code>author_title</code>：作者描述。</li><li><code>author_url</code>：作者个人主页的 URL。</li><li><code>author_image_url</code>：作者的头像图片 URL。</li><li><code>tags</code>：文章标签，格式类似于数组。</li></ul><p>以上就是 Docusaurus 的简单使用和配置，我这里只是写了一部分 Docusaurus 的配置，如果需要查看更详细的配置和说明可以访问 <a href="https://v2.docusaurus.io/%E3%80%82">https://v2.docusaurus.io/。</a></p><h2 id="推送项目"><a href="#推送项目" class="headerlink" title="推送项目"></a>推送项目</h2><ol><li>在 github 新建一个仓库</li><li>在项目的根目录下新建一个<code>deploy.sh</code>脚本文件，注意修改对应的用户名和仓库名：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env sh</span><br><span class="line"></span><br><span class="line"># 确保脚本抛出遇到的错误</span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line"># 生成静态文件</span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line"># 进入生成的文件夹</span><br><span class="line">cd build</span><br><span class="line"></span><br><span class="line"># 如果是发布到自定义域名</span><br><span class="line"># echo &#x27;www.example.com&#x27; &gt; CNAME</span><br><span class="line"></span><br><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m &#x27;deploy&#x27;</span><br><span class="line"></span><br><span class="line"># 如果发布到 https://&lt;USERNAME&gt;.github.io</span><br><span class="line"># git push -f git@github.com:messiahhh/messiahhh.github.io.git master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 如果发布到 https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;</span><br><span class="line"># git push -f git@github.com:messiahhh/blog.git master:gh-pages</span><br><span class="line">git push -f https://$&#123;access_token&#125;@github.com/Dcose/dcose.github.io.git master:gh-pages</span><br><span class="line"></span><br><span class="line">cd -</span><br></pre></td></tr></table></figure><ol start="3"><li>切换到项目的根目录，运行<code>deploy.sh</code>脚本文件。</li><li>注意：执行文件会启动 Git Bash，等待执行完成就好。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docusaurus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将本地文件推送到GitHub上</title>
      <link href="/post/GitHub-pull.html"/>
      <url>/post/GitHub-pull.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在安装和配置好 Git Bash 后，将文件或者修改后的文件推送到 GitHub上，分为以下几种情况：</p><h2 id="一、本地不存在该仓库，而-GitHub-上已有该仓库"><a href="#一、本地不存在该仓库，而-GitHub-上已有该仓库" class="headerlink" title="一、本地不存在该仓库，而 GitHub 上已有该仓库"></a>一、本地不存在该仓库，而 GitHub 上已有该仓库</h2><p><strong>1、先在本地创建一个空的文件夹（如 Test ），用来放从 GitHub 上克隆下来的 repository。</strong></p><p>【注】：将相应的项目克隆到本地，由于要克隆的项目已经自带有 .git 目录，所以无需进行 git init 来初始化。若是在本地新建的仓库项目，则需要 git init 进行初始化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir Test            # 为将要进行Git管理的项目建立新的文件夹</span><br><span class="line">cd Test               # 进入新建的文件夹</span><br></pre></td></tr></table></figure><p><strong>2、再将 GitHub 上的项目 repository 克隆到本地</strong></p><p>默认克隆 main 分支内容，执行 git clone 命令后我们会默认处于 main 分支下，同时系统会自动将 origin 设置成该远程仓库的标识符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/username/hello-world.git   #将 GitHub 上的对应仓库克隆到本地</span><br></pre></td></tr></table></figure><p><strong>3、克隆到本地之后便可以在本地进行编辑修改，再推送到 GitHub 上即可。在本地编辑、查看与推送操作如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cd hello-world                  #进入到在GitHub上所创建的repository中，（已经拷贝到本地的）</span><br><span class="line">touch README.md                 #创建README.md文件</span><br><span class="line">vim README.md                   #编辑README.md文件</span><br><span class="line">git status                      #查看仓库的状态，显示有无改动及添加新的内容，以便将其提交</span><br><span class="line">git add README.md               #将README.md中修改的内容添加到暂存区</span><br><span class="line">git commit -m &quot;add README&quot;      #将暂存区中的README.md文件进行提交保存，并添加注释（引号中的内容）</span><br><span class="line">git log                         # 查看提交日志</span><br><span class="line"></span><br><span class="line">git push                        #将本地仓库的更新，推送到GitHub上。使GitHub上的内容更新。</span><br><span class="line">                   #因为该仓库是从GitHub上克隆下来的，所以默认已经建立上下游的联系，无需再将重复将其添加到上游的远端</span><br></pre></td></tr></table></figure><h2 id="二、本地已经存在该仓库，而-GitHub-上没有"><a href="#二、本地已经存在该仓库，而-GitHub-上没有" class="headerlink" title="二、本地已经存在该仓库，而 GitHub 上没有"></a>二、本地已经存在该仓库，而 GitHub 上没有</h2><p>1、首次将本地的仓库推送到远程（GitHub）仓库时。首先在 GitHub 上建立一个仓库，并将其设置为本地仓库的远程仓库。为了使 GitHub 上新建的仓库与其他仓库不混淆，<strong>使其与本地仓库有同样的名称</strong>。同时如果本地已经存在 README.md 文件时，<code>Initialize this repository with a README</code> 选项就不要勾选，以免与本地的 README.md 相冲突；如果本地仓库中没有 README.md 文件时，此时可以勾选该项。如下图</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/01/2_17_24_55_202301021724026.png" alt="img"></p><p><strong>2、进入到本地仓库中，并用 <code>git init</code> 来对本地的仓库进行初始化</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd  Test          #进入到本地需要管理的项目目录中</span><br><span class="line">git init          #初始化需要管理的目录，使其能够被 Git 进行管理</span><br></pre></td></tr></table></figure><p><strong>3、使用 <code>git remote add</code> 命令，来设置本地的远程仓库</strong></p><p>执行git remote add命令之后，Git 会自动将 <a href="https://github.com/username/git-tutorial.git">https://github.com/username/git-tutorial.git</a> 远程仓库的名称设置为origin（标识符）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/username/git-tutorial.git  #将其设置成本地的远程仓库</span><br></pre></td></tr></table></figure><p><strong>4、将所有改动的内容提交到暂存区并保存</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .                        #把工作时的所有变化提交到暂存区，不包括删除的文件</span><br><span class="line">git commit -m &quot;Initial commit&quot;   #保存变化，并添加注释</span><br></pre></td></tr></table></figure><p>【注】：本地仓库的内容推送到远程仓库之前，必须要将本地仓库中的内容提交到相应的分支中，否则该分支的内容将不会被推送到远程仓库中，而只是在远程仓库中建立了相应的分支而已。</p><p><strong>5、将当前分支下本地仓库中的内容推送至远程仓库中。分为两种情况：main 分支、其它子分支</strong></p><p>（1）、将 main 分支的本地仓库内容推送到远程仓库中(此时该远程仓库中还没有 main 分支，只是一个空仓库)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout master            #如果当前分支不是master，则首先切换到 master分支下。</span><br><span class="line"></span><br><span class="line">git push -u origin master      #将本地仓库的master分支，推送到远程仓库的master分支中</span><br><span class="line">                              #（注：只用于首次推送时将远端master设置为当前仓库的上游，以后再推送直接 git push即可）</span><br></pre></td></tr></table></figure><p>【注】：执行以上操作后，当前分支的内容就会被推送给远程仓库 origin 的 master 分支。-u 参数可以在推送的同时，将 origin 仓库的master 分支设置为本地仓库当前分支的 upstream（上游）。添加了这个参数，将来运行<strong>git pull</strong>命令从远程仓库获取内容时，本地仓库的这个分支就可以直接从 origin 的master 分支获取内容，省去了另外添加参数的麻烦。若没有 -u 这个参数，则在后面的 <strong>git pull</strong> 时，就需要指明拉取的是那一条分支，如：git pull origin f03 ,表示拉取的是远程的 f03 分支：origin&#x2F;f03</p><p>（2）、将本地的其它子分支推送至 main 以外的分支，如将本地的 feature-D 分支以同名的形式推送至远程仓库（此时远程仓库中并没有 feature-D 分支）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature-D        #在本地新建feature-D分支，并切换到该分支下</span><br><span class="line">git push -u origin feature-D     #将feature-D推送至GitHub上,并保持该分支名称不变</span><br></pre></td></tr></table></figure><h2 id="三、在本地和-GitHub-上都已经存在该仓库"><a href="#三、在本地和-GitHub-上都已经存在该仓库" class="headerlink" title="三、在本地和 GitHub 上都已经存在该仓库"></a>三、在本地和 GitHub 上都已经存在该仓库</h2><p>1、在本地和远程的 GitHub 上都已经存在该仓库，则在本地和 GitHub 上都不需要再重新创建该仓库了。只需要先将本地和远程的仓库之间创建联系。将本地 GitHub 上的该远程仓库设置为本地仓库的远程端。</p><p>2、具体操作如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd  Test</span><br><span class="line">git remote add origin https://github.com/username/git-tutorial.git</span><br><span class="line">git push -u origin --all</span><br></pre></td></tr></table></figure><h2 id="四、更新本地及远程仓库的分支"><a href="#四、更新本地及远程仓库的分支" class="headerlink" title="四、更新本地及远程仓库的分支"></a>四、更新本地及远程仓库的分支</h2><p>【注】：此时本地和远程上都已经有该仓库，只是其中有一个不是最新的</p><p>在多人同时开发，当本地仓库中的某一分支没有与远程仓库的该分支保持最新时，需要用 <code>git pull</code> 来获取最新的远程仓库分支。在本地进行修改之后可以用 <code>git push</code> 推送到 GitHub 上。</p><p>获取最新的远程仓库分支。远程仓库的 feature-D 分支是最新的状态，将本地的 feature-D 分支更新到这个最新的状态,此时 pull 后面要加上拉取分支的名称，来明确指定拉取哪个分支。</p><p>在本地仓库修改之后提交到远程仓库中，会根据使用的工具不同有不同的处理方式。在此主要考虑两个同步方式：(1) GitBash 命令行的方式， (2) TortoiseGit 图形界面的方式。这两种方式的主要区别在于提交命令 git commit 前的操作。</p><p>(1) 使用 GitBash 命令行时，本地的修改在 <code>git commit</code> 前必须要先将所有的改动 <code>git add</code> 到追踪中去，否则后续提交的将无法同步到远端</p><p>(2) 使用 TortoiseGit 图形界面时，只需要在首次增加新文件时需要 <code>git add</code> 命令来添加到版本追踪去，若后续再出现改动，直接 <code>git commit</code> 提交即可，无需再添加到版本控制中。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自建Proxy来反代Telegram Bot API</title>
      <link href="/post/Telegram-Bot-API.html"/>
      <url>/post/Telegram-Bot-API.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>前提：</p><ol><li>有一台可以科学上网的服务器&#x2F;vps&#x2F;小鸡&#x2F;软路由</li><li>Nginx+PHP环境</li></ol><p>Demo：</p><ul><li><a href="https://tg.w2aa.ga/">传送门</a></li></ul><p>Github：</p><ul><li><a href="https://github.com/xiaowansm5/Telegram-bot-api-php-proxy">传送门</a></li></ul><p>教程：</p><p>话不多说，开搞，此处以宝塔面板为例</p><ul><li>新建一个站点，并将你的域名解析到此站点，PHP版本我个人设置的为7.4，Github中提示PHP版本要求≥5.6即可，将Github中的index.php和tgproxy.php放入站点目录中，如图所示，具体步骤不再详细阐述。</li></ul><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/12/30_14_1_20_202212301401481.png" alt="image-20221230120821451"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/12/30_14_1_17_202212301401184.png" alt="image-20221230120922787"></p><p><img src="C:\Users\wang\AppData\Roaming\Typora\typora-user-images\image-20221230120939580.png" alt="image-20221230120939580"></p><ul><li><p>设置站点ssl，并开启强制https</p></li><li><p>设置伪静态规则</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite ^/bot.*$ /tgproxy.php last;</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/12/30_14_1_19_202212301401049.png" alt="image-20221230121118722"></p><ul><li>大功告成，此时访问你刚才所添加的站点的域名，即可</li></ul><p>调用方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://tg-bot.0x23.cf/botxxxxxxx:xxxxxxxxxxxxxxx/sendMessage?chat_id=xxxxxx&amp;text=xxxxx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Telegram </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo史上最全搭建教程</title>
      <link href="/post/hexo.html"/>
      <url>/post/hexo.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在市面上的博客很多，如CSDN，博客园，简书等平台，可以直接在上面发表，用户交互做的好，写的文章百度也能搜索的到。缺点是比较不自由，会受到平台的各种限制和恶心的广告。</p><p>而自己购买域名和服务器，搭建博客的成本实在是太高了，不光是说这些购买成本，单单是花力气去自己搭这么一个网站，还要定期的维护它，对于我们大多数人来说，实在是没有这样的精力和时间。</p><p>在众多博客软件中,选择是一个重要因素,决定了易用性美观度等问题。那么就有第三种选择，利用hexo生成网页并直接在github page平台上托管我们的博客。这样就可以安心的来写作，又不需要定期维护，而且hexo作为一个快速简洁的博客框架，用它来搭建博客真的非常容易。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li>第一部分：hexo的初级搭建还有部署到github page上，以及个人域名的绑定。</li><li>第二部分：hexo的基本配置，更换主题，实现多终端工作，以及在coding page部署实现国内外分流</li><li>第三部分：hexo添加各种功能，包括搜索的SEO，阅读量统计，访问量统计和评论系统等。</li></ol><h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><p>hexo的初级搭建还有部署到github page上，以及个人域名的绑定。</p><h3 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h3><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><h3 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h3><ol><li>安装Git</li><li>安装Node.js</li><li>安装Hexo</li><li>GitHub创建个人仓库</li><li>生成SSH添加到GitHub</li><li>将hexo部署到GitHub</li><li>设置个人域名</li><li>发布文章</li></ol><h3 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h3><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，我觉得建议每个人都去了解一下</p><p>windows：到git官网上下载,Download git,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p><p>linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>安装好后，用git –version 来查看一下版本</p><h3 id="2-安装nodejs"><a href="#2-安装nodejs" class="headerlink" title="2. 安装nodejs"></a>2. 安装nodejs</h3><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。</p><p>windows：nodejs选择LTS版本就行了。</p><p>linux：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure><p>安装完后，打开命令行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>检查一下有没有安装成功</p><p>顺便说一下，windows在git安装完后，就可以直接使用git bash来敲命令行了，不用自带的cmd，cmd有点难用。</p><p>win7的用户可以使用历史版本12.18.4</p><h3 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. 安装hexo</h3><p>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</p><p>输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>依旧用hexo -v查看一下版本</p><p>至此就全部安装完了。</p><p>接下来初始化一下hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init myblog</span><br></pre></td></tr></table></figure><p>这个myblog可以自己取什么名字都行，然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd myblog //进入这个myblog文件夹</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹目录下有：</p><p>node_modules: 依赖包<br>public：存放生成的页面<br>scaffolds：生成文章的一些模板<br>source：用来存放你的文章<br>themes：主题<br>_config.yml: 博客的配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。</p><p>大概长这样：</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/26_10_33_48_202211261033716.jpeg"></p><p>使用ctrl+c可以把服务关掉。</p><h3 id="4-GitHub创建个人仓库"><a href="#4-GitHub创建个人仓库" class="headerlink" title="4. GitHub创建个人仓库"></a>4. GitHub创建个人仓库</h3><p>首先，你先要有一个GitHub账户，去注册一个吧。</p><p>注册完登录后，在GitHub.com中看到一个New repository，新建仓库</p><p>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。</p><p>点击create repository。</p><h3 id="5-生成SSH添加到GitHub"><a href="#5-生成SSH添加到GitHub" class="headerlink" title="5. 生成SSH添加到GitHub"></a>5. 生成SSH添加到GitHub</h3><p>回到你的git bash中，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p><p>可以用以下两条，检查一下你有没有输对</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>然后创建SSH,一路回车</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p><p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key<br>把你的id_rsa.pub里面的信息复制进去。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/26_10_33_51_202211261033967.jpeg"></p><p>在gitbash中，查看是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h3 id="6-将hexo部署到GitHub"><a href="#6-将hexo部署到GitHub" class="headerlink" title="6. 将hexo部署到GitHub"></a>6. 将hexo部署到GitHub</h3><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>其中 hexo clean清除了你之前生成的东西，也可以不加。<br>hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写<br>hexo deploy 部署文章，可以用hexo d缩写</p><p>注意deploy时可能要你输入username和password。</p><p>得到下图就说明部署成功了，过一会儿就可以在<a href="http://yourname.github.io/">http://yourname.github.io</a> 这个网站看到你的博客了！！</p><h3 id="7-设置个人域名"><a href="#7-设置个人域名" class="headerlink" title="7. 设置个人域名"></a>7. 设置个人域名</h3><p>现在你的个人网站的地址是 yourname.github.io，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。</p><p>注册一个阿里云账户,在阿里云上买一个域名，我买的是 qystu.cc，各个后缀的价格不太一样，比如最广泛的.com就比较贵，看个人喜好咯。</p><p>你需要先去进行实名认证,然后在域名控制台中，看到你购买的域名。</p><p>点解析进去，添加解析。</p><p>其中，根据github docs 说明</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/26_10_34_0_202211261034071.png" alt="image-20210704115658742"></p><p>应添加A记录的4个IP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">185.199.108.153</span><br><span class="line">185.199.109.153</span><br><span class="line">185.199.110.153</span><br><span class="line">185.199.111.153</span><br></pre></td></tr></table></figure><p>注意，解析线路选择默认，不要像我一样选境外。这个境外是后面来做国内外分流用的,在后面的博客中会讲到。记得现在选择默认！！</p><p>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入我的域名qystu.cc</p><p>然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。</p><p>最后，在git bash中，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p><p>接下来你就可以正式开始写文章了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new newpapername</span><br></pre></td></tr></table></figure><p>然后在source&#x2F;_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>就可以看到更新了。</p><h2 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h2><p>hexo的基本配置，更换主题，实现多终端工作，以及在coding page部署实现国内外分流。</p><h3 id="1-hexo基本配置"><a href="#1-hexo基本配置" class="headerlink" title="1. hexo基本配置"></a>1. hexo基本配置</h3><p>在文件根目录下的_config.yml，就是整个hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的配置描述。</p><h4 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>网站标题</td></tr><tr><td>subtitle</td><td>网站副标题</td></tr><tr><td>description</td><td>网站描述</td></tr><tr><td>author</td><td>您的名字,作者</td></tr><tr><td>language</td><td>网站使用的语言,不是编程语言</td></tr><tr><td>timezone</td><td>网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America&#x2F;New_York, Japan, 和 UTC 。</td></tr></tbody></table><h4 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>url</td><td>网址</td></tr><tr><td>root</td><td>网站根目录</td></tr><tr><td>permalink</td><td>文章的永久链接格式</td></tr><tr><td>permalink_defaults</td><td>永久链接中各部分的默认值</td></tr></tbody></table><p>在这里，你需要把url改成你的网站域名。</p><p>permalink，也就是你生成某个文章时的那个链接格式。</p><p>比如我新建一个文章叫temp.md，那么这个时候他自动生成的地址就是<a href="http://yoursite.com/2018/09/05/temp%E3%80%82">http://yoursite.com/2018/09/05/temp。</a></p><p>以下是官方给出的示例，关于链接的变量还有很多，需要的可以去官网上查找 永久链接 。</p><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td>:year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</td><td>2013&#x2F;07&#x2F;14&#x2F;hello-world</td></tr><tr><td>:year-:month-:day-:title.html</td><td>2013-07-14-hello-world.html</td></tr><tr><td>:category&#x2F;:title</td><td>foo&#x2F;bar&#x2F;hello-world</td></tr></tbody></table><p>Hexo默认的静态URL格式是 <code>:year/:month/:day/:title</code>，也就是按照年、月、日、标题来生成固定链接的。如<code>http://xxx.yy.com/2020/07/06/hello-world</code></p><p>这种默认配置的缺点就是一般文件名是中文，导致url链接里有中文出现，这会造成很多问题，也不利于seo，另外就是年月日都会有分隔符</p><p>百度蜘蛛抓取网页的规则: 对于蜘蛛说网页权重越高、信用度越高抓取越频繁，例如网站的首页和内页。蜘蛛先抓取网站的首页，因为首页权重更高，并且大部分的链接都是指向首页。然后通过首页抓取网站的内页，并不是所有内页蜘蛛都会去抓取。</p><p>搜索引擎认为对于一般的中小型站点，3层足够承受所有的内容了，所以蜘蛛经常抓取的内容是前三层，而超过三层的内容蜘蛛认为那些内容并不重要，所以不经常爬取。出于这个原因所以permalink后面跟着的最好不要超过2个斜杠</p><p>使用 hexo-abbrlink 插件可以完美解决，具体使用方法如下：</p><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>再往下翻，中间这些都默认就好了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">theme: landscape</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt;</span><br><span class="line">  branch: [branch]</span><br></pre></td></tr></table></figure><p>theme就是选择什么主题，也就是在theme这个文件夹下，在官网上有很多个主题，默认给你安装的是lanscape这个主题。当你需要更换主题时，在官网上下载，把主题的文件放在theme文件夹下，再修改这个参数就可以了。</p><p>接下来这个deploy就是网站的部署的，repo就是仓库(Repository)的简写。branch选择仓库的哪个分支。这个在之前进行github page部署的时候已经修改过了，不再赘述。而这个在后面进行双平台部署的时候会再次用到。</p><h4 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h4><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">date: 2013/7/13 20:46:25</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>layout</td><td>布局</td></tr><tr><td>title</td><td>标题</td></tr><tr><td>date</td><td>建立日期</td></tr><tr><td>updated</td><td>更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td></tr><tr><td>tags</td><td>标签(不适用于分页)</td></tr><tr><td>categories</td><td>分类(不适用于分页)</td></tr><tr><td>permalink</td><td>覆盖文章网址</td></tr></tbody></table><p>其中，分类和标签需要区别一下，分类具有顺序性和层次性，也就是说 Foo, Bar 不等于 Bar, Foo；而标签没有顺序和层次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">- Diary</span><br><span class="line">tags:</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br></pre></td></tr></table></figure><h4 id="layout（布局）"><a href="#layout（布局）" class="headerlink" title="layout（布局）"></a>layout（布局）</h4><p>当你每一次使用代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new paper</span><br></pre></td></tr></table></figure><p>它其实默认使用的是post这个布局，也就是在source文件夹下的_post里面。</p><p>Hexo 有三种默认布局：post、page 和 draft，它们分别对应不同的路径，而您自定义的其他布局和 post 相同，都将储存到 source&#x2F;_posts 文件夹。</p><table><thead><tr><th>布局</th><th>路径</th></tr></thead><tbody><tr><td>post</td><td>source&#x2F;_posts</td></tr><tr><td>page</td><td>source</td></tr><tr><td>draft</td><td>source&#x2F;_drafts</td></tr><tr><td>而new这个命令其实是：</td><td></td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>只不过这个layout默认是post罢了。</p><h4 id="page"><a href="#page" class="headerlink" title="page"></a>page</h4><p>如果你想另起一页，那么可以使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page board</span><br></pre></td></tr></table></figure><p>系统会自动给你在source文件夹下创建一个board文件夹，以及board文件夹中的index.md，这样你访问的board对应的链接就是<a href="http://xxx.xxx/board">http://xxx.xxx/board</a></p><h4 id="draft"><a href="#draft" class="headerlink" title="draft"></a>draft</h4><p>draft是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft newpage</span><br></pre></td></tr></table></figure><p>这样会在source&#x2F;_draft中新建一个newpage.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server --draft</span><br></pre></td></tr></table></figure><p>在本地端口中开启服务预览。</p><p>如果你的草稿文件写完了，想要发表到post中，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish draft newpage</span><br></pre></td></tr></table></figure><p>就会自动把newpage.md发送到post中。</p><h3 id="2-更换主题"><a href="#2-更换主题" class="headerlink" title="2. 更换主题"></a>2. 更换主题</h3><p>到这一步，如果你觉得默认的landscape主题不好看，那么可以在官网的主题中，选择你喜欢的一个主题进行修改就可以啦。点这里</p><p>这里有200多个主题可以选。不过最受欢迎的就是那么几个，比如NexT主题，非常的简洁好看，大多数人都选择这个，关于这个的教程也比较多。不过我选择的是volantis</p><p>不管怎么样，至少是符合我个人的审美。</p><p>直接在github链接上下载下来，然后放到theme文件夹下就行了，然后再在刚才说的配置文件中把theme换成那个主题文件夹的名字，它就会自动在theme文件夹中搜索你配置的主题。</p><p>而后进入volantis这个文件夹，可以看到里面也有一个配置文件_config.xml</p><h4 id="menu（菜单栏）"><a href="#menu（菜单栏）" class="headerlink" title="menu（菜单栏）"></a>menu（菜单栏）</h4><p>也就是上面菜单栏上的这些东西。</p><p>其中，About这个你是找不到网页的，因为你的文章中没有about这个东西。如果你想要的话，可以执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><p>它就会在根目录下source文件夹中新建了一个about文件夹，以及index.md，在index.md中写上你想要写的东西，就可以在网站上展示出来了。</p><h4 id="customize-定制"><a href="#customize-定制" class="headerlink" title="customize(定制)"></a>customize(定制)</h4><p>在这里可以修改你的个人logo，默认是那个hueman，在source&#x2F;css&#x2F;images文件夹中放入自己要的logo，再改一下url的链接名字就可以了。</p><p>favicon是网站中出现的那个小图标的icon，找一张你喜欢的logo，然后转换成ico格式，放在images文件夹下，配置一下路径就行。</p><p>social_links ，可以显示你的社交链接，而且是有logo的。</p><p>tips:</p><p>在这里可以添加一个rss功能，也就是那个符号像wifi一样的东西。</p><h4 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h4><ol><li>什么是RSS？</li></ol><p>RSS也就是订阅功能，你可以理解为类似与订阅公众号的功能，来订阅各种博客，杂志等等。</p><ol><li>为什么要用RSS？</li></ol><p>就如同订阅公众号一样，你对某个公众号感兴趣，你总不可能一直时不时搜索这个公众号来看它的文章吧。博客也是一样，如果你喜欢某个博主，或者某个平台的内容，你可以通过RSS订阅它们，然后在RSS阅读器上可以实时推送这些消息。现在网上的垃圾消息太多了，如果你每一天都在看这些消息中度过，漫无目的的浏览，只会让你的时间一点一点的流逝，太不值得了。如果你关注的博主每次都发的消息都是精华，而且不是每一天十几条几十条的轰炸你，那么这个博主就值得你的关注，你就可以通过RSS订阅他。</p><p>在我的理解中，如果你不想每天都被那些没有质量的消息轰炸，只想安安静静的关注几个博主，每天看一些有质量的内容也不用太多，那么RSS订阅值得你的拥有。</p><ol><li>添加RSS功能</li></ol><p>先安装RSS插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-generator-feed</span><br></pre></td></tr></table></figure><p>而后在你整个项目的_config.yml中找到Extensions，添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">#RSS订阅</span><br><span class="line">plugin:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line">#Feed Atom</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br></pre></td></tr></table></figure><p>这个时候你的RSS链接就是 域名&#x2F;atom.xml了。</p><p>所以，在主题配置文件中的这个social links，开启RSS的页面功能，这样你网站上就有那个像wifi一样符号的RSS logo了，注意空格。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure><ol><li>如何关注RSS？</li></ol><p>首先，你需要一个RSS阅读器，在这里我推荐inoreader，宇宙第一RSS阅读器，而且中文支持的挺好。不过它没有PC端的程序，只有网页版，chrome上有插件。在官网上用google账号或者自己注册账号登录，就可以开始你的关注之旅了。</p><p>每次需要关注某个博主时，就点开他的RSS链接，把链接复制到inoreader上，就能关注了</p><p>在安卓端，inoreader也有下载，不过因为国内google是登录不了的，你需要在inoreader官网上把你的密码修改了，然后就可以用账户名和密码登录了。</p><p>在IOS端，没用过，好像是reader 3可以支持inoreader账户，还有个readon也不错，可以去试试。</p><h4 id="search-搜索框"><a href="#search-搜索框" class="headerlink" title="search(搜索框)"></a>search(搜索框)</h4><p>默认搜索框是不能够用的，</p><p>you need to install hexo-generator-json-content before using Insight Search</p><p>它已经告诉你了，如果想要使用，就安装这个插件。</p><h4 id="comment-评论系统"><a href="#comment-评论系统" class="headerlink" title="comment(评论系统)"></a>comment(评论系统)</h4><p>这里的多数都是国外的，基本用不了。这个valine好像不错，还能统计文章阅读量，但更加建议使用waline，安全性更强，可以自己试一试，链接。</p><h4 id="miscellaneous-其他"><a href="#miscellaneous-其他" class="headerlink" title="miscellaneous(其他)"></a>miscellaneous(其他)</h4><p>这里我就改了一个links，可以添加友链。注意空格要对！不然会报错！</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>整个主题看起来好像很复杂的样子，但是仔细捋一捋其实也比较流畅，</p><p>languages: 顾名思义<br>layout：布局文件，其实后期想要修改自定义网站上的东西，添加各种各样的信息，主要是在这里修改，其中comment是评论系统，common是常规的布局，最常修改的在这里面，比如修改页面head和footer的内容。<br>scripts：js脚本，暂时没什么用<br>source：里面放了一些css的样式，以及图片</p><h3 id="3-git分支进行多终端工作"><a href="#3-git分支进行多终端工作" class="headerlink" title="3. git分支进行多终端工作"></a>3. git分支进行多终端工作</h3><p>问题来了，如果你现在在自己的笔记本上写的博客，部署在了网站上，那么你在家里用台式机，或者实验室的台式机，发现你电脑里面没有博客的文件，或者要换电脑了，最后不知道怎么移动文件，怎么办？</p><p>在这里我们就可以利用git的分支系统进行多终端工作了，这样每次打开不一样的电脑，只需要进行简单的配置和在github上把文件同步下来，就可以无缝操作了。</p><h4 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h4><p>机制是这样的，由于hexo d上传部署到github的其实是hexo编译后的文件，是用来生成网页的，不包含源文件。</p><p>也就是上传的是在本地目录里自动生成的.deploy_git里面。</p><p>其他文件 ，包括我们写在source 里面的，和配置文件，主题文件，都没有上传到github</p><p>所以可以利用git的分支管理，将源文件上传到github的另一个分支即可。</p><h4 id="上传分支"><a href="#上传分支" class="headerlink" title="上传分支"></a>上传分支</h4><p>首先，先在github上新建一个hexo分支，如图：</p><p>然后在这个仓库的settings中，选择默认分支为hexo分支（这样每次同步的时候就不用指定分支，比较方便）。</p><p>然后在本地的任意目录下，打开git bash，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:yorame/yourname.github.io.git</span><br></pre></td></tr></table></figure><p>将其克隆到本地，因为默认分支已经设成了hexo，所以clone时只clone了hexo。</p><p>接下来在克隆到本地的yourname.github.io中，把除了.git 文件夹外的所有文件都删掉</p><p>把之前我们写的博客源文件全部复制过来，除了.deploy_git。这里应该说一句，复制过来的源文件应该有一个.gitignore，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure><p>注意，如果你之前克隆过theme中的主题文件，那么应该把主题文件中的.git文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。</p><p>而后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit –m &quot;add branch&quot;</span><br><span class="line">git push </span><br></pre></td></tr></table></figure><p>这样就上传完了，可以去你的github上看一看hexo分支有没有上传上去，其中node_modules、public、db.json已经被忽略掉了，没有关系，不需要上传的，因为在别的电脑上需要重新输入命令安装 。</p><p>这样就上传完了。</p><p>更换电脑操作<br>一样的，跟之前的环境搭建一样，</p><p>安装git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>设置git全局邮箱和用户名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourgithubname&quot;</span><br><span class="line">git config --global user.email &quot;yourgithubemail&quot;</span><br></pre></td></tr></table></figure><p>设置ssh key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br><span class="line">#生成后填到github和coding上（有coding平台的话）</span><br><span class="line">#验证是否成功</span><br><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@git.coding.net #(有coding平台的话)</span><br></pre></td></tr></table></figure><p>安装nodejs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure><p>安装hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>但是已经不需要初始化了，</p><p>直接在任意文件夹下，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@………………</span><br></pre></td></tr></table></figure><p>然后进入克隆到的文件夹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd xxx.github.io</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>生成，部署：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>然后就可以开始写你的新博客了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new newpage</span><br></pre></td></tr></table></figure><p>Tips:</p><p>不要忘了，每次写完最好都把源文件上传一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit –m &quot;xxxx&quot;</span><br><span class="line">git push </span><br></pre></td></tr></table></figure><p>如果是在已经编辑过的电脑上，已经有clone文件夹了，那么，每次只要和远端同步一下就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="4-coding-page上部署实现国内外分流"><a href="#4-coding-page上部署实现国内外分流" class="headerlink" title="4.coding page上部署实现国内外分流"></a>4.coding page上部署实现国内外分流</h3><p>之前我们已经把hexo托管在github了，但是github是国外的，而且百度的爬虫是不能够爬取github的，所以如果你希望你做的博客能够在百度引擎上被收录，而且想要更快的访问，那么可以在国内的coding page做一个托管，这样在国内访问就是coding page，国外就走github page。</p><h4 id="1-申请coding账户，新建项目"><a href="#1-申请coding账户，新建项目" class="headerlink" title="1. 申请coding账户，新建项目"></a>1. 申请coding账户，新建项目</h4><p>先申请一个账户，然后创建新的项目，这一步项目名称应该是随意的。</p><h4 id="2-添加ssh-key"><a href="#2-添加ssh-key" class="headerlink" title="2. 添加ssh key"></a>2. 添加ssh key</h4><p>这一步跟github一样。</p><p>添加后，检查一下是不是添加成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@git.coding.net</span><br></pre></td></tr></table></figure><h4 id="3-修改-config-yml"><a href="#3-修改-config-yml" class="headerlink" title="3. 修改_config.yml"></a>3. 修改_config.yml</h4><p>hexo官方文档是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">message: [message]</span><br><span class="line">  repo:</span><br><span class="line">    github: &lt;repository url&gt;,[branch]</span><br><span class="line">    coding: &lt;repository url&gt;,[branch] </span><br></pre></td></tr></table></figure><p>那么，我们只需要：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: </span><br><span class="line">    coding: git@git.coding.net:yourname/yourname.git,master</span><br><span class="line">    github: git@github.com:yourname/yourname.github.io.git,master</span><br></pre></td></tr></table></figure><h4 id="4-部署"><a href="#4-部署" class="headerlink" title="4. 部署"></a>4. 部署</h4><p>保存一下，直接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这样就可以在coding的项目上看到你部署的文件了。</p><h3 id="5-开启coding-pages服务，绑定域名"><a href="#5-开启coding-pages服务，绑定域名" class="headerlink" title="5.开启coding pages服务，绑定域名"></a>5.开启coding pages服务，绑定域名</h3><h3 id="6-阿里云添加解析"><a href="#6-阿里云添加解析" class="headerlink" title="6.阿里云添加解析"></a>6.阿里云添加解析</h3><p>这个时候就可以把之前github的解析改成境外，把coding的解析设为默认了。</p><h3 id="7-去除coding-page的跳转广告"><a href="#7-去除coding-page的跳转广告" class="headerlink" title="7.去除coding page的跳转广告"></a>7.去除coding page的跳转广告</h3><p>coding page的一个比较恶心人的地方就是，你只是银牌会员的话，访问会先跳转到一个广告，再到你自己的域名。那么它也给出了消除的办法。右上角切换到coding的旧版界面，默认新版是不行的。然后再来到pages服务这里。</p><p>只要你在页面上添加一行文字，写Hosted by Coding Pages，然后点下面的小勾勾，两个工作日内它就会审核通过了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Hosted by &lt;a href=&quot;https://pages.coding.me&quot; style=&quot;font-weight: bold&quot;&gt;Coding Pages&lt;/a&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>我的选择是把这一行代码放在主题文件夹&#x2F;layout&#x2F;common&#x2F;footer.ejs里面，也就是本来在页面中看到的页脚部分。</p><p>当然，为了统一，我又在后面加上了and Github哈哈，可以不加。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&lt;span&gt;Hosted by &lt;a href=&quot;https://pages.coding.me&quot; style=&quot;font-weight: bold&quot;&gt;Coding Pages&lt;/a&gt;&lt;/span&gt; and &lt;span&gt;&lt;a href=&quot;https://github.com&quot; style=&quot;font-weight: bold&quot;&gt;Github&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>这是最终加上去的代码。</p><h2 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h2><p>hexo添加各种功能，包括搜索的SEO，阅读量统计，访问量统计和评论系统等。</p><h3 id="1-SEO优化"><a href="#1-SEO优化" class="headerlink" title="1.SEO优化"></a>1.SEO优化</h3><p>推广是很麻烦的事情，怎么样别人才能知道我们呢，首先需要让搜索引擎收录你的这个网站，别人才能搜索的到。那么这就需要SEO优化了。</p><p>SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。</p><h4 id="百度seo"><a href="#百度seo" class="headerlink" title="百度seo"></a>百度seo</h4><p>刚建站的时候是没有搜索引擎收录我们的网站的。可以在搜索引擎中输入site:&lt;域名&gt;</p><p>来查看一下。</p><ol><li>登录百度站长平台添加网站</li></ol><p>登录百度站长平台，在站点管理中添加你自己的网站。</p><p>验证网站有三种方式：文件验证、HTML标签验证、CNAME验证。</p><p>第三种方式最简单，只要将它提供给你的那个xxxxx使用CNAME解析到xxx.baidu.com就可以了。也就是登录你的阿里云，把这个解析填进去就OK了。</p><ol><li>提交链接</li></ol><p>我们需要使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save     </span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>这时候你需要在你的根目录下_config.xml中看看url有没有改成你自己的：</p><p>重新部署后，就可以在public文件夹下看到生成的sitemap.xml和baidusitemap.xml了。</p><p>然后就可以向百度提交你的站点地图了。</p><p>这里建议使用自动提交。</p><p>自动提交又分为三种：主动推送、自动推送、sitemap。</p><p>可以三个一起提交不要紧，我选择的是后两种。</p><p>自动推送：把百度生成的自动推送代码，放在主题文件&#x2F;layout&#x2F;common&#x2F;head.ejs的适当位置，然后验证一下就可以了。<br>sitemap：把两个sitemap地址，提交上去，看到状态正常就OK了。</p><p>ps: 百度收录比较慢，慢慢等个十天半个月再去site:&lt;域名&gt;看看有没有被收录。</p><p>pps:由于github屏蔽了百度的爬虫，需要自定义robot.txt 或使用百度主动提交链接</p><p>前提，您得注册百度站长工具，然后在<strong>工具-&gt;网页抓取-&gt;链接提交</strong>里找到你的密匙。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/26_10_34_10_202211261034180.jpeg"></p><p>首先，在Hexo根目录下，安装插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure><p>最后，加入新的deployer:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- type: ##原有的</span><br><span class="line">  bucket: www.qystu.cc</span><br><span class="line">- type: baidu_url_submitter</span><br></pre></td></tr></table></figure><h4 id="google的SEO"><a href="#google的SEO" class="headerlink" title="google的SEO"></a>google的SEO</h4><p>流程一样，google更简单，而且收录更快，进入google站点地图，提交网站和sitemap.xml，就可以了。</p><p>如果你这个域名在google这里出了问题，那你就提交 yourname.github.io，这个链接，效果是一样的。</p><p>不出意外的话一天内google就能收录你的网站了。</p><p>其他的搜索，如搜狗搜索，360搜索，流程是一样的，这里就不再赘述。</p><h3 id="2-评论系统"><a href="#2-评论系统" class="headerlink" title="2.评论系统"></a>2.评论系统</h3><p>可以使用<a href="https://valine.js.org/">valine</a>或<a href="https://waline.js.org/">waline</a></p><h3 id="3-添加百度统计"><a href="#3-添加百度统计" class="headerlink" title="3.添加百度统计"></a>3.添加百度统计</h3><p>百度统计可以在后台上看到你网站的访问数，浏览量，浏览链接分布等很重要的信息。所以添加百度统计能更有效的让你掌握你的网站情况。</p><p>百度统计，注册一下，这里的账号好像和百度账号不是一起的。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/26_10_34_12_202211261034380.png" alt="image-20210704142252353"></p><p>照样把代码复制到head.ejs文件中，然后再进行一下安装检查，半小时左右就可以在百度统计里面看到自己的网站信息了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里就基本做完了。其实都是参考别的博主的设置的，不一定仅限于volantis主题，你可以在网络中寻找到各种各样的hexo主题,其他主题的设置也是大体相同的，所以如果你希望设置别的主题，那么仔细看一下这个主题的代码结构，也能够把上边的功能添加进去。</p><p>多看看别的博主的那些功能，如果有你能找到自己喜欢的功能，那么好好发动搜索技能，很快就能找到怎么做了。加油吧！</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nastoos部署教程</title>
      <link href="/post/nastoos.html"/>
      <url>/post/nastoos.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>项目开源地址：</p><p><a href="https://github.com/jxxghp/nas-tools">https://github.com/jxxghp/nas-tools</a></p><p><a href="https://hub.docker.com/r/jxxghp/nas-tools">https://hub.docker.com/r/jxxghp/nas-tools</a></p><h2 id="TMDB刮削器api申请"><a href="#TMDB刮削器api申请" class="headerlink" title="TMDB刮削器api申请"></a>TMDB刮削器api申请</h2><p>官网地址：<a href="https://www.themoviedb.org/">https://www.themoviedb.org/</a></p><p>注册账号，进账号设置里申请api</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/19_10_57_6_202211191057407.png" alt="3"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/19_10_58_10_202211191058107.png" alt="4"></p><h2 id="安装Nastoos"><a href="#安装Nastoos" class="headerlink" title="安装Nastoos"></a>安装Nastoos</h2><p>docker部署Nastoos，NasTools简易安装使用步骤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull jxxghp/nas-tools:latest</span><br><span class="line">docker run --name nastools --restart=always -p 3000:3000 -v /home/wwang/wang/nas:/nas -v /home/wwang/wang/nas/config:/config -e NASTOOL_AUTO_UPDATE=true jxxghp/nas-tools:latest</span><br></pre></td></tr></table></figure><p>新建的文件夹，比如：<br>&#x2F;home&#x2F;wwang&#x2F;wang&#x2F;nas</p><p>&#x2F;home&#x2F;wwang&#x2F;wang&#x2F;nas&#x2F;config</p><p>根据自身实际情况修改目录</p><p>安装好后，访问地址就是：</p><p>IP:3000，用户名 admin，密码 password</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/19_10_49_52_202211191049151.png" alt="1"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/19_10_50_18_202211191050514.png" alt="2"></p><h2 id="安装qBittorrent"><a href="#安装qBittorrent" class="headerlink" title="安装qBittorrent"></a>安装qBittorrent</h2><p>docker部署qBittorrent中文版</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name=qbittorrent \</span><br><span class="line">  -p 7881:7881 \</span><br><span class="line">  -p 7881:7881/udp \</span><br><span class="line">  -p 18080:18080 \</span><br><span class="line">  -v /home/wwang/wang/nas/qbconfig:/etc/qBittorrent \</span><br><span class="line">  -v /home/wwang/wang/nas:/downloads \</span><br><span class="line">  --restart unless-stopped \</span><br><span class="line">  helloz/qbittorrent</span><br></pre></td></tr></table></figure><ul><li><code>7881</code>：用于传入连接的端口，TCP&#x2F;UDP都需要映射，且主机端口和容器端口必须一致，否则无法下载和上传</li><li><code>18080</code>：qBittorrentWEBUI访问端口，主机端口和容器端口必须一致，否则无法打开WEB界面</li><li><code>/home/wwang/wang/nas/qbconfig</code>：qbittorrent配置文件存储目录，可自行修改</li><li><code>/home/wwang/wang/nas</code>：下载目录，可自行修改</li></ul><p>安装好后，访问地址就是：</p><p>IP:18080，用户名 admin，密码 adminadmin</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/19_11_8_57_202211191108419.png" alt="5"></p><h3 id="添加新的torrents"><a href="#添加新的torrents" class="headerlink" title="添加新的torrents"></a>添加新的torrents</h3><p>github项目地址：<a href="https://github.com/xiaowansm5/trackerslist">https://github.com/xiaowansm5/trackerslist</a></p><p>打开此链接<a href="https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_all.txt">https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_all.txt</a></p><p>复制里面的内容</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/19_11_12_40_202211191112898.png" alt="6"></p><h2 id="安装emby-server开心版"><a href="#安装emby-server开心版" class="headerlink" title="安装emby server开心版"></a>安装emby server开心版</h2><p>docker部署emby开心版</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">--network=bridge \</span><br><span class="line">-p &#x27;8096:8096&#x27; \</span><br><span class="line">-p &#x27;8920:8920&#x27; \</span><br><span class="line">-p &#x27;1900:1900/udp&#x27; \</span><br><span class="line">-p &#x27;7359:7359/udp&#x27; \</span><br><span class="line">-v /data/emby:/config \</span><br><span class="line">-v /data/downloads/:/data \</span><br><span class="line">-v /home/wwang/wang:/media \</span><br><span class="line">-e TZ=&quot;Asia/Shanghai&quot; \</span><br><span class="line">--device /dev/dri:/dev/dri \</span><br><span class="line">-e UID=0 \</span><br><span class="line">-e GID=0 \</span><br><span class="line">-e GIDLIST=0 \</span><br><span class="line">--restart always \</span><br><span class="line">--name emby \</span><br><span class="line">-d lovechen/embyserver:latest</span><br></pre></td></tr></table></figure><h2 id="配置Nastoos"><a href="#配置Nastoos" class="headerlink" title="配置Nastoos"></a>配置Nastoos</h2><p>先在nas目录下新建movie、link两个文件夹，再到link目录下新建movie文件夹</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/12/2_22_45_24_202212022245544.png" alt="1-1"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/12/2_22_47_43_202212022247461.png" alt="1-2"></p><h3 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h3><p><strong>ip:3000</strong>进nastoos管理后台</p><p>修改登录用户名和密码，增加外网访问地址（非必须）</p><p><strong>Tips，每一个配置项后边有问号的地方，鼠标悬停就会有提示出来。</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/19_11_30_48_202211191130377.png" alt="9-1">填入申请到的TMDB刮削器api</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/19_11_27_32_202211191127558.png" alt="9"></p><h3 id="目录同步"><a href="#目录同步" class="headerlink" title="目录同步"></a>目录同步</h3><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/12/2_22_45_26_202212022245157.png" alt="1-3"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/12/2_22_45_28_202212022245458.png" alt="1-4"></p><h3 id="媒体库配置"><a href="#媒体库配置" class="headerlink" title="媒体库配置"></a>媒体库配置</h3><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/12/2_22_45_37_202212022245702.png" alt="1-5"></p><h3 id="下载器"><a href="#下载器" class="headerlink" title="下载器"></a>下载器</h3><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/19_12_11_0_202211191211666.png" alt="12"></p><h3 id="索引器"><a href="#索引器" class="headerlink" title="索引器"></a>索引器</h3><p>使用内置索引器，公开站点选中所有</p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/19_12_15_35_202211191215644.png" alt="13"></h3><h3 id="媒体服务器"><a href="#媒体服务器" class="headerlink" title="媒体服务器"></a>媒体服务器</h3><p>我使用的emby，进emby服务器后台新建个api</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/19_12_18_57_202211191218700.png" alt="14"></p><p>再到Nastoos管理后台填入api</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/19_12_20_34_202211191220627.png" alt="15"></p><h2 id="Nastoos使用"><a href="#Nastoos使用" class="headerlink" title="Nastoos使用"></a>Nastoos使用</h2><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/19_13_10_3_202211191310705.png" alt="16"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/19_13_20_57_202211191320722.png" alt="17"></p><p><img src="https://p.wwang.pw/d/OneDrive/NAS/Dnstoos.gif" alt="Dnstoos"></p>]]></content>
      
      
      <categories>
          
          <category> nas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nastoos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenWrt介绍及编译基础教程</title>
      <link href="/post/openwrt1.html"/>
      <url>/post/openwrt1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/16_16_52_46_202211161652188.png"></p><h3 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h3><p>OpenWRT是一个高度模块化、高度自动化的<a href="https://baike.baidu.com/item/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux/8287279">嵌入式Linux</a>系统，拥有强大的网络组件和扩展性，常常被用于工控设备、电话、<a href="https://baike.baidu.com/item/%E5%B0%8F%E5%9E%8B%E6%9C%BA%E5%99%A8%E4%BA%BA/6710692">小型机器人</a>、智能家居、<a href="https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1%E5%99%A8/108294">路由器</a>以及<a href="https://baike.baidu.com/item/VOIP/110300">VOIP</a>设备中。 同时，它还提供了100多个已编译好的软件，而且数量还在不断增加，而<a href="https://www.zhujiwo.cc/tag/openwrt">OpenWrt</a> SDK 更简化了开发软件的工序。</p><p>OpenWRT不同于其他许多用于路由器的发行版，它是一个从零开始编写的、功能齐全的、容易修改的路由器操作系统。实际上，这意味着您能够使用您想要的功能而不加进其他的累赘，而支持这些功能工作的[linux kernel](<a href="https://baike.baidu.com/item/linux">https://baike.baidu.com/item/linux</a> kernel&#x2F;765824)又远比绝大多数发行版来得新。</p><h3 id="OpenWrt的优势"><a href="#OpenWrt的优势" class="headerlink" title="OpenWrt的优势"></a>OpenWrt的优势</h3><p>如果对Linux系统有一定的认识, 并想学习或接触嵌入式 Linux 的话, OpenWRT很适合。 而且OpenWRT支持各种处理器架构，无论是对<a href="https://baike.baidu.com/item/ARM/7518299">ARM</a>，<a href="https://baike.baidu.com/item/X86/6150538">X86</a>，<a href="https://baike.baidu.com/item/PowerPC/7381773">PowerPC</a>或者<a href="https://baike.baidu.com/item/MIPS/2173143">MIPS</a>都有很好的支持。 其多达3000多种软件包，囊括从工具链(toolchain)，到内核(linux kernel)，到软件包(packages)，再到根文件系统(rootfs)整个体系，使得用户只需简单的一个make命令即可方便快速地定制一个具有特定功能的嵌入式系统来制作固件。</p><p>一般嵌入式 Linux 的开发过程, 无论是 ARM, PowerPC 或 MIPS 的处理器, 都必需经过以下的开发过程：</p><ol><li>创建 Linux <a href="https://baike.baidu.com/item/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/3600905">交叉编译环境</a>；</li><li>建立 <a href="https://baike.baidu.com/item/Bootloader/8733520">Bootloader</a>；</li><li>移植 Linux <a href="https://baike.baidu.com/item/%E5%86%85%E6%A0%B8/108410">内核</a>；</li><li>建立 Rootfs (根文件系统)；</li><li>安装<a href="https://baike.baidu.com/item/%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/103009">驱动程序</a>；</li><li>安装<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6/12053">软件</a>；</li></ol><p>熟悉这些嵌入式 Linux 的基本开发流程后，不再局限于[ MIPS](<a href="https://baike.baidu.com/item/">https://baike.baidu.com/item/</a> MIPS&#x2F;2173143) 处理器和<a href="https://baike.baidu.com/item/%E6%97%A0%E7%BA%BF%E8%B7%AF%E7%94%B1%E5%99%A8/6056836">无线路由器</a>, 可以尝试在其它处理器, 或者非无线路由器的系统移植嵌入式 Linux, 定制合适自己的应用软件, 并建立一个完整的嵌入式产品。</p><h3 id="编译OpenWrt前言"><a href="#编译OpenWrt前言" class="headerlink" title="编译OpenWrt前言"></a>编译OpenWrt前言</h3><p>编译 Open­Wrt 的过程就像是复读机，除了选择系统组件外，几乎每次编译都是复制粘贴相同的命令。而理解每一条命令的作用、什么时候该去执行，这样才能更好的去解决编译中遇到的问题，更顺利的编译出固件。</p><h3 id="编译OpenWrt基础教程"><a href="#编译OpenWrt基础教程" class="headerlink" title="编译OpenWrt基础教程"></a>编译OpenWrt基础教程</h3><h4 id="1-准备编译环境"><a href="#1-准备编译环境" class="headerlink" title="1.准备编译环境"></a>1.准备编译环境</h4><p>首先装好 Ubuntu 64bit，推荐 Ubuntu 20.04 LTS x64。</p><h4 id="2-安装编译依赖"><a href="#2-安装编译依赖" class="headerlink" title="2.安装编译依赖"></a>2.安装编译依赖</h4><p>终端命令行输入 <code>***sudo apt-get update\***</code> ，然后输入 <em><strong><code>sudo apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync</code></strong></em></p><h4 id="3-拉取源码"><a href="#3-拉取源码" class="headerlink" title="3.拉取源码"></a>3.拉取源码</h4><p>1:lede 源码 <em><strong>git clone <a href="https://github.com/coolsnowwolf/lede">https://github.com/coolsnowwolf/lede</a></strong></em></p><p>2:官方源码 <em><strong>git clone <a href="https://git.openwrt.org/openwrt/openwrt.git">https://git.openwrt.org/openwrt/openwrt.git</a></strong></em></p><p>3:天灵源码 <em><strong>git clone -b 你想要拉的分支 –single-branch <a href="https://github.com/immortalwrt/immortalwrt">https://github.com/immortalwrt/immortalwrt</a></strong></em></p><p><em><strong>git clone</strong></em> (代表克隆拉取的意思） 后面的才是源码的开源地址</p><h4 id="4-更新下载feeds-这里以lede源码为例）"><a href="#4-更新下载feeds-这里以lede源码为例）" class="headerlink" title="4.更新下载feeds (这里以lede源码为例）"></a>4.更新下载feeds (这里以lede源码为例）</h4><p>添加第三方feeds源<br>feeds里添加<br><em><strong>src-git kenzok <a href="https://github.com/kenzok8/openwrt-packages">https://github.com/kenzok8/openwrt-packages</a></strong></em><br><em><strong>src-git small <a href="https://github.com/kenzok8/small">https://github.com/kenzok8/small</a></strong></em></p><p>找到文件 <em><strong>lede&#x2F;feeds.conf.default</strong></em></p><p>把上面的两段复制进去保存</p><p>feeds 是扩展的软件包，独立于 Open­Wrt 源码之外，所以需要单独进行拉取和更新。</p><p>终端 <code>cd lede</code> 进入源码目录</p><p><em><strong>.&#x2F;scripts&#x2F;feeds update -a</strong></em> （更新feeds源）<br><em><strong>.&#x2F;scripts&#x2F;feeds install -a</strong></em> （安装feeds源）</p><h4 id="5-配置文件的设置"><a href="#5-配置文件的设置" class="headerlink" title="5.配置文件的设置"></a>5.配置文件的设置</h4><p>make menuconfig</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/16_16_55_2_202211161655454.png">图形配置界面</p><p>OpenWrt Configuration【OpenWrt配置】</p><p>Target System (x86) —&gt; 目标系统（x86）</p><p>Subtarget (x86_64) —&gt; 子目标（x86_64）</p><p>Target Profile (Generic) —&gt;目标配置文件（通用）</p><p>Target Images —&gt; 保存目标镜像的格式</p><p>Enable experimental features by default —&gt; 默认情况下启用实验功能</p><p>Global build settings —&gt; 全局构建设置</p><p>Advanced configuration options (for developers) —- 高级配置选项（适用于开发人员）</p><p>Build the OpenWrt Image Builder 构建OpenWrt图像生成器</p><p>Build the OpenWrt SDK构建OpenWrt SDK</p><p>Package the OpenWrt-based Toolchain打包基于OpenWrt的工具链</p><p>Image configuration —&gt;图像配置</p><p>Base system —&gt; 基本系统</p><p>Administration —&gt; 管理</p><p>Boot Loaders —&gt;引导加载程序</p><p>Development —&gt; 开发</p><p>Extra packages —&gt; 额外包</p><p>Firmware —&gt;固件</p><p>Fonts —&gt;字体</p><p>Kernel modules —&gt; 内核模块</p><p>Languages —&gt;语言</p><p>Libraries —&gt; 图书馆</p><p>LuCI —&gt; LuCI 软件包</p><p>Mail —&gt;邮件</p><p>Multimedia —&gt;多媒体</p><p>Network —&gt;网络</p><p>Sound —&gt; 声音</p><p>Utilities —&gt;实用程序</p><p>Xorg —&gt;Xorg</p><p>选择你路由器CPU的架构<br>首次编译建议只选择架构，其它都不要动，这样编译成功率会更高。如果不打算调整组件则输入make defconfig，它会检测编译环境并生成默认的编译配置文件。</p><h4 id="5-下载dl-依赖-库"><a href="#5-下载dl-依赖-库" class="headerlink" title="5.下载dl(依赖)库"></a>5.下载dl(依赖)库</h4><p><em><strong>make -j8 download V&#x3D;s</strong></em> 下载dl库（国内请尽量全局科学上网）</p><p>j8代表你的CPU线程数 8&#x3D;8线程</p><p>但似乎有个上限，实测5线程以上其实速度相差不了多少，在 (科学) 网络好的情况下，基本在5分钟以内能下载完。</p><p><em><strong>find dl -size -1024c -exec ls -l {} ;</strong></em><br>此命令可以列出下载不完整的文件（根据我多次编译的经验得出小于1k的文件属于下载不完整），如果存在这样的文件可以使用find dl -size -1024c -exec rm -f {} ;命令将它们删除，然后重新执行***make download***下载并反复检查，确认所有文件完整可大大提高编译成功率，避免浪费时间。(这段可以不执行）</p><h4 id="6-编译固件"><a href="#6-编译固件" class="headerlink" title="6.编译固件"></a>6.编译固件</h4><p><em><strong>make -j1 V&#x3D;s</strong></em><br>-j1：使用单线程编译。新手推荐单线程编译，一是因为玄学问题可能成功率高，二是方便查看错误日志。<br>V&#x3D;s：输出详细日志，用于编译失败时找出错误。而且满屏代码在跑能装逼，一跑就是几个小时，装逼更持久。(上面也说了）</p><p>编译完成后输出路径：bin&#x2F;targets</p><h4 id="7-如果需要重新配置"><a href="#7-如果需要重新配置" class="headerlink" title="7.如果需要重新配置"></a>7.如果需要重新配置</h4><p><em><strong>rm -rf .&#x2F;tmp &amp;&amp; rm -rf .config</strong></em><br><em><strong>make menuconfig</strong></em><br><em><strong>make -j$(($(nproc) + 1)) V&#x3D;s</strong></em> (多线程编译失败后自动进入单线程编译，失败则输出详细日志)</p><h4 id="8-编译更换其它CPU架构的固件（建议操作）"><a href="#8-编译更换其它CPU架构的固件（建议操作）" class="headerlink" title="8.编译更换其它CPU架构的固件（建议操作）"></a>8.编译更换其它CPU架构的固件（建议操作）</h4><p>清除旧的编译产物</p><p><em><strong>make clean</strong></em><br>在源码有大规模更新或者内核更新后执行，以保证编译质量。此操作会删除&#x2F;bin和&#x2F;build_dir目录中的文件。</p><p>清除旧的编译产物、交叉编译工具及工具链等目录</p><p><em><strong>make dirclean</strong></em><br>更换架构编译前必须执行。此操作会删除&#x2F;bin和&#x2F;build_dir目录的中的文件(make clean)以及&#x2F;staging_dir、&#x2F;toolchain、&#x2F;tmp和&#x2F;logs中的文件。</p><p>清除 Open­Wrt 源码以外的文件（可选）</p><p><em><strong>make distclean</strong></em><br>除非是做开发，并打算 push 到 GitHub 这样的远程仓库，否则几乎用不到。此操作相当于make dirclean外加删除&#x2F;dl、&#x2F;feeds目录和.config文件。</p><p>还原 Open­Wrt 源码到初始状态（可选）</p><p><em><strong>git clean -xdf</strong></em><br>如果把源码改坏了，或者长时间没有进行编译时使用。</p><p>清除临时文件</p><p><em><strong>rm -rf tmp</strong></em><br>删除执行make menuconfig后产生的一些临时文件，包括一些软件包的检索信息，删除后会重新加载package目录下的软件包。若不删除会导致一些新加入的软件包不显示。</p><p>删除编译配置文件</p><p><em><strong>rm -f .config</strong></em><br>在不删除的情况下如果取消选择某些组件它的依赖组件不会自动取消，所以对于需要调整组件的情况下建议删除。</p><p>所有操作不要root用户</p>]]></content>
      
      
      <categories>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>捷稀JCG Q20刷pb-boot与OpenWrt教程</title>
      <link href="/post/JCG-Q20.html"/>
      <url>/post/JCG-Q20.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="以下所有步骤所需工具下载-JCG-Q20刷机工具"><a href="#以下所有步骤所需工具下载-JCG-Q20刷机工具" class="headerlink" title="以下所有步骤所需工具下载 JCG-Q20刷机工具"></a>以下所有步骤所需工具下载 <a href="https://pan.wwang.pw/%F0%9F%9A%A9OpenWrt_18.06%E6%BA%90%E7%A0%81/%E6%8D%B7%E7%A8%80JCG%20Q20%E3%80%90pb-boot%E3%80%91/%E8%A7%A3%E9%94%81%E5%88%86%E5%8C%BA%E4%B8%93%E7%94%A8%E5%9B%BA%E4%BB%B6">JCG-Q20刷机工具</a></h3><h3 id="已刷PB-BOOT的请直接跳到第三步"><a href="#已刷PB-BOOT的请直接跳到第三步" class="headerlink" title="已刷PB-BOOT的请直接跳到第三步"></a>已刷PB-BOOT的请直接跳到第三步</h3><h3 id="第一步-解锁分区"><a href="#第一步-解锁分区" class="headerlink" title="第一步: 解锁分区"></a>第一步: 解锁分区</h3><p>进入出厂固件后台 192.168.2.1<img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/11_15_43_56_202211111543262.png" alt="img"> <img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/11_15_43_58_202211111543126.png" alt="img"></p><h3 id="第二步-刷入PB-BOOT"><a href="#第二步-刷入PB-BOOT" class="headerlink" title="第二步: 刷入PB-BOOT"></a>第二步: 刷入PB-BOOT</h3><p>等待设备自动重启完成后, 打开 MobaXterm 软件, SSH密码为 password</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/11_15_44_7_202211111544357.png" alt="img"></p><p>拖动上传 pb-boot.img 到 &#x2F;tmp 目录</p><p>在命令行执行 mtd write &#x2F;tmp&#x2F;pb-boot.img Bootloader 命令 刷入 pb-boot</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/11_15_44_10_202211111544081.png" alt="img"></p><h3 id="第三步-刷入FACTORY底包"><a href="#第三步-刷入FACTORY底包" class="headerlink" title="第三步: 刷入FACTORY底包"></a>第三步: 刷入FACTORY底包</h3><p>断电, 按住reset键(路由器底部)后通电, 五秒左右松开reset 浏览器打开 192.168.1.1 即可进入 pb-boot</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/11_15_44_12_202211111544490.png" alt="img"></p><h3 id="第四步-刷入OPENWRT-正式固件"><a href="#第四步-刷入OPENWRT-正式固件" class="headerlink" title="第四步: 刷入OPENWRT 正式固件"></a>第四步: 刷入OPENWRT 正式固件</h3><p>等待设备自动重启蓝灯常亮后, 打开 <a href="http://192.168.5.1/cgi-bin/luci/admin/system/flash">192.168.5.1 </a>进入OPENWRT底包后台, 密码password</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/11_15_44_18_202211111544640.png" alt="img"></p><p>捷稀JCG Q20 固件下载地址 <a href="https://pan.wwang.pw/%F0%9F%9A%A9OpenWrt_18.06%E6%BA%90%E7%A0%81/%E6%8D%B7%E7%A8%80JCG%20Q20%E3%80%90pb-boot%E3%80%91">OpenWrt固件下载</a></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/11_15_44_25_202211111544616.png" alt="img"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/11_15_44_23_202211111544311.png" alt="img"></p><p>等待路由器自动重启完成,蓝灯常亮后,会自动跳转到后台登录界面, 或手动输入后台地址  <a href="http://192.168.5.1/">192.168.5.1</a></p><p>登录后台, 默认密码 password ,打完收工, Enjoy~</p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> 捷稀JCGQ20 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电犀牛R68S线刷OpenWrt教程</title>
      <link href="/post/R68S.html"/>
      <url>/post/R68S.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="以下所有步骤所需工具下载-R68S刷OPENWRT"><a href="#以下所有步骤所需工具下载-R68S刷OPENWRT" class="headerlink" title="以下所有步骤所需工具下载 R68S刷OPENWRT"></a>以下所有步骤所需工具下载 <a href="https://pan.wwang.pw/%F0%9F%94%A5OpenWrt_LEAN%E7%89%88%EF%BC%88%E7%9C%8B%E4%B8%8D%E6%87%82%E7%9A%84%E5%B0%B1%E7%82%B9%E5%BC%80%E6%AD%A4%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%89/%E7%94%B5%E7%8A%80%E7%89%9B%20R66S%20R68S,%E5%8F%8B%E5%96%84%20R5S/%E5%88%B7%E6%9C%BA%E5%B7%A5%E5%85%B7">R68S刷OPENWRT</a></h3><h3 id="本R68S固件主源码来自-COOLSNOWWOLF-x2F-LEDE-感谢"><a href="#本R68S固件主源码来自-COOLSNOWWOLF-x2F-LEDE-感谢" class="headerlink" title="本R68S固件主源码来自 COOLSNOWWOLF&#x2F;LEDE, 感谢"></a>本R68S固件主源码来自 <a href="https://github.com/coolsnowwolf/lede">COOLSNOWWOLF&#x2F;LEDE</a>, 感谢</h3><h3 id="第一步-安装驱动"><a href="#第一步-安装驱动" class="headerlink" title="第一步: 安装驱动"></a><strong>第一步: 安装驱动</strong></h3><p>解压并安装驱动程序 DriverAssitant，如图</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/11_15_35_45_202211111535989.png" alt="img"></p><h3 id="第二步-获取R68S固件"><a href="#第二步-获取R68S固件" class="headerlink" title="第二步: 获取R68S固件"></a>第二步: 获取R68S固件</h3><p>在此 <a href="https://pan.wwang.pw/%F0%9F%94%A5OpenWrt_LEAN%E7%89%88%EF%BC%88%E7%9C%8B%E4%B8%8D%E6%87%82%E7%9A%84%E5%B0%B1%E7%82%B9%E5%BC%80%E6%AD%A4%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%89/%E7%94%B5%E7%8A%80%E7%89%9B%20R66S%20R68S,%E5%8F%8B%E5%96%84%20R5S">https://pan.wwang.pw/🔥OpenWrt_LEAN版（看不懂的就点开此文件夹）&#x2F;电犀牛%20R66S%20R68S,友善%20R5S</a>下载R68S固件并解压为.img格式的固件</p><h3 id="第三步-进入-LOADER-模式"><a href="#第三步-进入-LOADER-模式" class="headerlink" title="第三步: 进入 LOADER 模式"></a>第三步: 进入 LOADER 模式</h3><p>解压并运行 RKDevTool (瑞芯微开发工具)<br>先断开电源适配器连接<br>双公头 USB 数据线一端连接 PC，一端连接 R68s 上印有 OTG 标志的USB 接口<br>按住设备上的 RECOVERY （恢复）键并保持不松开<br>接上电源<br>大约两秒钟后，松开 RECOVERY 键<br>如果瑞芯微开发工具中显示 “发现一个 Loader 设备”，说明已经成功进入刷机模式, 刷机模式应该只有绿灯长亮，如果蓝灯亮了，说明没有成功进入刷机模式。</p><h3 id="第四步-刷入固件"><a href="#第四步-刷入固件" class="headerlink" title="第四步: 刷入固件"></a>第四步: 刷入固件</h3><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/11_15_35_48_202211111535387.png" alt="img"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/11_15_35_51_202211111535770.png" alt="img"></p><p>等待路由器自动重启完成, 打开后台<a href="http://192.168.5.1/">192.168.5.1</a> , 默认密码 password ,打完收工, Enjoy~</p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> 电犀牛R68S </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NanoPi R5S线刷OpenWrt至eMMC教程</title>
      <link href="/post/R5S.html"/>
      <url>/post/R5S.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="以下所有步骤所需工具下载-R5S刷OPENWRT"><a href="#以下所有步骤所需工具下载-R5S刷OPENWRT" class="headerlink" title="以下所有步骤所需工具下载 R5S刷OPENWRT"></a>以下所有步骤所需工具下载 <a href="https://pan.wwang.pw/d/%F0%9F%94%A5OpenWrt_LEAN%E7%89%88%EF%BC%88%E7%9C%8B%E4%B8%8D%E6%87%82%E7%9A%84%E5%B0%B1%E7%82%B9%E5%BC%80%E6%AD%A4%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%89/%E7%94%B5%E7%8A%80%E7%89%9B%20R66S%20R68S,%E5%8F%8B%E5%96%84%20R5S/%E5%88%B7%E6%9C%BA%E5%B7%A5%E5%85%B7/R5S%E5%88%B7OpenWrt.zip">R5S刷OPENWRT</a></h3><h3 id="本R5S固件由-COOLSNOWWOLF-x2F-LEDE-适配-感谢"><a href="#本R5S固件由-COOLSNOWWOLF-x2F-LEDE-适配-感谢" class="headerlink" title="本R5S固件由 COOLSNOWWOLF&#x2F;LEDE 适配, 感谢"></a>本R5S固件由 <a href="https://github.com/coolsnowwolf/lede">COOLSNOWWOLF&#x2F;LEDE</a> 适配, 感谢</h3><p>注意: 如果EMMC中已有系统, 则R5S会优先从EMMC中启动, 要改为默认从U盘启动, 请从EMMC启动后使用以下命令清除eMMC上的 Loader</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/zero of=/dev/mmcblk1p1 bs=8M count=25dd if=/dev/zero of=/dev/mmcblk2 bs=8M count=25</span><br></pre></td></tr></table></figure><h3 id="第一步-安装驱动"><a href="#第一步-安装驱动" class="headerlink" title="第一步: 安装驱动"></a><strong>第一步: 安装驱动</strong></h3><p>解压并安装驱动程序 DriverAssitant，如图</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/11_15_41_30_202211111541894.png" alt="img"></p><h3 id="第二步-获取R5S固件"><a href="#第二步-获取R5S固件" class="headerlink" title="第二步: 获取R5S固件"></a>第二步: 获取R5S固件</h3><p>在此 <a href="https://pan.wwang.pw/%F0%9F%94%A5OpenWrt_LEAN%E7%89%88%EF%BC%88%E7%9C%8B%E4%B8%8D%E6%87%82%E7%9A%84%E5%B0%B1%E7%82%B9%E5%BC%80%E6%AD%A4%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%89/nanopi-R5S">https://pan.wwang.pw/🔥OpenWrt_LEAN版（看不懂的就点开此文件夹）&#x2F;nanopi-R5S</a> 下载固件并解压为.img格式的固件</p><h3 id="第三步-进入刷机模式"><a href="#第三步-进入刷机模式" class="headerlink" title="第三步: 进入刷机模式"></a>第三步: 进入刷机模式</h3><p>\1) 运行 RKDevTool (瑞芯微开发工具);<br>\2) 断开NanoPi-R5S上连接的USB和电源线, 弹出TF卡;<br>\3) 用USB A-to-A数据线 (也叫USB公对公数据线), 将NanoPi-R5S与电脑进行连接, 连接方法参照下图, 需要连接靠近外侧的USB端口:<br><a href="https://wiki.friendlyelec.com/wiki/index.php/File:Nanopir5s-usba-to-usba2.jpg"><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/11_15_40_34_202211111540791.jpeg" alt="Nanopir5s-usba-to-usba2.jpg"></a>;<br>\4) 按住Mask按键不放, 插上电源, 保持按住Mask键, 状态灯亮起3秒后即可松开, 如果瑞芯微开发工具中显示”发现一个Maskrom设备”, 说明已经成功进入刷机模式;</p><h3 id="第四步-刷入固件"><a href="#第四步-刷入固件" class="headerlink" title="第四步: 刷入固件"></a>第四步: 刷入固件</h3><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/11_15_40_37_202211111540019.png" alt="img"></p><p>等待路由器自动重启完成, 打开后台  <a href="http://192.168.5.1/">192.168.5.1</a> , 默认密码 password ,打完收工, Enjoy~</p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> NanoPi-R5S </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PVE忘记密码如何重置</title>
      <link href="/post/pve-network.html"/>
      <url>/post/pve-network.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="一、U盘制作PVE的安装盘，这里不再详细说如何制作，会安装PVE的同学都懂"><a href="#一、U盘制作PVE的安装盘，这里不再详细说如何制作，会安装PVE的同学都懂" class="headerlink" title="一、U盘制作PVE的安装盘，这里不再详细说如何制作，会安装PVE的同学都懂"></a>一、U盘制作PVE的安装盘，这里不再详细说如何制作，会安装PVE的同学都懂</h2><h2 id="二、制作好的U盘启动"><a href="#二、制作好的U盘启动" class="headerlink" title="二、制作好的U盘启动"></a>二、制作好的U盘启动</h2><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/5_13_40_1_202211051340713.png" alt="1"></p><h2 id="三、进入命令模式"><a href="#三、进入命令模式" class="headerlink" title="三、进入命令模式"></a>三、进入命令模式</h2><p>启动这个界面之后，继续按CTRL D</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/5_13_40_20_202211051340981.png" alt="2"></p><p>成功进入</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/5_13_41_41_202211051341654.png" alt="3"></p><h2 id="四、验证LVM并挂载"><a href="#四、验证LVM并挂载" class="headerlink" title="四、验证LVM并挂载"></a>四、验证LVM并挂载</h2><p>通过命令，验证LVM是否是完整的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vgs      #查看VG，输出应该是有VG PVE</span><br><span class="line">lvs      #查看LV，可以看到 data root </span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/5_13_40_58_202211051340533.png" alt="4"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vgchange -a y    #激活VG</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/5_13_43_1_202211051343940.png" alt="5"></p><p>挂载lvm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/mapper/pve-root /mnt</span><br></pre></td></tr></table></figure><p>chroot</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chroot /mnt</span><br></pre></td></tr></table></figure><h2 id="五、使用命令修改密码"><a href="#五、使用命令修改密码" class="headerlink" title="五、使用命令修改密码"></a>五、使用命令修改密码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd root</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/5_13_43_40_202211051343369.png" alt="11"></p>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenWrt_LuCI 插件中英文名称对照表</title>
      <link href="/post/OpenWrt_LuCI.html"/>
      <url>/post/OpenWrt_LuCI.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>luci-app-clash   # clash科学上网（基本上没用的了，已经给luci-app-openclash代替）</p><p>luci-app-acme          #ACME自动化证书管理环境（丢弃）</p><p> luci-app-accesscontrol     # 访问时间控制</p><p> luci-app-adblock    # ADB 广告过滤</p><p> luci-app-adbyby-plus     # 广告屏蔽大师Plus +</p><p> luci-app-adguardhome    # adguardhome广告过滤</p><p> luci-app-advanced    # 高级设置（内置luci-app-fileassistant文件助手）</p><p> luci-app-advanced-reboot    # 高级重启</p><p> luci-app-aliyundrive-webdav    # 阿里云盘</p><p> luci-app-ahcp    # 支持 AHCPd</p><p> luci-app-airplay2    # Apple AirPlay2 无损音频接收服务器</p><p> luci-app-aliddns    # 阿里 DDNS</p><p> luci-app-amule    # aMule 下载工具</p><p> luci-app-argon-config    # argon主题设置,要配合argon主题使用</p><p> luci-app-aria2    # Aria2 下载工具</p><p> luci-app-arpbind    # IP&#x2F;MAC 绑定</p><p> luci-app-asterisk    # 支持 Asterisk 电话服务器</p><p> luci-app-attendedsysupgrade    # 固件更新升级相关</p><p> luci-app-autoreboot    # 支持计划重启</p><p> luci-app-autoupdate    # 定时更新固件插件</p><p> luci-app-baidupcs-web    # 百度网盘管理</p><p> luci-app-bcp38    # BCP38 网络入口过滤（不确定）</p><p> luci-app-bird1-ipv4    # 对Bird1-ipv4的支持</p><p> luci-app-bird1-ipv6    # 对Bird1-ipv6的支持</p><p> luci-app-bmx6    # BMX6路由协议</p><p> luci-app-cifs-mount    # CIFS&#x2F;SMB挂载设置 </p><p> luci-app-cifsd    # CIFS&#x2F;SMB网络共享</p><p> luci-app-cjdns    # 加密IPV6网络相关</p><p> luci-app-clamav    # ClamAV杀毒软件</p><p> luci-app-commands    # Shell命令模块</p><p> luci-app-control-timewol    # 定时网络设备唤醒</p><p> luci-app-control-webrestriction    # 访问限制</p><p> luci-app-control-weburl    # 网址过滤</p><p> luci-app-cpulimit    # CPU性能调整</p><p> luci-app-cshark    # CloudShark捕获工具</p><p> luci-app-cupsd    # CUPS 打印服务器</p><p> luci-app-ddns    # 动态域名 DNS（集成阿里DDNS客户端）</p><p> luci-app-ddnsto    # 内网穿透</p><p> luci-app-diag-core    # core诊断工具</p><p> luci-app-diskman    # 磁盘管理工具</p><p> luci-app-dnscrypt-proxy    # DNSCrypt解决DNS污染</p><p> luci-app-dnsforwarder    # DNSForwarder防DNS污染</p><p> luci-app-docker    # 不带控制面板的docker</p><p> luci-app-dockerman    # 带控制面板的docker</p><p> luci-app-dump1090    # 民航无线频率（不确定）</p><p> luci-app-dynapoint    # DynaPoint（未知）</p><p> luci-app-e2guardian    # Web内容过滤器</p><p> luci-app-easymesh    # 简单MESH(可有线+无线回程)</p><p> luci-app-eqos    # 内网IP地址限速</p><p> luci-app-familycloud    # 家庭云盘</p><p> luci-app-fileassistant    # 文件助手</p><p> luci-app-filebrowser    # 文件管理器</p><p> luci-app-filetransfer    # 文件传输（可web安装ipk包）</p><p> luci-app-firewall    # 添加防火墙</p><p> luci-app-frpc    # 内网穿透Frp客户端</p><p> luci-app-frps    # 内网穿透Frp服务端</p><p> luci-app-fwknopd    # Firewall Knock Operator服务器</p><p> luci-app-godproxy    # 广告拦截</p><p> luci-app-gost    # GO语言实现的安全隧道（隐蔽的https代理）</p><p> luci-app-gowebdav    # GoWebDav 是一个轻巧、简单、快速的 WebDav 服务端程序</p><p> luci-app-guest-wifi    # WiFi访客网络</p><p> luci-app-haproxy-tcp    # HAProxy负载均衡-TCP</p><p> luci-app-hd-idle    # 硬盘休眠</p><p> luci-app-hnet    # Homenet Status家庭网络控制协议</p><p> luci-app-https-dns-proxy    # 通过HTTPS代理为DNS提供Web UI</p><p> luci-app-ipsec-vpnserver-manyusers    # ipsec-vpn（VPN服务器）</p><p> luci-app-iptvhelper    # iptvhelper,帮助你轻松配置IPTV</p><p> luci-app-jd-dailybonus    # 京东签到服务</p><p> luci-app-kodexplorer    # KOD可道云私人网盘</p><p> luci-app-koolddns    # 支持阿里DDNS、DnsPod动态域名解析</p><p> luci-app-linkease    # 易有云文件管理器</p><p> luci-app-lxc    # LXC容器管理</p><p> luci-app-mentohust    # 锐捷验证</p><p> luci-app-minidlna    # 完全兼容DLNA &#x2F; UPnP-AV客户端的服务器软件</p><p> luci-app-mjpg-streamer    # 兼容Linux-UVC的摄像头程序</p><p> luci-app-music-remote-center    #PCHiFi 数字转盘遥控</p><p> luci-app-mwan3    # MWAN3负载均衡</p><p> luci-app-mwan3helper    # MWAN3分流助手</p><p> luci-app-n2n_v2    # N2N内网穿透 N2N v2 VPN服务</p><p> luci-app-netdata    # 实时监控中文版</p><p> luci-app-nfs    # NFS网络共享</p><p> luci-app-nft-qos    # QOS流量控制 Nftables版</p><p> luci-app-nlbwmon    # 网络带宽监视器</p><p> luci-app-noddos    # NodDOS Clients 阻止DDoS攻击（丢弃）</p><p> luci-app-nps    # 内网穿透nps</p><p> luci-app-ntpc   # NTP时间同步服务器</p><p> luci-app-oaf    # 应用过滤 </p><p> luci-app-ocserv    # OpenConnect VPN服务</p><p> luci-app-olsr    # OLSR配置和状态模块</p><p> luci-app-olsr-services    # OLSR服务器</p><p> luci-app-olsr-viz    # OLSR可视化</p><p> luci-app-oled   # 为1306 0.91 oled专用，如果oled不显示，请看这里</p><p> luci-app-onliner     # 流量监控</p><p> luci-app-openclash    # openclash</p><p> luci-app-openvpn    # OpenVPN客户端</p><p> luci-app-openvpn-server    # 易于使用的OpenVPN服务器 Web-UI</p><p> luci-app-oscam    # OSCAM服务器</p><p> luci-app-p910nd    #打印服务</p><p> luci-app-pagekitec    # Pagekitec内网穿透客户端</p><p> luci-app-passwall    # 科学上网</p><p> luci-app-passwall2    # 科学上网</p><p> luci-app-polipo    # Polipo代理(是一个小型且快速的网页缓存代理)</p><p> luci-app-poweroff    # 关机</p><p> luci-app-pppoe-relay    # PPPoE NAT穿透 点对点协议（PPP）</p><p> luci-app-pppoe-server    # 宽带接入认证服务器</p><p> luci-app-pptp-server    # VPN服务器 PPTP</p><p> luci-app-privoxy    # Privoxy网络代理(带过滤无缓存)</p><p> luci-app-ps3netsrv    # PS3 NET服务器（用于加载蓝光&#x2F;游戏ISO&#x2F;PKG）</p><p> luci-app-pushbot    # 全能推送（微信推送修改版）</p><p> luci-app-qbittorrent    # BT下载工具（完整版）</p><p> luci-app-qbittorrent_static    # BT下载工具</p><p> luci-app-qos    # 流量服务质量(QoS)流控</p><p> luci-app-radicale    # CalDAV&#x2F;CardDAV同步工具</p><p> luci-app-ramfree    # 释放内存</p><p> luci-app-rclone    # 命令行云端同步工具</p><p> luci-app-rebootschedule    # 多功能定时任务（重启网络、重启系统、重启WIFI、重新拨号…）</p><p> luci-app-rp-pppoe-server    # Roaring Penguin PPPoE Server 服务器</p><p> luci-app-samba    # 网络共享</p><p> luci-app-samba4    # 网络共享（Samba4）</p><p> luci-app-serverchan    # 微信推送</p><p> luci-app-shadowsocks-libev    # SS-libev服务端</p><p> luci-app-shairplay    # 支持AirPlay功能</p><p> luci-app-siitwizard    # SIIT配置向导  SIIT-Wizzard</p><p> luci-app-simple-adblock    # 简单的广告拦截</p><p> luci-app-smartdns    # SmartDNS</p><p> luci-app-smartinfo    # 穿越蓝天磁盘监控</p><p> luci-app-socat     # 多功能的网络工具</p><p> luci-app-softethervpn    # SoftEther VPN服务器  NAT穿透</p><p> luci-app-splash    # Client-Splash是无线MESH网络的一个热点认证系统</p><p> luci-app-store    # 在线商店</p><p> luci-app-supervisord    # 一款golang开发的进程管理</p><p> luci-app-sqm    # 流量智能队列管理（QOS）</p><p> luci-app-squid    # Squid代理服务器</p><p> luci-app-ssr-plus    #SSR Plus+ 科学上网</p><p> luci-app-ssrserver-python    #ShadowsocksR Python服务器</p><p> luci-app-statistics    # 流量监控工具</p><p> luci-app-switch-lan-play    # 虚拟局域网联机工具</p><p> luci-app-syncdial    # 多拨虚拟网卡（原macvlan）</p><p> luci-app-syncthing    # syncthing同步工具</p><p> luci-app-tencentddns    # 腾讯DDNS</p><p> luci-app-timecontrol    # 时间控制跟（luci-app-accesscontrol）差不多，不同的是这个可以配合高级设置一起使用</p><p> luci-app-tinyproxy    # Tinyproxy是 HTTP(S)代理服务器</p><p> luci-app-transmission    # BT下载工具</p><p> luci-app-travelmate    # 旅行路由器</p><p> luci-app-ttnode    # 甜糖星愿自动采集插件</p><p> luci-app-ttyd    # 网页终端命令窗</p><p> luci-app-turboacc    # Turbo ACC 网络加速</p><p> luci-app-udpxy    # udpxy做组播服务器</p><p> luci-app-udp2raw    # udp2raw-tunnel管理界面-隧道服务器管理</p><p> luci-app-uhttpd    # uHTTPd Web服务器</p><p> luci-app-unblockmusic    #解锁网易云灰色歌曲</p><p> luci-app-unblockneteasemusic    #新版本解除网易云音乐播放限制</p><p> luci-app-unbound    # Unbound DNS解析器</p><p> luci-app-upnp    # 通用即插即用UPnP（端口自动转发）</p><p> luci-app-usb-printer    # USB 打印服务器</p><p> luci-app-uugamebooster    # UU网游加速器</p><p> luci-app-v2ray-server    # V2Ray 服务器</p><p> luci-app-verysync    # 微力同步</p><p> luci-app-vlmcsd    # KMS激活服务器</p><p> luci-app-vnstat    # vnStat网络监控（图表）</p><p> luci-app-vpnbypass    # VPN BypassWebUI  绕过VPN设置</p><p> luci-app-vsftpd    # FTP服务器</p><p> luci-app-vssr    # VSSR科学上网</p><p> luci-app-watchcat    # 断网检测功能与定时重启</p><p> luci-app-webadmin    # Web管理页面设置</p><p> luci-app-wifischedule    # WiFi 计划</p><p> luci-app-wireguard    # VPN服务器 WireGuard状态</p><p> wifidog-wiwiz    # 拼拼WiFi(luci-app-eqos必选，然后在Network —&gt; Captive Portals —&gt; wifidog-wiwiz 勾选上)</p><p> luci-app-wolplus    # 新版网络唤醒，替换luci-app-wol</p><p> luci-app-wrtbwmon    # 实时流量监测</p><p> luci-app-webd    # Webd 是一款轻量级的 (self-hosted) 自建网盘</p><p> luci-app-xlnetacc    # 迅雷快鸟</p><p> luci-app-zerotier    # ZeroTier内网穿透</p><p> luci-theme-Light    # Light 主题</p><p> luci-theme-argon    # argon 主题</p><p> luci-theme-atmaterial    # atmaterial 主题</p><p> luci-theme-bootstrap    # bootstrap 主题</p><p> luci-theme-darkmatter    # 黑色 主题</p><p> luci-theme-infinityfreedom    # 透明效果 主题</p><p> luci-theme-material    # material 主题</p><p> luci-theme-netgear    # 网件 主题</p><p> luci-theme-neobird    # neobird 主题</p><p> luci-theme-opentomcat    # opentomcat 主题</p><p> luci-theme-rosy    # rosy 主题</p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">luci-app-dockerman</span> <span class="string">和</span> <span class="string">luci-app-docker</span> <span class="string">只能二选一</span></span><br><span class="line"></span><br><span class="line"><span class="string">想要编译luci-app-dockerman或者luci-app-docker</span></span><br><span class="line"></span><br><span class="line"><span class="string">首先要在Global</span> <span class="string">build</span> <span class="string">settings</span> <span class="string">---&gt;</span> <span class="string">Enable</span> <span class="string">IPv6</span> <span class="string">support</span> <span class="string">in</span> <span class="string">packages</span> <span class="string">(NEW)（选上）</span></span><br><span class="line"></span><br><span class="line"><span class="string">选择dockerman或docker建议选上luci-app-diskman方便挂盘所用</span> </span><br></pre></td></tr></table></figure><p><strong>支持iPv6：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Extra packages ---&gt; ipv6helper （选定这个后下面几项自动选择了）</span><br><span class="line">Network ---&gt; odhcp6c</span><br><span class="line">Network ---&gt; odhcpd-ipv6only</span><br><span class="line">LuCI ---&gt; Protocols ---&gt; luci-proto-ipv6</span><br><span class="line">LuCI ---&gt; Protocols ---&gt; luci-proto-ppp</span><br></pre></td></tr></table></figure><p><strong>打开适用于VMware的VM Tools</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Utilities ---&gt; open-vm-tools</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> LuCI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>360V6刷机OpenWrt固件教程</title>
      <link href="/post/360V6.html"/>
      <url>/post/360V6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>关于 360 WIFI6 天穹系列的好坏，我也就不多说了，它搭载了高通 IPQ6018 处理器，512M内存，千兆网口<em>4，USB 2.0 接口</em>1，内置 NSS 硬件加解密驱动跑网络代理基本不占用 CPU 资源，颜值我给八分，废话就不多说了，直接进入刷机正题。</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>确认自己的 360 V6 是官方普通版，还是京东云版，如何确认到路由器后台自行查看</p><p><a href="https://mianbaoduo.com/o/bread/mbd-YpuVlJlx" target="_blank" rel="nofollow">购买 uboot 文件</a>，并下载到本地，本站不提供 uboot 分区文件，请尊重他人成果</p><p>在 Windows 电脑下载安装好 <a href="https://pan.w2nn.ml/api/raw/?path=/%F0%9F%96%A5%EF%B8%8F%E5%88%B7%E6%9C%BA%E5%B7%A5%E5%85%B7/hfs.exe" target="_blank" rel="nofollow">HFS.exe</a> 与 <a href="https://pan.w2nn.ml/api/raw/?path=/%F0%9F%96%A5%EF%B8%8F%E5%88%B7%E6%9C%BA%E5%B7%A5%E5%85%B7/putty.exe" target="_blank" rel="nofollow">Putty</a> 客户端</p><h2 id="升级固件"><a href="#升级固件" class="headerlink" title="升级固件"></a>升级固件</h2><p>选择 官方版 或 京东版 下载本地，将 电脑 和 360 V6 路由器 Lan 口用网线连接，打开路由器后台，选择“路由器设置”-“手动升级”，上传选择好的版本，然后等待升级完成重启，如下图：</p><p><strong>默认路由地址：</strong>192.168.0.1</p<p><strong>官方版：</strong><a href="https://pan.w2nn.ml/api/raw/?path=/%F0%9F%94%A5OpenWrt_LEAN%E7%89%88%EF%BC%88%E7%9C%8B%E4%B8%8D%E6%87%82%E7%9A%84%E5%B0%B1%E7%82%B9%E5%BC%80%E6%AD%A4%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%89/360v6/%E5%88%B7%E6%9C%BA%E5%B7%A5%E5%85%B7/360V6-v4.2.13.3033-rel-upgrade.bin">360V6-v4.2.13.3033-rel-upgrade.bin</a></p><p><strong>京东版：</strong><a href="https://pan.w2nn.ml/api/raw/?path=/%F0%9F%94%A5OpenWrt_LEAN%E7%89%88%EF%BC%88%E7%9C%8B%E4%B8%8D%E6%87%82%E7%9A%84%E5%B0%B1%E7%82%B9%E5%BC%80%E6%AD%A4%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%89/360v6/%E5%88%B7%E6%9C%BA%E5%B7%A5%E5%85%B7/360V6_JD-v4.2.13.3033-rel-upgrade.bin">360V6_JD-v4.2.13.3033-rel-upgrade.bin</a></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/21_10_41_54_202210211041312.png" alt="1"></p><p>升级完成后自动重启，再次进入后台，在“功能拓展”-“插件中心”里上传下载好的 Telnetd 开关插件，上传后默认是开启状态，如下图：</p><p>Telnetd 开关插件：<a href="https://pan.w2nn.ml/api/raw/?path=/%F0%9F%94%A5OpenWrt_LEAN%E7%89%88%EF%BC%88%E7%9C%8B%E4%B8%8D%E6%87%82%E7%9A%84%E5%B0%B1%E7%82%B9%E5%BC%80%E6%AD%A4%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%89/360v6/%E5%88%B7%E6%9C%BA%E5%B7%A5%E5%85%B7/360_v6_telnetd.opk">360_v6_telnetd.opk</a></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/21_10_41_56_202210211041288.png" alt="2"></p><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><p>打开下载安装好的 HFS 服务器，打开前将文件加入白名单，防火墙提示选择允许，确认自己 HFS 网段是在 192.168.0.X 内，确认完成后，把购买好的 uboot 和 mibib 分区文件托拉到 HFS 左侧窗口内，如下图：</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/21_10_42_0_202210211042965.png" alt="3"></p><p><span style="color: #FF0000;"><strong>特别注意：</strong>上传完成后不可关闭，如果你的 HFS 网段不在 192.168.0.X 内，那么你可以在“Mean”-“IP adress” 内选择 192.168.0.X 网段，一般默认为：192.168.0.X</span></p><h2 id="进行分区"><a href="#进行分区" class="headerlink" title="进行分区"></a>进行分区</h2><p>打开下载好的 Putty 客户端，在 Host Name 内填写默认的路由器地址，默认地址一般为：192.168.0.1，端口 23 默认，选择 Telnet 连接，回车输入用户名和密码，如下图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">telnet 用户：root</span><br><span class="line">telnet 密码：telnetdebug</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/21_10_42_3_202210211042464.png" alt="4"></p><p>通过 telnet 连接登录后，执行以下命令进入到 &#x2F;tmp 目录，并依次通过 wget 从本地 HFS 服务器下载文件连接到 &#x2F;tmp 目录，下载完成可以通过“ls | grep bin”查看是否下载成功，如下图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 进入目录</span><br><span class="line">cd /tmp</span><br><span class="line"># 下载文件</span><br><span class="line">wget http://192.168.0.X/uboot-qihoo-v6.bin</span><br><span class="line">wget http://192.168.0.X/360v6-mibib.bin</span><br><span class="line"></span><br><span class="line"># 确认下载</span><br><span class="line">ls | grep bin</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/21_10_42_6_202210211042451.png" alt="5"></p><p>在刷入 uboot 和 大分区 前，需要使用以下命令检查一下分区情况，确认 mtd1 和 mtd13、mtd14 和 下图内容相同，这里很重要，如下图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/mtd</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/21_10_42_9_202210211042362.png" alt="6"></p><p>确认完分区情况和上图一致，即可进行下一步，输入以下命令刷入 uboot 和 大分区，刷入成功如下图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mtd write /tmp/360v6-mibib.bin /dev/mtd1</span><br><span class="line">mtd write /tmp/uboot-qihoo-v6.bin /dev/mtd13</span><br><span class="line">mtd write /tmp/uboot-qihoo-v6.bin /dev/mtd14</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/21_10_42_21_202210211042797.png" alt="7"></p><h2 id="刷写固件"><a href="#刷写固件" class="headerlink" title="刷写固件"></a>刷写固件</h2><p>刷入 uboot 和 大分区完成后，将本地网络适配器地址修改为固定 IP 地址，比如：192.168.1.5，要注意的是 默认网关 和 DNS 都要 192.168.1.1，如下图：</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/21_10_42_11_202210211042184.png" alt="8"></p><p>修改完成后，电脑通过有线连接 360 V6 路由器 Lan 口，路由器断电，用细小的工具按住路由器背部的复位键不放，并插上电源，路由器会先绿灯闪烁，大约 5 - 7 秒左右转为红灯松开，等待完成就可以使用浏览器打开 192.168.1.1 访问了，打开会显示 uboot 文件上传后台，如下图：</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/21_10_42_17_202210211042186.png" alt="9"></p><p>接着使用以下地址下载 OpenWrt 固件到本地，并在 uboot 后台选择下载好的nand-factory.ubi固件进行上传刷写，不会更新 uboot 页面，确认是否刷写完成，可查看无线列表内是否存在 OpenWrt，如下图：</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/21_10_42_14_202210211042175.png" alt="10"></p><p>确认刷入固件后，将电脑的 IP 地址修改会自动获取，就可以通过 192.168.5.1 访问 OpenWrt 后台</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 后台账号密码</span><br><span class="line">root / password</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> 路由器 </tag>
            
            <tag> 360v6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无服务器 自建短链服务Url-Shorten-Worker- 完整的部署教程</title>
      <link href="/post/url.html"/>
      <url>/post/url.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>源码 GitHub:  <a href="https://github.com/xyTom/Url-Shorten-Worker">https://github.com/xyTom/Url-Shorten-Worker</a></p><p>修改版源码 GitHub: <a href="https://github.com/crazypeace/Url-Shorten-Worker">https://github.com/crazypeace/Url-Shorten-Worker</a></p><p><strong>申请Cloudflare账号，略。</strong></p><h2 id="创建一个KV"><a href="#创建一个KV" class="headerlink" title="创建一个KV"></a>创建一个KV</h2><p>记住这个KV的名字，以 <strong>url</strong>为例</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/20_11_21_54_202210201121122.png" alt="1"></p><h2 id="查看此KV"><a href="#查看此KV" class="headerlink" title="查看此KV"></a>查看此KV</h2><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/20_10_45_50_202210201045829.png" alt="2"></p><h2 id="添加一个条目Entry"><a href="#添加一个条目Entry" class="headerlink" title="添加一个条目Entry"></a>添加一个条目Entry</h2><p>密钥key为password，值为一个随机字符串.</p><p>* password这个key是在脚本中要引用的，所以要设置这个。</p><p>随机字符串以 <strong>url</strong>为例</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/20_10_51_3_202210201051755.png" alt="3"></p><h2 id="创建Worker服务"><a href="#创建Worker服务" class="headerlink" title="创建Worker服务"></a>创建Worker服务</h2><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/20_11_21_46_202210201121915.png" alt="4"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/20_11_21_44_202210201121586.png" alt="5"></p><h2 id="设置绑定KV"><a href="#设置绑定KV" class="headerlink" title="设置绑定KV"></a>设置绑定KV</h2><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/20_11_21_42_202210201121140.png" alt="6"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/20_11_21_38_202210201121592.png" alt="7"></p><p>变量名称必须设置为 LINKS， KV的名字选刚刚创建的 <strong>url</strong></p><blockquote><p>LINKS 是在脚本中要引用的，所以要设置这个。换句话说，如果你使用别的脚本，可能这个变量名称就不是LINKS了。</p></blockquote><h2 id="编辑Worker的脚本"><a href="#编辑Worker的脚本" class="headerlink" title="编辑Worker的脚本"></a>编辑Worker的脚本</h2><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/20_11_21_36_202210201121151.png" alt="9"></p><p>把原有的内容全部删掉，换成：<a href="https://github.com/xyTom/Url-Shorten-Worker/blob/main/index.js">https://github.com/xyTom/Url-Shorten-Worker/blob/main/index.js</a> 的内容，保存并部署</p><h3 id="修改版"><a href="#修改版" class="headerlink" title="修改版"></a>修改版</h3><blockquote><p>代码链接</p><p><a href="https://github.com/crazypeace/Url-Shorten-Worker/blob/main/index.js">https://github.com/crazypeace/Url-Shorten-Worker/blob/main/index.js</a></p></blockquote><h4 id="在原版基础上的修改说明"><a href="#在原版基础上的修改说明" class="headerlink" title="在原版基础上的修改说明"></a>在原版基础上的修改说明</h4><blockquote><p>直接访问域名返回404。在KV中设置一个entry，保存秘密path，只有访问这个path才显示使用页面。</p><p><a href="https://zelikk.blogspot.com/2022/07/url-shorten-worker-hide-tutorial.html">https://zelikk.blogspot.com/2022/07/url-shorten-worker-hide-tutorial.html</a></p><p>支持自定义短链</p><p><a href="https://zelikk.blogspot.com/2022/07/url-shorten-worker-custom.html">https://zelikk.blogspot.com/2022/07/url-shorten-worker-custom.html</a></p><p>API 不公开服务</p><p><a href="https://zelikk.blogspot.com/2022/07/url-shorten-worker-api-password.html">https://zelikk.blogspot.com/2022/07/url-shorten-worker-api-password.html</a></p><p>页面缓存设置过的短链</p><p><a href="https://zelikk.blogspot.com/2022/08/url-shorten-worker-localstorage.html">https://zelikk.blogspot.com/2022/08/url-shorten-worker-localstorage.html</a></p><p>长链接文本框预搜索localStorage</p><p><a href="https://zelikk.blogspot.com/2022/08/url-shorten-worker-bootstrap-list-group-oninput.html">https://zelikk.blogspot.com/2022/08/url-shorten-worker-bootstrap-list-group-oninput.html</a></p><p>增加删除某条短链的按钮</p><p><a href="https://zelikk.blogspot.com/2022/08/url-shorten-worker-delete-kv-localstorage.html">https://zelikk.blogspot.com/2022/08/url-shorten-worker-delete-kv-localstorage.html</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">no_ref: &quot;off&quot;, //Control the HTTP referrer header, if you want to create an anonymous link that will hide the HTTP Referer header, please set to &quot;on&quot; .</span><br><span class="line">theme:&quot;&quot;,//Homepage theme, use the empty value for default theme. To use urlcool theme, please fill with &quot;theme/urlcool&quot; .</span><br><span class="line">cors: &quot;on&quot;,//Allow Cross-origin resource sharing for API requests.</span><br><span class="line">unique_link:false,//If it is true, the same long url will be shorten into the same short url</span><br><span class="line">custom_link:true,//Allow users to customize the short url.</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const html404 = `&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h1&gt;404 Not Found.&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;The url you visit is not found.&lt;/p&gt;</span><br><span class="line">  &lt;p&gt; &lt;a href=&quot;https://github.com/crazypeace/Url-Shorten-Worker/&quot; target=&quot;_self&quot;&gt;Fork me on GitHub&lt;/a&gt; &lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;`</span><br><span class="line"></span><br><span class="line">let response_header=&#123;</span><br><span class="line">  &quot;content-type&quot;: &quot;text/html;charset=UTF-8&quot;,</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">if (config.cors==&quot;on&quot;)&#123;</span><br><span class="line">  response_header=&#123;</span><br><span class="line">  &quot;content-type&quot;: &quot;text/html;charset=UTF-8&quot;,</span><br><span class="line">  &quot;Access-Control-Allow-Origin&quot;:&quot;*&quot;,</span><br><span class="line">  &quot;Access-Control-Allow-Methods&quot;: &quot;POST&quot;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function randomString(len) &#123;</span><br><span class="line">  len = len || 6;</span><br><span class="line">  let $chars = &#x27;ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678&#x27;;    /****默认去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1****/</span><br><span class="line">  let maxPos = $chars.length;</span><br><span class="line">  let result = &#x27;&#x27;;</span><br><span class="line">  for (i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    result += $chars.charAt(Math.floor(Math.random() * maxPos));</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function sha512(url)&#123;</span><br><span class="line">    url = new TextEncoder().encode(url)</span><br><span class="line"></span><br><span class="line">    const url_digest = await crypto.subtle.digest(</span><br><span class="line">      &#123;</span><br><span class="line">        name: &quot;SHA-512&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">      url, // The data you want to hash as an ArrayBuffer</span><br><span class="line">    )</span><br><span class="line">    const hashArray = Array.from(new Uint8Array(url_digest)); // convert buffer to byte array</span><br><span class="line">    const hashHex = hashArray.map(b =&gt; b.toString(16).padStart(2, &#x27;0&#x27;)).join(&#x27;&#x27;);</span><br><span class="line">    //console.log(hashHex)</span><br><span class="line">    return hashHex</span><br><span class="line">&#125;</span><br><span class="line">async function checkURL(URL)&#123;</span><br><span class="line">    let str=URL;</span><br><span class="line">    let Expression=/http(s)?:\/\/([\w-]+\.)+[\w-]+(\/[\w- .\/?%&amp;=]*)?/;</span><br><span class="line">    let objExp=new RegExp(Expression);</span><br><span class="line">    if(objExp.test(str)==true)&#123;</span><br><span class="line">      if (str[0] == &#x27;h&#x27;)</span><br><span class="line">        return true;</span><br><span class="line">      else</span><br><span class="line">        return false;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">async function save_url(URL)&#123;</span><br><span class="line">    let random_key=await randomString()</span><br><span class="line">    let is_exist=await LINKS.get(random_key)</span><br><span class="line">    console.log(is_exist)</span><br><span class="line">    if (is_exist == null)</span><br><span class="line">        return await LINKS.put(random_key, URL),random_key</span><br><span class="line">    else</span><br><span class="line">        save_url(URL)</span><br><span class="line">&#125;</span><br><span class="line">async function is_url_exist(url_sha512)&#123;</span><br><span class="line">  let is_exist = await LINKS.get(url_sha512)</span><br><span class="line">  console.log(is_exist)</span><br><span class="line">  if (is_exist == null) &#123;</span><br><span class="line">    return false</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    return is_exist</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">async function handleRequest(request) &#123;</span><br><span class="line">  console.log(request)</span><br><span class="line"></span><br><span class="line">  // 查KV中的password对应的值</span><br><span class="line">  const password_value = await LINKS.get(&quot;password&quot;);</span><br><span class="line"></span><br><span class="line">  if (request.method === &quot;POST&quot;) &#123;</span><br><span class="line">    let req=await request.json()</span><br><span class="line">    let req_cmd=req[&quot;cmd&quot;]</span><br><span class="line">    if (req_cmd == &quot;add&quot;) &#123;</span><br><span class="line">      let req_url=req[&quot;url&quot;]</span><br><span class="line">      let req_keyPhrase=req[&quot;keyPhrase&quot;]</span><br><span class="line">      let req_password=req[&quot;password&quot;]</span><br><span class="line"></span><br><span class="line">      console.log(req_url)</span><br><span class="line">      console.log(req_keyPhrase)</span><br><span class="line">      console.log(req_password)</span><br><span class="line">      if(!await checkURL(req_url))&#123;</span><br><span class="line">        return new Response(`&#123;&quot;status&quot;:500,&quot;key&quot;: &quot;&quot;, &quot;error&quot;:&quot;: Error: Url illegal.&quot;&#125;`, &#123;</span><br><span class="line">          headers: response_header,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      if (req_password != password_value) &#123;</span><br><span class="line">        return new Response(`&#123;&quot;status&quot;:500,&quot;key&quot;: &quot;&quot;, &quot;error&quot;:&quot;: Error: Invalid password.&quot;&#125;`, &#123;</span><br><span class="line">          headers: response_header,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      let stat,random_key</span><br><span class="line">      if (config.custom_link &amp;&amp; (req_keyPhrase != &quot;&quot;))&#123;</span><br><span class="line">        let is_exist=await LINKS.get(req_keyPhrase)</span><br><span class="line">        if (is_exist != null) &#123;</span><br><span class="line">          return new Response(`&#123;&quot;status&quot;:500,&quot;key&quot;: &quot;&quot;, &quot;error&quot;:&quot;: Error: Custom shortURL existed.&quot;&#125;`, &#123;</span><br><span class="line">            headers: response_header,</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          random_key = req_keyPhrase</span><br><span class="line">          stat, await LINKS.put(req_keyPhrase, req_url)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else if (config.unique_link)&#123;</span><br><span class="line">        let url_sha512 = await sha512(req_url)</span><br><span class="line">        let url_key = await is_url_exist(url_sha512)</span><br><span class="line">        if(url_key)&#123;</span><br><span class="line">          random_key = url_key</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          stat,random_key=await save_url(req_url)</span><br><span class="line">          if (typeof(stat) == &quot;undefined&quot;)&#123;</span><br><span class="line">            console.log(await LINKS.put(url_sha512,random_key))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        stat,random_key=await save_url(req_url)</span><br><span class="line">      &#125;</span><br><span class="line">      console.log(stat)</span><br><span class="line">      if (typeof(stat) == &quot;undefined&quot;)&#123;</span><br><span class="line">        return new Response(`&#123;&quot;status&quot;:200, &quot;key&quot;:&quot;`+random_key+`&quot;, &quot;error&quot;: &quot;&quot;&#125;`, &#123;</span><br><span class="line">          headers: response_header,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        return new Response(`&#123;&quot;status&quot;:500, &quot;key&quot;: &quot;&quot;, &quot;error&quot;:&quot;: Error:Reach the KV write limitation.&quot;&#125;`, &#123;</span><br><span class="line">          headers: response_header,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else if (req_cmd == &quot;del&quot;) &#123;</span><br><span class="line">      let req_keyPhrase=req[&quot;keyPhrase&quot;]</span><br><span class="line">      let req_password=req[&quot;password&quot;]</span><br><span class="line"></span><br><span class="line">      if (req_password != password_value) &#123;</span><br><span class="line">        return new Response(`&#123;&quot;status&quot;:500,&quot;key&quot;: &quot;&quot;, &quot;error&quot;:&quot;: Error: Invalid password.&quot;&#125;`, &#123;</span><br><span class="line">          headers: response_header,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      await LINKS.delete(req_keyPhrase)</span><br><span class="line">      return new Response(`&#123;&quot;status&quot;:200&#125;`, &#123;</span><br><span class="line">        headers: response_header,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;else if(request.method === &quot;OPTIONS&quot;)&#123;  </span><br><span class="line">      return new Response(``, &#123;</span><br><span class="line">      headers: response_header,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const requestURL = new URL(request.url)</span><br><span class="line">  const path = requestURL.pathname.split(&quot;/&quot;)[1]</span><br><span class="line">  const params = requestURL.search;</span><br><span class="line"></span><br><span class="line">  console.log(path)</span><br><span class="line">  if(!path)&#123;</span><br><span class="line">    return Response.redirect(&quot;https://zelikk.blogspot.com/search/label/Url-Shorten-Worker&quot;, 302)</span><br><span class="line">    /* new Response(html404, &#123;</span><br><span class="line">      headers: &#123;</span><br><span class="line">        &quot;content-type&quot;: &quot;text/html;charset=UTF-8&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">      status: 404</span><br><span class="line">    &#125;) */</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // 如果path符合password 显示应用界面</span><br><span class="line">  if (path==password_value)&#123;  </span><br><span class="line">    let index= await fetch(&quot;https://crazypeace.github.io/Url-Shorten-Worker/&quot;+config.theme+&quot;/index.html&quot;)</span><br><span class="line">    index=await index.text()</span><br><span class="line">    index=index.replace(/__PASSWORD__/gm, password_value)</span><br><span class="line">    return new Response(index, &#123;</span><br><span class="line">      headers: &#123;</span><br><span class="line">        &quot;content-type&quot;: &quot;text/html;charset=UTF-8&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const value = await LINKS.get(path);</span><br><span class="line">  let location ;</span><br><span class="line"></span><br><span class="line">  if(params) &#123;</span><br><span class="line">    location = value + params</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">      location = value</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(value)</span><br><span class="line">  </span><br><span class="line">  if (location) &#123;</span><br><span class="line">    if (config.no_ref==&quot;on&quot;)&#123;</span><br><span class="line">      let no_ref= await fetch(&quot;https://crazypeace.github.io/Url-Shorten-Worker/no-ref.html&quot;)</span><br><span class="line">      no_ref=await no_ref.text()</span><br><span class="line">      no_ref=no_ref.replace(/&#123;Replace&#125;/gm, location)</span><br><span class="line">      return new Response(no_ref, &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">          &quot;content-type&quot;: &quot;text/html;charset=UTF-8&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      return Response.redirect(location, 302)</span><br><span class="line">    &#125;    </span><br><span class="line">  &#125;</span><br><span class="line">  // If request not in kv, return 404</span><br><span class="line">  return new Response(html404, &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      &quot;content-type&quot;: &quot;text/html;charset=UTF-8&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">    status: 404</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addEventListener(&quot;fetch&quot;, async event =&gt; &#123;</span><br><span class="line">  event.respondWith(handleRequest(event.request))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：修改版搭建完成后要访问，你的worker域名**&#x2F;url**来打开使用页面</p><h3 id="原版"><a href="#原版" class="headerlink" title="原版"></a>原版</h3><blockquote><p><a href="https://github.com/xyTom/Url-Shorten-Worker/blob/main/index.js">https://github.com/xyTom/Url-Shorten-Worker/blob/main/index.js</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">no_ref: &quot;off&quot;, //Control the HTTP referrer header, if you want to create an anonymous link that will hide the HTTP Referer header, please set to &quot;on&quot; .</span><br><span class="line">theme:&quot;&quot;,//Homepage theme, use the empty value for default theme. To use urlcool theme, please fill with &quot;theme/urlcool&quot; .</span><br><span class="line">cors: &quot;on&quot;,//Allow Cross-origin resource sharing for API requests.</span><br><span class="line">unique_link:false,//If it is true, the same long url will be shorten into the same short url</span><br><span class="line">custom_link:false,//Allow users to customize the short url.</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const html404 = `&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h1&gt;404 Not Found.&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;The url you visit is not found.&lt;/p&gt;</span><br><span class="line">  &lt;a href=&quot;https://github.com/xyTom/Url-Shorten-Worker/&quot; target=&quot;_self&quot;&gt;Fork me on GitHub&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;`</span><br><span class="line"></span><br><span class="line">let response_header=&#123;</span><br><span class="line">  &quot;content-type&quot;: &quot;text/html;charset=UTF-8&quot;,</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">if (config.cors==&quot;on&quot;)&#123;</span><br><span class="line">  response_header=&#123;</span><br><span class="line">  &quot;content-type&quot;: &quot;text/html;charset=UTF-8&quot;,</span><br><span class="line">  &quot;Access-Control-Allow-Origin&quot;:&quot;*&quot;,</span><br><span class="line">  &quot;Access-Control-Allow-Methods&quot;: &quot;POST&quot;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function randomString(len) &#123;</span><br><span class="line">　　len = len || 6;</span><br><span class="line">　　let $chars = &#x27;ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678&#x27;;    /****默认去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1****/</span><br><span class="line">　　let maxPos = $chars.length;</span><br><span class="line">　　let result = &#x27;&#x27;;</span><br><span class="line">　　for (i = 0; i &lt; len; i++) &#123;</span><br><span class="line">　　　　result += $chars.charAt(Math.floor(Math.random() * maxPos));</span><br><span class="line">　　&#125;</span><br><span class="line">　　return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function sha512(url)&#123;</span><br><span class="line">    url = new TextEncoder().encode(url)</span><br><span class="line"></span><br><span class="line">    const url_digest = await crypto.subtle.digest(</span><br><span class="line">      &#123;</span><br><span class="line">        name: &quot;SHA-512&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">      url, // The data you want to hash as an ArrayBuffer</span><br><span class="line">    )</span><br><span class="line">    const hashArray = Array.from(new Uint8Array(url_digest)); // convert buffer to byte array</span><br><span class="line">    const hashHex = hashArray.map(b =&gt; b.toString(16).padStart(2, &#x27;0&#x27;)).join(&#x27;&#x27;);</span><br><span class="line">    //console.log(hashHex)</span><br><span class="line">    return hashHex</span><br><span class="line">&#125;</span><br><span class="line">async function checkURL(URL)&#123;</span><br><span class="line">    let str=URL;</span><br><span class="line">    let Expression=/http(s)?:\/\/([\w-]+\.)+[\w-]+(\/[\w- .\/?%&amp;=]*)?/;</span><br><span class="line">    let objExp=new RegExp(Expression);</span><br><span class="line">    if(objExp.test(str)==true)&#123;</span><br><span class="line">      if (str[0] == &#x27;h&#x27;)</span><br><span class="line">        return true;</span><br><span class="line">      else</span><br><span class="line">        return false;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">async function save_url(URL)&#123;</span><br><span class="line">    let random_key=await randomString()</span><br><span class="line">    let is_exist=await LINKS.get(random_key)</span><br><span class="line">    console.log(is_exist)</span><br><span class="line">    if (is_exist == null)</span><br><span class="line">        return await LINKS.put(random_key, URL),random_key</span><br><span class="line">    else</span><br><span class="line">        save_url(URL)</span><br><span class="line">&#125;</span><br><span class="line">async function is_url_exist(url_sha512)&#123;</span><br><span class="line">  let is_exist = await LINKS.get(url_sha512)</span><br><span class="line">  console.log(is_exist)</span><br><span class="line">  if (is_exist == null) &#123;</span><br><span class="line">    return false</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    return is_exist</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">async function handleRequest(request) &#123;</span><br><span class="line">  console.log(request)</span><br><span class="line">  if (request.method === &quot;POST&quot;) &#123;</span><br><span class="line">    let req=await request.json()</span><br><span class="line">    console.log(req[&quot;url&quot;])</span><br><span class="line">    if(!await checkURL(req[&quot;url&quot;]))&#123;</span><br><span class="line">    return new Response(`&#123;&quot;status&quot;:500,&quot;key&quot;:&quot;: Error: Url illegal.&quot;&#125;`, &#123;</span><br><span class="line">      headers: response_header,</span><br><span class="line">    &#125;)&#125;</span><br><span class="line">    let stat,random_key</span><br><span class="line">    if (config.unique_link)&#123;</span><br><span class="line">      let url_sha512 = await sha512(req[&quot;url&quot;])</span><br><span class="line">      let url_key = await is_url_exist(url_sha512)</span><br><span class="line">      if(url_key)&#123;</span><br><span class="line">        random_key = url_key</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        stat,random_key=await save_url(req[&quot;url&quot;])</span><br><span class="line">        if (typeof(stat) == &quot;undefined&quot;)&#123;</span><br><span class="line">          console.log(await LINKS.put(url_sha512,random_key))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      stat,random_key=await save_url(req[&quot;url&quot;])</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(stat)</span><br><span class="line">    if (typeof(stat) == &quot;undefined&quot;)&#123;</span><br><span class="line">      return new Response(`&#123;&quot;status&quot;:200,&quot;key&quot;:&quot;/`+random_key+`&quot;&#125;`, &#123;</span><br><span class="line">      headers: response_header,</span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      return new Response(`&#123;&quot;status&quot;:200,&quot;key&quot;:&quot;: Error:Reach the KV write limitation.&quot;&#125;`, &#123;</span><br><span class="line">      headers: response_header,</span><br><span class="line">    &#125;)&#125;</span><br><span class="line">  &#125;else if(request.method === &quot;OPTIONS&quot;)&#123;  </span><br><span class="line">      return new Response(``, &#123;</span><br><span class="line">      headers: response_header,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const requestURL = new URL(request.url)</span><br><span class="line">  const path = requestURL.pathname.split(&quot;/&quot;)[1]</span><br><span class="line">  const params = requestURL.search;</span><br><span class="line"></span><br><span class="line">  console.log(path)</span><br><span class="line">  if(!path)&#123;</span><br><span class="line"></span><br><span class="line">    const html= await fetch(&quot;https://xytom.github.io/Url-Shorten-Worker/&quot;+config.theme+&quot;/index.html&quot;)</span><br><span class="line">    </span><br><span class="line">    return new Response(await html.text(), &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      &quot;content-type&quot;: &quot;text/html;charset=UTF-8&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const value = await LINKS.get(path);</span><br><span class="line">  let location ;</span><br><span class="line"></span><br><span class="line">  if(params) &#123;</span><br><span class="line">    location = value + params</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">      location = value</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(value)</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  if (location) &#123;</span><br><span class="line">    if (config.no_ref==&quot;on&quot;)&#123;</span><br><span class="line">      let no_ref= await fetch(&quot;https://xytom.github.io/Url-Shorten-Worker/no-ref.html&quot;)</span><br><span class="line">      no_ref=await no_ref.text()</span><br><span class="line">      no_ref=no_ref.replace(/&#123;Replace&#125;/gm, location)</span><br><span class="line">      return new Response(no_ref, &#123;</span><br><span class="line">      headers: &#123;</span><br><span class="line">        &quot;content-type&quot;: &quot;text/html;charset=UTF-8&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      return Response.redirect(location, 302)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  // If request not in kv, return 404</span><br><span class="line">  return new Response(html404, &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      &quot;content-type&quot;: &quot;text/html;charset=UTF-8&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">    status: 404</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">addEventListener(&quot;fetch&quot;, async event =&gt; &#123;</span><br><span class="line">  event.respondWith(handleRequest(event.request))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/20_11_21_16_202210201121910.png" alt="10"></p><h2 id="绑定自己的域名"><a href="#绑定自己的域名" class="headerlink" title="绑定自己的域名"></a>绑定自己的域名</h2><p><strong>添加一个a记录，解析到任意ip地址</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/20_11_21_14_202210201121147.png" alt="11"></p><p><strong>添加路由</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/20_11_21_19_202210201121560.png" alt="12"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/20_11_21_22_202210201121644.png" alt="13"></p><h2 id="访问域名"><a href="#访问域名" class="headerlink" title="访问域名"></a>访问域名</h2><h4 id="原版-1"><a href="#原版-1" class="headerlink" title="原版"></a>原版</h4><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/20_11_21_25_202210201121433.png" alt="14"></p><h4 id="修改版-1"><a href="#修改版-1" class="headerlink" title="修改版"></a>修改版</h4><p>我搭建的：<a href="https://url.xwsm.tk/url">https://url.xwsm.tk/url</a></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/20_11_42_22_202210201142697.png" alt="15"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> url </tag>
            
            <tag> Url-Shorten-Worker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kodi设置中文教程</title>
      <link href="/post/kodi.html"/>
      <url>/post/kodi.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>kodi怎么设置中文？kodi播放器支持电脑、电视、安卓等多个播放平台，能够让用户看电视、听音乐、玩游戏、看电影等，但是软件的界面是英文，要怎么设置成中文的呢？一起来看下具体的教程吧。</p><p><strong>kodi怎么设置中文？</strong></p><p>　　1、打开安装好的Kodi播放器，打开软件后，点击【设置】，如图所示：</p><p><img src="https://img.xitongbuluo.com/2022/0520/20220520032340464.png" alt="kodi怎么设置中文"></p><p>　　2、进入Kodi播放器设置界面，点击Interface选项。</p><p><img src="https://img.xitongbuluo.com/2022/0520/20220520032353104.png" alt="kodi怎么设置中文"></p><p>　　3、然后点击左侧的Skin选项，在右侧界面中点击Fonts选项</p><p><img src="https://img.xitongbuluo.com/2022/0520/20220520032400356.png" alt="kodi怎么设置中文"></p><p>　　4、在弹出的界面中选择第二个选项</p><p><img src="https://img.xitongbuluo.com/2022/0520/20220520032410758.png" alt="kodi怎么设置中文"></p><p>　　5、点击Kodi播放器设置界面中的Regional，点击右侧的Language选项。</p><p><img src="https://img.xitongbuluo.com/2022/0520/20220520032419246.png" alt="kodi怎么设置中文"></p><p>　　6、在弹出的界面中选择Chinese（Simple）选项。</p><p><img src="https://img.xitongbuluo.com/2022/0520/20220520032429443.png" alt="kodi怎么设置中文"></p><p>　　7、回到Kodi就变成中文界面了。</p><p><img src="https://img.xitongbuluo.com/2022/0520/20220520032441864.jpg" alt="kodi怎么设置中文"></p>]]></content>
      
      
      <categories>
          
          <category> 电视盒子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电视盒子 </tag>
            
            <tag> kodi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署homeassitant</title>
      <link href="/post/homeassitant.html"/>
      <url>/post/homeassitant.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="一、Docker介绍"><a href="#一、Docker介绍" class="headerlink" title="一、Docker介绍"></a>一、Docker介绍</h3><p> 我们知道，一台物理机需要运行多个程序，然而每个程序又需要各自不同的一堆依赖，所有程序全装上的话，整个物理机系统会变得混乱不堪，同时也容易出问题，使得我们后续维护比较困难。而如果利用docker，就可以直接下载一个镜像，投入使用，整个流程就变得简单了，详细介绍可以看官方文档。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/18_11_52_30_202210181152199.webp" alt="img"></p><blockquote><p>贴上地址：<a href="https://docs.docker.com/get-started/">https://docs.docker.com/get-started/</a></p></blockquote><h3 id="二、部署homeassitant"><a href="#二、部署homeassitant" class="headerlink" title="二、部署homeassitant"></a>二、部署homeassitant</h3><p><strong>本文采用的部署方式是：通过云服务器部署hass，之后通过hass集成小米智能家居设备。</strong></p><p>准备一台云服务器</p><ul><li>操作系统：CentOS 7.7 64位</li></ul><h4 id="1、安装docker"><a href="#1、安装docker" class="headerlink" title="1、安装docker"></a>1、安装docker</h4><p><strong>连接上云服务器后：</strong></p><blockquote><p>贴下命令</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 先切换到root 用户，先安装一些基本环境：</span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">#添加阿里云软件源</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">#然后安装 Docker 社区版</span><br><span class="line">yum -y install docker-ce</span><br><span class="line">#启动 docker</span><br><span class="line">systemctl start docker  </span><br><span class="line">#设定开机自动启动docker</span><br><span class="line">systemctl enable docker   </span><br><span class="line">#查看docker运行状态</span><br><span class="line">systemctl status docker   </span><br><span class="line">#查看 docker 版本信息</span><br><span class="line">docker version</span><br></pre></td></tr></table></figure><p>版本信息：</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/18_11_55_18_202210181155074.webp" alt="v2-985817552fabdebd756b699f284b6c8e_1440w"></p><ul><li>docker 服务显示为绿色的 running 了，表示运行中</li></ul><p><strong>需要注意的是，docker 默认要求必须使用 root 用户或者 docker 用户组里的用户，才能进行操作</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#把当前用户加入 docker 用户组</span><br><span class="line">sudo usermod -a -G docker 用户名     </span><br><span class="line">#重启 docker 服务</span><br><span class="line">sudo systemctl restart docker       </span><br></pre></td></tr></table></figure><h4 id="2、安装portainer容器管理图形界面"><a href="#2、安装portainer容器管理图形界面" class="headerlink" title="2、安装portainer容器管理图形界面"></a>2、安装portainer容器管理图形界面</h4><p>portainer可以选择性安装，只是比较方便操作</p><blockquote><p>贴下命令：</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#拉取最新镜像</span><br><span class="line">docker pull portainer/portainer </span><br><span class="line">#运行容器</span><br><span class="line">docker run -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</span><br><span class="line">#参数说明：</span><br><span class="line">-d：容器在后台运行；</span><br><span class="line">-p 9000:9000：把容器的9000端口映射到宿主的9000端口，这是访问portainer管理页面需要用的端口</span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock ：把宿主机目录挂载到容器中同样的位置</span><br><span class="line">-v portainer_data:/data #把宿主机portainer_data数据卷挂载到容器/data目录</span><br><span class="line"></span><br><span class="line">访问：IP+9000端口，就会看到 portainer 管理页面了</span><br></pre></td></tr></table></figure><p><strong>portainer 管理页面：</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/18_11_52_53_202210181152963.webp" alt="img"></p><h4 id="3、部署hass"><a href="#3、部署hass" class="headerlink" title="3、部署hass"></a>3、部署hass</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#拉取hass的最新版镜像(注意：根据自己需求选择对应版本，并不是越新越好)</span><br><span class="line">docker pull homeassistant/home-assistant:latest</span><br><span class="line">#创建容器并运行</span><br><span class="line">docker run -d --name=&quot;hass&quot; -v /home/hass/config:/config -p 8123:8123 -p homeassistant/home-assistant:latest</span><br><span class="line">解释:</span><br><span class="line">-d：表示在后台运行</span><br><span class="line">–name：给容器设置一个名称，用于识别，这里起名叫做hass</span><br><span class="line">-v：配置目录映射（容器内的指定目录直接映射到本地主机的对应目录，比如上面那句命令，意思就是将容器里hass的 config 目录映射到 /home/hass/config 这个目录里面）</span><br><span class="line">-p：映射端口（将容器内的8123端口直接映射到物理机的8123端口，这样服务器的IP地址+端口号即可访问hass页面）</span><br><span class="line">最后就是运行刚才下载的容器镜像了，对于其他的版本了，注意要加上tag,避免自动下载最新版本。</span><br></pre></td></tr></table></figure><h4 id="4、访问hass"><a href="#4、访问hass" class="headerlink" title="4、访问hass"></a>4、访问hass</h4><ul><li>访问页面</li></ul><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/18_11_53_0_202210181153968.webp" alt="img"></p><p><strong>到此，hass就在云服务器就部署好了，下面通过Hass，连接智能设备，本文通过连接小米智能设备来演示。</strong></p><h3 id="三、连接小米智能家居设备"><a href="#三、连接小米智能家居设备" class="headerlink" title="三、连接小米智能家居设备"></a>三、连接小米智能家居设备</h3><h4 id="1、安装HACS"><a href="#1、安装HACS" class="headerlink" title="1、安装HACS"></a>1、安装HACS</h4><p>安装HACS(Home Assistant Community Store,一个商店，集成丰富，依托于GitHub。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#进入hass目录,安装hacs</span><br><span class="line">docker exec -it hass bash</span><br><span class="line">wget -p -o - https://get.hacs.xyz |bash -</span><br></pre></td></tr></table></figure><p>重启hass</p><p><img src="https://pic4.zhimg.com/80/v2-7e682658d64aa8e988afa00e9ed6e343_1440w.webp" alt="img"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/18_11_53_8_202210181153467.webp" alt="img"></p><p>经过与GitHub授权访问后，你可以将HACS添加进组件中了。</p><p><img src="https://pic1.zhimg.com/80/v2-78ef599c774e3d094a37cdd6e3c21120_1440w.webp" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-81651554d83a83b7a5890ebd3cf507a9_1440w.webp" alt="img"></p><h4 id="2、安装xioami-miot"><a href="#2、安装xioami-miot" class="headerlink" title="2、安装xioami_miot"></a>2、安装xioami_miot</h4><ul><li><strong>通过hacs自动安装</strong></li></ul><p>打开 Home Assistant 的 HACS 页面。</p><p>搜索xiaomi_miot</p><p>点击集成。</p><p>点击右下角的浏览并添加存储库。</p><p>在新打开的页面中找到Xiaomi MIoT，安装即可。</p><ul><li><strong>手动安装</strong></li></ul><p>1.下载插件 zip 压缩包</p><blockquote><p>贴上： <a href="https://link.zhihu.com/?target=https://github.com/ha0y/xiaomi_miot_raw/archive/refs/heads/master.zip">https://github.com/ha0y/xiaomi_miot_raw&#x2F;archive&#x2F;refs&#x2F;heads&#x2F;master.zip</a></p></blockquote><p>2.依次打开压缩包中的xiaomi_miot_raw-master&#x2F;custom_components文件夹。</p><p>3.将该文件夹中的xiaomi_miot_raw文件夹拷贝至自己 hass 安装目录的custom_components文件夹,即替换掉原来的xiaomi_miot_raw</p><p>4.重新启动 Home Assistant。</p><h4 id="3、集成小米智能设备"><a href="#3、集成小米智能设备" class="headerlink" title="3、集成小米智能设备"></a>3、集成小米智能设备</h4><ul><li>配置界面-&gt;添加集成-&gt;搜索xiaomi_miot-&gt;登录小米账号</li><li>自动识别该账号下的智能设备</li><li>添加</li></ul><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/18_11_53_16_202210181153763.webp" alt="img"></p><p>现在，我们可以通过部署在云服务器上的Hass，来操控我们的小米智能家居设备了，所以索性买了灯泡和台灯试了试</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/18_11_53_18_202210181153727.webp" alt="img"></p><p>苹果用户的话，也可以直接下载Hass</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/18_11_53_20_202210181153635.webp" alt="img"></p><p>当然，直接集成homekit,也可以同步小米的设备，能更方便的操作。大家可以试试</p><h3 id="四、docker常用命令"><a href="#四、docker常用命令" class="headerlink" title="四、docker常用命令"></a>四、docker常用命令</h3><blockquote><p>附上docker常用的一些操作指令:</p></blockquote><p>docker images 查看镜像</p><p>docker rmi 镜像id 删除镜像</p><p>docker ps-a 查看已有容器</p><p>docker start 容器id 运行容器</p><p>docke ps 显示所有运行中的容器</p><p>docker ps -a 显示所有容器</p><p>docker rm 容器 ID 或名称 删除容器</p><p>docker start 容器 ID 或名称 启动指定容器</p><p>docker stop 容器 ID 或名称 停止指定容器</p><p>docker restart 容器 ID 或名称 重启指定容器</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> homeassitant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debian10 创建用户、用户组、切换用户</title>
      <link href="/post/Debian10.html"/>
      <url>/post/Debian10.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 新建用户组</span><br><span class="line">groupadd wang</span><br><span class="line"># 新建用户并加入用户组  </span><br><span class="line"># -m 自动创建用户主目录 </span><br><span class="line"># -g 加入用户组</span><br><span class="line"># -s 用户的登录shell</span><br><span class="line"># -d 用户主目录</span><br><span class="line">useradd wang -m -g wang -s /bin/bash -d /home/wang</span><br><span class="line"># 设置密码</span><br><span class="line">passwd wang</span><br><span class="line"># 设置用户允许使用sudo</span><br><span class="line">/sbin/usermod -aG sudo wang</span><br><span class="line"># 切换用户</span><br><span class="line">su -l wang</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Debian </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透神器zerotier的食用方式</title>
      <link href="/post/zerotier.html"/>
      <url>/post/zerotier.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="内网穿透神器zerotier，从会用到用好"><a href="#内网穿透神器zerotier，从会用到用好" class="headerlink" title="内网穿透神器zerotier，从会用到用好"></a>内网穿透神器zerotier，从会用到用好</h3><p>大家好，今天跟大家深入的探讨一下我一直在用的内网穿透工具zerotier。</p><p>至于其他的内网穿透方案，都略逊于zerotier方案，要么是太复杂，要么是需要购买服务器自建服务，要么是稳定性不如zerotier，后面有机会逐一给大家介绍。</p><p>我知道很多朋友已经使用过zerotier，但是也请不要走开，我会说一些大家很少听到的zerotier的事情，一方面方便大家排障，更重要的是提高内网穿透的速度以及使用的方便度。</p><h3 id="zerotier原理"><a href="#zerotier原理" class="headerlink" title="zerotier原理"></a><strong>zerotier原理</strong></h3><p>为照顾没使用过zerotier的朋友，我先给大家介绍下zerotier的工作原理</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/18_10_31_26_202210181031039.png" alt="img"></p><p>zerotier内网穿透的核心是UDP打洞，不论两台设备是否在同一个内网中，只要这两个局域网的NAT方式达到了打洞的要求，就可以进行打洞，也就是建立一条隧道</p><p>打洞技术的原理比较简单，就是NAT内网的节点需要在NAT上建立自己的一条转发映射关系(这就是所谓的在NAT上打下一个洞)，然后外网的节点就通过这个”洞”来进行通信。</p><h3 id="提高zerotier性能"><a href="#提高zerotier性能" class="headerlink" title="提高zerotier性能"></a>提高zerotier性能</h3><p>了解了zerotier工作原理总结一下提高zerotier性能的方法</p><p>1、网络环境，选择相对优秀的运营商，以山东为例，联通直接给公网ip，首选；电信公网ip需要申请，也可；移动铁通嘛，NAT方式不适合打洞，据说有的能够打洞成功，但是大部分情况是无法打洞的；</p><p>即使你有独立ip，zerotier也是需要的，因为你不可能把你网络中所有的设备都开放到公网，你要是真的那么做，就等着被入侵吧。</p><p>2、zerotier增加路由条目，每个内网环境只需要增加一条路由，登录一台设备到zerotier中就可以被其他网络访问到，不需要每个提供服务的设备单独安装，安装zerotier的首选设备是路由，现在许多路由系统内置了zerotier，不需要单独安装；</p><p>3、理论上任何一台设备都可以作为路由使用，让许可设备通过内网ip访问到，但是不同设备允许转发的配置不一样的，openwrt的比较简单，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iptables -I FORWARD -i zt3jnsuifh -j ACCEPT</span><br><span class="line">iptables -I FORWARD -o zt3jnsuifh -j ACCEPT</span><br><span class="line">iptables -t nat -I POSTROUTING -o zt3jnsuifh -j MASQUERADE</span><br><span class="line"># zt3jnsuifh 为虚拟网卡名字</span><br><span class="line"># 通过 ip a可以查看</span><br><span class="line"># 同时要去常规设置，允许转发</span><br></pre></td></tr></table></figure><p>4、在打洞失败的情况下，所有的流量都会通过zerotier的公共服务进行数据中转，而zerotier是在海外的，如果你在中国大陆，想要提速，就需要建立moon服务器，moon服务提供的功能相当于frp，国内的vps相对来说价格较高，可以考虑购买香港服务器</p><p>在你网络情况比较好的情况下，是不需要自建moon服务器，因为每次打洞都成功，moon根本不会被访问到。</p><p>以上就是使用zerotier的一些要点</p><p>zerotier的安装教程，视频里我就不说了，我会写到文档里，大家需要的就去看吧</p><p>我只说下，使用的流程</p><p>1、申请zerotier账号，开通网络，免费额度足够你用了，查看虚拟网络id</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/18_10_31_28_202210181031360.png" alt="img"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/18_10_31_31_202210181031259.png" alt="img"></p><p>2、如果你路由器内置了zerotier，直接填上申请到的虚拟网络id</p><p>3、打开zerotier后台，勾选加入的路由设备</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/18_10_31_50_202210181031774.png" alt="img"></p><p>4、windows端安装zerotier较为简单，exe安装包直接装，启动后加入网络，填上申请到的虚拟网络id</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/10/18_10_31_33_202210181031519.png" alt="img"></p><p>5、linux端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s &lt;https://install.zerotier.com&gt; | sudo bash</span><br></pre></td></tr></table></figure><p>加入网络</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#将网络ID替换成你自己的即可</span><br><span class="line">sudo zerotier-cli join  8bd5124fd****3d4</span><br><span class="line">sudo systemctl enable zerotier-one.service</span><br></pre></td></tr></table></figure><p>6移动端，直接搜索zerotier one安装，加入网络即可</p><p>记得，新设备加入都要去zerotier后台许可。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zerotier </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu开启root登陆</title>
      <link href="/post/Ubuntu-root.html"/>
      <url>/post/Ubuntu-root.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>增加Root密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure><p>开启登陆权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/ssh/sshd_config</span><br><span class="line">PermitRootLogin prohibit-password改成PermitRootLogin yes</span><br></pre></td></tr></table></figure><p>重启系统</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> root </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何配置网络优先顺序，调整 Windows 10 网卡优先级</title>
      <link href="/post/network.html"/>
      <url>/post/network.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/28_20_2_6_202209282002924.jpeg" alt="img"></p><p>在 Windows 10 系统中，如果您的设备有多块网卡（如<strong>有线连接</strong>和 <strong>Wi-Fi 无线连接</strong>），则每个网卡都将根据其<strong>网络跃点数</strong>自动接收<strong>优先级值</strong>，该指标定义了网卡将用于发送和接收数据包的主连接的网络流量。</p><p>虽然在绝大多数情况下，Windows 10 系统都能够自动决策出应该优先使用的最佳网络连接顺序。但根据用户的使用场景不同，您可能会需要手动配置网络适配器的优先级。<em>例如，当你的 Windows 10 PC 同时连接了网线和 Wi-Fi，而又需要优先使用无线连接时。</em></p><p>当然，您可以通过禁用有线网卡的方式来优先使用无线 Wi-Fi 连接，但这却不是最佳解决方案。相反，更为直接和优化的解决办法是<strong>调整网卡跃点指标</strong>，以指定 Windows 10 PC 使用多网卡的优先级顺序，而这样的调整只需在「控制面板」或 PowerShell 中简单操作就可以实现。</p><p>下面系统极客就为大家介绍更改网络适配器优先级的步骤，以便在使用多块网卡时 Windows 10 自动使用您配置的首选网卡进行网络连接。</p><h2 id="使用「控制面板」更改网卡优先级"><a href="#使用「控制面板」更改网卡优先级" class="headerlink" title="使用「控制面板」更改网卡优先级"></a>使用「控制面板」更改网卡优先级</h2><p>如果您想更改 Windows 10 优先连接网络的顺序，请执行以下操作：</p><p>1、使用 Windows + I 快捷键打开「Windows 设置」——「网络和 Internet」——点击左侧「状态」——点击右侧中的「更改适配器选项」按钮</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/28_20_2_20_202209282002053.png" alt="img"></p><p>2、右击<strong>要调整优先级的网卡</strong>——选择「属性」</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/28_20_2_45_202209282002611.png" alt="img"></p><p>3、在弹出的网卡属性列表中选中「Internet 协议版本 4（TCP&#x2F;IPv4）」——点击「属性」按钮（如果你使用 IPv6 应该知道怎么选吧！）</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/28_20_3_2_202209282003895.png" alt="img"></p><p>4、在「常规」选项卡中点击「高级」按钮</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/28_20_3_13_202209282003841.png" alt="img"></p><p>5、取消勾选「自动跃点」——在「接口跃点数」中手动指定一个当前网卡的优先级值。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/28_20_3_27_202209282003164.png" alt="img"></p><blockquote><p>提示：接口跃点数值越低，代表网卡或网络优先级越高；反之数值越大，优先级越低。</p></blockquote><p>完成上述配置步骤后，Windows 10 将会根据您手动更改后的配置优先考虑网络流量。任何时候需要恢复到 Windows 10 自动决策，只需再<strong>启用自动跃点</strong>即可。</p><h2 id="使用PowerShell更改网卡优先级"><a href="#使用PowerShell更改网卡优先级" class="headerlink" title="使用PowerShell更改网卡优先级"></a>使用PowerShell更改网卡优先级</h2><p>您也可以在 PowerShell 中通过如下步骤更改多网卡设备的网络适配器优先级：</p><p>1、使用 Windows + X 快捷键打开「快捷菜单」——选择打开「Windows PowerShell（管理员）」</p><p>2、执行如下命令列出网卡索引号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-NetIPInterface</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/28_20_3_50_202209282003415.png" alt="img"></p><p>3、使用如下命令就可以配置指定网卡（索引号）的优先级值，即直接配置<strong>接口跃点数</strong>值：</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-NetIPInterface -InterfaceIndex 17 -InterfaceMetric 10</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/28_20_4_0_202209282004198.png" alt="img"></p><blockquote><p>上述命令中的 -InterfaceIndex 参数用于指定特定网卡的索引号，-InterfaceMetric 用于指定接口跃点数。</p></blockquote><p>完成上述配置步骤后，Windows 10 将会根据您手动更改后的配置优先考虑网络流量。</p><p>任何时候需要恢复到 Windows 10 自动决策，可以在 PowerShell 中执行如下命令来恢复到自动跃点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-NetIPInterface -InterfaceIndex 17 -AutomaticMetric enabled</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/28_20_4_11_202209282004171.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022-07-24更新的Breed使用说明</title>
      <link href="/post/220724breed.html"/>
      <url>/post/220724breed.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>此breed是由恩山大佬<a href="https://www.right.com.cn/forum/space-uid-200302.html">hackpascal</a>开发，向大神致敬</p><p>下载地址：<a href="https://breed.hackpascal.net/">https://breed.hackpascal.net</a></p><h2 id="更新说明"><a href="#更新说明" class="headerlink" title="更新说明"></a>更新说明</h2><p>2022年07月24日更新，修订号 r1416，git提交记录 46ae2a1</p><p>更新内容：<br>- 重写整个 Web UI 更新框架：<br>　1. 提供更完善的 NAND 支持：现在全部使用 NAND 的版本均支持完善的坏块管理功能，包括升级时自动跳过坏块、备份编程器固件时自动跳过坏块。同时使得升级 NAND 编程器固件的功能实用化（从这个版本开始，Breed 将只支持升级由新版本的备份编程器固件功能备份出的“可升级编程器固件”）。<br>　2. 提供更灵活的升级文件选择：现在部分机型支持升级Bootloader、固件、ART&#x2F;EEPROM以外的文件，例如单独的kernel&#x2F;rootfs或者机器的出厂key。<br>　3. 提供更多的固件备份选择：<br>　　a) 对于 NAND 机器，支持备份两种类型的编程器固件：可升级的编程器固件和Raw 数据。这两种编程器固件数据均包含 OOB 数据。其中可升级编程器固件按照分区表消除了坏块，且备份时开启了ECC；Raw 数据则是NAND中的原始数据，未开启ECC，且保留坏块数据。<br>　　　　　　b) 根据机型的不同，部分机型会提供特定分区数据的备份功能。<br>　　　　　并非全部机型都将立即使用该新 Web UI，已经使用的机型将在后面列出。其余部分将逐渐更新。</p><p>- 修复 MT7621 NAND 驱动在部分情况下读取数据出错的问题<br>- 新增 XM25QH128C 支持<br>- HC5962&#x2F;B70 专用版支持备份和升级 bdinfo<br>- 小米R3G支持直接升级OpenWrt固件的kernel1和rootfs0；现在OpenWrt、Padavan和原厂固件默认从kernel1启动；PandoraBox固件默认从kernel0启动；支持备份和更新Bdata分区；环境变量和原厂共用同一分区。<br>- DW33D 专用版支持升级和启动 NAND 版本的 OpenWrt 固件<br>- 新增极路由4Pro HC5961 专用版，默认使用 512MB 内存时序<br>- 新增 ZTE E8820S 专用版，支持极路由4 HC5962&#x2F;B70 固件；支持 MTK SDK 分区的固件；支持启动原厂固件以及升级原厂编程器固件。<br>- 使用新 Web UI的机型的版本号升级至 1.2</p><p>更新的文件：<br>- breed-ar9344-wndr4300-nand.bin<br>- breed-ar9344-wndr4300-spi.bin<br>- breed-ar9344-wndr4300-spi-recovery.bin<br>- breed-mt7621-creativebox-v1.bin<br>- breed-mt7621-hiwifi-hc5961.bin<br>- breed-mt7621-hiwifi-hc5962.bin<br>- breed-mt7621-r6220.bin<br>- breed-mt7621-xiaomi-r3g.bin<br>- breed-mt7621-zte-e8820s.bin<br>- breed-qca953x.bin<br>- breed-qca9558-dw33d.bin<br>- breed-qca9563-dir-859-a.bin<br>- breed-qca9563-wndr4500v3.bin<br>- breed-rt3052-hg255d.bin</p><p>说明：<br>- 小米R3G 如果要直接升级 OpenWrt 的 kernel1和rootfs0，需要将闪存布局选择为 “小米 R3G OpenWrt”；如果要升级 Bdata，需要将闪存布局选择为 “小米 R3G 原厂”。<br>- DW33D 需要在 “固件启动设置” 页面选择从 NAND 启动 OpenWrt 还是从 SPI-NOR 启动原厂固件。从 OpenWrt 固件切换回原厂固件时，需要同时回复一次出厂设置，以免原厂固件挂载 jffs2 出错。<br>- 所有使用 NAND 的专用版，都只支持升级 OpenWrt 的 -factory.bin，不支持 TAR 类型的 -sysupgrade.bin。<br>- 因作者工作原因，精力有限，因此剩余的型号将逐步更新至 1.2 版本。此外如果 TP-LINK 的专用版因文件体积超过限制，将停止更新。<br>- E8820 支持的 MTK SDK 固件分区表为：<br>　512k(u-boot),512k(u-boot-env),256k(factory),4096k(kernel),-(ubi)</p><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><blockquote><p>由于此次大更新造成刷机方式有所改变，我这里说一下breed-mt7621-xiaomi-r3g.bin，由于<code>小米红米ac2100、小米r3g、小米r4</code>这几款用的都是这个breed文件，所以受影响的也是这几款，刷机方式与之前有所不同。</p></blockquote><blockquote><p>此版本breed优点多多，建议升级，可直刷原厂固件，可跳过坏块（小米红米ac2100刷机不再受影响）</p></blockquote><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/24_9_6_11_202209240906533.png"></p><h3 id="刷小米原厂固件"><a href="#刷小米原厂固件" class="headerlink" title="刷小米原厂固件"></a>刷小米原厂固件</h3><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/24_9_13_8_202209240913461.png"></p><h3 id="刷Padavan固件"><a href="#刷Padavan固件" class="headerlink" title="刷Padavan固件"></a>刷Padavan固件</h3><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/24_9_15_34_202209240915952.png"></p><h3 id="刷openwrt固件"><a href="#刷openwrt固件" class="headerlink" title="刷openwrt固件"></a>刷openwrt固件</h3><p>刷OpenWrt需要3个文件，<code>kernel1.bin、rootfs0.bin、sysupgrade.bin</code></p><ul><li><p>闪存布局选OpenWrt，选kernel1.bin和rootfs0.bin，再点上传，然后更新，</p></li><li><p>自动重启完成后，进入OpenWer后台管理页面更新sysupgrade.bin即可。</p></li></ul><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/24_9_23_18_202209240923882.png"></p><p><code>kernel1.bin、rootfs0.bin、sysupgrade.bin</code>文件，固件编译者就有，一般都有提供</p><p>我的网盘有提供，可直接使用，下载地址：<a href="https://pan.wwang.pw/">https://pan.wwang.pw</a></p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> breed </tag>
            
            <tag> 刷机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩客云刷Armbian，安装docker+CasaOS+OpenWrt</title>
      <link href="/post/onecloud.html"/>
      <url>/post/onecloud.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Armbian系统特点：刷入emmc，支持HDMI、双USB，默认不安装docker可自行安装只需执行 apt install docker.io 命令即可。</p><blockquote><p><a href="https://pan.w2aa.ml/zh-CN/router/Onecloud/"><strong>全套刷机工具</strong></a>下载</p></blockquote><h2 id="Armbian刷入方法"><a href="#Armbian刷入方法" class="headerlink" title="Armbian刷入方法"></a>Armbian刷入方法</h2><blockquote><p>刷入方法：电脑连接玩客云靠近hdmi的USB口，短接刷机触点或者按住复位键的同时给玩客云通电，即可使用Aml Burn Tool软件直接烧录固件至玩客云。<br>初始账号密码  root   1234</p></blockquote><blockquote><p>刷机包源下载地址：<a href="https://github.com/hzyitc/armbian-onecloud/releases">https://github.com/hzyitc/armbian-onecloud/releases</a> 注意后缀带Burn的才是直刷包，其他都是USB启动包。</p></blockquote><p>下图是老款主板的短接方式，新款主板有所不懂，度娘上很多教程。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/22_17_51_44_202209221751791.png"></p><p>(特别注意：USB Burning Tool 请使用2.1.6.8版本，其他版本可能出现超时等报错）</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/22_17_52_21_202209221752709.png"></p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get upgrade</span><br></pre></td></tr></table></figure><p>使用docker安装脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br></pre></td></tr></table></figure><p>装可视面板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart always --name fast -p 8081:8081 -d -v /var/run/docker.sock:/var/run/docker.sock wangbinxingkong/fast</span><br></pre></td></tr></table></figure><p>安装完成后在浏览器访问 http:&#x2F;&#x2F;服务器IP地址或域名:8081 ，默认用户名和密码是admin。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/22_18_3_18_202209221803659.png"></p><h2 id="安装青龙面板"><a href="#安装青龙面板" class="headerlink" title="安装青龙面板"></a>安装青龙面板</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit \</span><br><span class="line">  --name qinglong \</span><br><span class="line">  --hostname qinglong \</span><br><span class="line">  -p 5700:5700 \</span><br><span class="line">  -v $PWD/docker/ql/config:/ql/config \</span><br><span class="line">  -v $PWD/docker/ql/log:/ql/log \</span><br><span class="line">  -v $PWD/docker/ql/db:/ql/db \</span><br><span class="line">  -v $PWD/docker/ql/scripts:/ql/scripts \</span><br><span class="line">  -v $PWD/docker/ql/jbot:/ql/jbot \</span><br><span class="line">  --restart always \</span><br><span class="line">  whyour/qinglong:latest</span><br></pre></td></tr></table></figure><p>安装完成后在浏览器访问 http:&#x2F;&#x2F;服务器IP地址或域名:5700 。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/22_18_4_30_202209221804857.png"></p><h2 id="安装casaos"><a href="#安装casaos" class="headerlink" title="安装casaos"></a>安装casaos</h2><p>casaos官网：<a href="https://www.casaos.io/">https://www.casaos.io</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.casaos.io | bash</span><br></pre></td></tr></table></figure><p>安装完成后在浏览器访问 http:&#x2F;&#x2F;服务器IP地址或域名</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/22_18_1_33_202209221801687.gif"></p><h2 id="安装OpenWrt"><a href="#安装OpenWrt" class="headerlink" title="安装OpenWrt"></a>安装OpenWrt</h2><p>🔵打开网卡混杂模式</p><p>ip link set eth0 promisc on</p><p>🔵创建网络</p><p>docker network create -d macvlan –subnet&#x3D;10.1.1.0&#x2F;24 –gateway&#x3D;10.1.1.1 -o parent&#x3D;eth0 macnet</p><p>🔘[↑自己根据 玩客云 所在网段修改，如：玩客云IP:10.1.2.11，则10.1.1.0&#x2F;24 改成 10.1.2.0&#x2F;24，10.1.1.1改成主路由地址]</p><p>🔵拉取 OpenWRT 镜像</p><p>docker pull wfnb&#x2F;onecloud:22-6-10</p><p>🔵创建容器</p><p>docker run -d –name&#x3D;OpenWrt –restart always –network macnet –ip 10.1.1.13 –privileged wfnb&#x2F;onecloud:22-6-10 &#x2F;sbin&#x2F;init</p><p>🔘–name&#x3D;OpenWrt 其中OpenWrt是容器名称，可以更改成你想要的，容器名称注意不要和其他容器一样，会冲突</p><p>🔘–ip 10.1.1.13 其中10.1.1.13是容器IP，可以更改成你想要的，容器IP不要重复，这一项可删除</p><p>🔵修改OpenWrt IP</p><p>docker exec OpenWrt sed -e “s&#x2F;10.1.1.13&#x2F;你想分配给OpenWrt的IP&#x2F;“ -i &#x2F;etc&#x2F;config&#x2F;network</p><p>🔘OpenWrt 是容器名称，和你创建容器时的一致</p><p>🔘镜像设置的默认IP是10.1.1.13，可通过该命令修改</p><p>🔘22-4-4版本的镜像的默认IP是10.1.1.11，需将上述10.1.1.13改为10.1.1.11</p><p>🔵管理密码是 password</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/22_18_7_51_202209221807288.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 玩客云 </tag>
            
            <tag> Armbian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenWrt-21.02 校园网专用固件合集【集成锐捷闪讯】</title>
      <link href="/post/op-xiaoyuan.html"/>
      <url>/post/op-xiaoyuan.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="🍈固件说明"><a href="#🍈固件说明" class="headerlink" title="🍈固件说明"></a>🍈固件说明</h2><h3 id="基于immortalwrt-OpenWrt-21-02源码编译，5-4内核"><a href="#基于immortalwrt-OpenWrt-21-02源码编译，5-4内核" class="headerlink" title="基于immortalwrt-OpenWrt-21.02源码编译，5.4内核"></a>基于<a href="https://github.com/immortalwrt/immortalwrt">immortalwrt-OpenWrt-21.02</a>源码编译，5.4内核</h3><ul><li>集成校园网相关插件：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">luci-app-netkeeper</span><br><span class="line">luci-app-mentohust</span><br><span class="line">luci-app-minieap</span><br><span class="line">luci-app-syshu3c</span><br></pre></td></tr></table></figure><ul><li>集成多拨组件：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">luci-app-mwan3</span><br><span class="line">luci-app-mwan3helper</span><br><span class="line">luci-app-syncdial</span><br></pre></td></tr></table></figure><ul><li>集成两款主题：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">luci-theme-argon</span><br><span class="line">luci-theme-bootstrap</span><br></pre></td></tr></table></figure><h2 id="🍉使用说明"><a href="#🍉使用说明" class="headerlink" title="🍉使用说明"></a>🍉使用说明</h2><blockquote><p><strong>更新完成后，重置一下路由器，清浏览器缓存，避免各种问题</strong></p><h3 id="OpenWrt固件"><a href="#OpenWrt固件" class="headerlink" title="OpenWrt固件"></a>OpenWrt固件</h3><ul><li>管理ip：192.168.5.1  </li><li>用户名和密码：root&#x2F;password</li><li>无线wifi名称：OpenWrt</li><li>无线wifi密码：password</li></ul></blockquote><h2 id="🍊本固件仅供学习研究使用，请勿用于商业用途，转载请说明出处，请尊重劳动果实。"><a href="#🍊本固件仅供学习研究使用，请勿用于商业用途，转载请说明出处，请尊重劳动果实。" class="headerlink" title="🍊本固件仅供学习研究使用，请勿用于商业用途，转载请说明出处，请尊重劳动果实。"></a>🍊本固件仅供学习研究使用，请勿用于商业用途，转载请说明出处，请尊重劳动果实。</h2><h2 id="🥭如需定制固件，请联系QQ：85151535"><a href="#🥭如需定制固件，请联系QQ：85151535" class="headerlink" title="🥭如需定制固件，请联系QQ：85151535"></a>🥭如需定制固件，请联系QQ：85151535</h2><h2 id="🍓固件下载地址：https-op-w2nn-ml"><a href="#🍓固件下载地址：https-op-w2nn-ml" class="headerlink" title="🍓固件下载地址：https://op.w2nn.ml"></a>🍓固件下载地址：<a href="https://op.w2nn.ml/">https://op.w2nn.ml</a></h2><blockquote><p><strong>芝麻开门暗号进群获取，QQ①群：661053178</strong></p></blockquote><hr><p><strong>截图</strong>⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/20_11_44_37_202209201144137.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/20_11_46_13_202209201146732.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/20_11_48_15_202209201148646.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/20_11_49_33_202209201149314.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/20_11_50_42_202209201150423.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/20_11_47_6_202209201147569.png"></p>]]></content>
      
      
      <categories>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> 校园网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极路由x c526a刷机教程完整版</title>
      <link href="/post/hiwifi-x.html"/>
      <url>/post/hiwifi-x.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>灵活的双手，会思考的大脑</li><li>路由器LAN口用网线连接电脑，WAN口连光猫或上级路由器，配置好网络。</li><li>下载<a href="https://pan.wwang.pw/%F0%9F%94%A5OpenWrt_LEAN/%E6%9E%81%E8%B7%AF%E7%94%B1%E7%B3%BB%E5%88%97/%E6%9E%81%E8%B7%AF%E7%94%B1X%EF%BC%88c526a%EF%BC%89">极路由x全套刷机工具</a>，如地址失效，加群获取即可。</li><li>QQ交流群：661053178</li></ol><h2 id="获取SSH权限"><a href="#获取SSH权限" class="headerlink" title="获取SSH权限"></a>获取SSH权限</h2><ol><li>访问<a href="https://www.hiwifi.wtf/">https://www.hiwifi.wtf/</a></li><li>访问<a href="http://192.168.199.1/local-ssh/">http://192.168.199.1/local-ssh/</a></li><li>访问<a href="http://192.168.199.1/cgi-bin/turbo/proxy/router_info">http://192.168.199.1/cgi-bin/turbo/proxy/router_info</a></li><li>第2步获取的token复制到第1步的空白框里，第3步获取的uuid复制到第1步的uuid空白框里，再点提交查询</li><li>再把获取到的cloud_token复制到第2步的空白框里，再点提交，多点几次即可。</li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/20_12_39_52_202209201239958.gif"></p><h2 id="刷入pb-boot"><a href="#刷入pb-boot" class="headerlink" title="刷入pb-boot"></a>刷入pb-boot</h2><p>使用winscp登陆路由器，默认情况为IP 192.168.199.1 用户名 root 密码 admin</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/20_12_46_40_202209201246901.png"></p><p>再把pb-boot-ipq40xx-hiwifi-c526a.appsbl文件拖到tmp目录下</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/20_12_49_41_202209201249227.png"></p><p>再执行命令：<code>mtd write /tmp/pb-boot-ipq40xx-hiwifi-c526a.appsbl /dev/mtd9</code></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/20_12_51_19_202209201251041.png"></p><p>下图提示提示不要慌，pb-boot已经刷入了。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/20_12_56_54_202209201256015.png"></p><h2 id="进pb-boot刷入潘多拉固件"><a href="#进pb-boot刷入潘多拉固件" class="headerlink" title="进pb-boot刷入潘多拉固件"></a>进pb-boot刷入潘多拉固件</h2><ol><li>拔掉路由器电源，按住LAN1口旁边复位（Reset）按钮不要松手，然后插入电源，通电后大概10秒松开复位键，此时路由器的LED灯应该是蓝色快闪。</li><li>打开浏览器访问192.168.1.1，在pb-boot页面上传并刷入PandoraBox-qualcomm-ipq40xx-hiwifi-c526a-2021-04-01-git-0c72bdbd9-squashfs-sysupgrade.bin</li></ol><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/20_13_1_50_202209201301570.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/20_13_2_1_202209201302739.png"></p><h2 id="进潘多拉刷入openwrt解锁固件"><a href="#进潘多拉刷入openwrt解锁固件" class="headerlink" title="进潘多拉刷入openwrt解锁固件"></a>进潘多拉刷入openwrt解锁固件</h2><p>等待路由器重启完成后，访问192.168.1.1，用户名 root 密码 admin</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/20_13_5_31_202209201305905.png"></p><p>打开Winscp选scp协议进路由器，默认情况为IP 192.168.1.1 用户名 root 密码 admin</p><p>再把openwrt-ipq40xx-hiwifi_c526a-unlock-squashfs-nand-factory.ubi拖入tmp目录，</p><p>再执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mtd erase ubi</span><br><span class="line">mtd write /tmp/openwrt-ipq40xx-hiwifi_c526a-unlock-squashfs-nand-factory.ubi ubi</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/20_13_15_56_202209201315491.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/20_13_16_41_202209201316306.png"></p><p>再插拔电源重启路由器。</p><h2 id="刷入128m-nand-专用u-boot"><a href="#刷入128m-nand-专用u-boot" class="headerlink" title="刷入128m nand 专用u-boot"></a>刷入128m nand 专用u-boot</h2><p>等待路由器启动完成，打开浏览器网址栏访问192.168.1.1，用户名：root 密码：password。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/20_13_23_43_202209201323136.png"></p><p>打开Winscp选scp协议进路由器，默认情况为IP 192.168.1.1 用户名 root 密码 password</p><p>把<code>mibib.bin</code>和<code>openwrt-ipq40xx-u-boot-stripped.elf</code>拖入tmp目录，</p><p>打开putty，连接类型选SSH，进路由器，默认情况为IP 192.168.1.1 用户名 root 密码 password</p><p>再执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">mtd write mibib.bin MIBIB</span><br><span class="line">mtd erase APPSBL</span><br><span class="line">mtd write openwrt-ipq40xx-u-boot-stripped.elf APPSBL</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/20_13_31_50_202209201331960.png"></p><h2 id="进入u-boot刷openwrt固件"><a href="#进入u-boot刷openwrt固件" class="headerlink" title="进入u-boot刷openwrt固件"></a>进入u-boot刷openwrt固件</h2><ul><li>设置电脑网卡固定IP 192.168.1.2，掩码 255.255.255.0</li></ul><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/20_13_35_6_202209201335688.png"></p><ul><li><p>拔掉电源，按住LAN1口旁边复位（Reset）按钮不要松手，然后插入电源，通电后大概5秒松开复位键。（按住Reset时一定要等到闪烁后长亮再松开就可以了，这里可能需要多次尝试）</p></li><li><p>打开浏览器访问192.168.1.1，在u-boot页面上传并刷入 openwrt-ipq40xx-generic-hiwifi_c526a-squashfs-nand-factory.ubi。</p></li></ul><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/20_13_39_3_202209201339093.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/20_13_41_12_202209201341426.png"></p><p>如果点Update一闪而过，换个浏览器尝试即可</p><ul><li>把电脑网卡改成自动获取，等待路由器重启完成后，打开浏览器访问192.168.5.1，用户名 root 密码 password</li></ul><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/20_13_45_44_202209201345126.png"></p><ul><li>现在可以自由在路由器页面上传最新编译的openwrt固件（openwrt-ipq40xx-hiwifi_c526a-squashfs-nand-sysupgrade.bin）</li></ul><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/09/20_13_49_33_202209201349356.png"></p><h2 id="购买路由器"><a href="#购买路由器" class="headerlink" title="购买路由器"></a>购买路由器</h2><p>小店已上架一些路由器，刷好固件再发货，不愿意折腾的可以下单。</p><p>购买链接：<a href="https://shop.wwang.pw/">https://shop.wwang.pw/</a></p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷机 </tag>
            
            <tag> 极路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typecho去掉链接中的index.php</title>
      <link href="/post/Typecho.html"/>
      <url>/post/Typecho.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><strong>Typecho去掉index.php让链接更美观</strong></p><p>Typecho后台设置永久链接后，会在域名后加上index.php，很多人都接受不了</p><p>更改前是这样的：<a href="http://xxx.com/index.php/archives/86/">http://xxx.com/index.php/archives/86/</a></p><p>更改后是这样的：<a href="http://xxx.com/86.html">http://xxx.com/86.html</a></p><p><strong>开始设置</strong></p><p>打开设置 &#x2F; 永久链接，启用<strong>地址重写功能</strong>，改成如下图所示</p><p>这时会提醒你“重写功能检测失败，请检查你的服务器设置” 不用理会继续开启，然后保存设置</p><p><img src="https://cdn.staticaly.com/gh/xiaowansm5/img@master/blog/1.png"></p><p>按照以上设置，文章链接会是数字，比如：&#x2F;86.html</p><p>而分类页和独立页面会是缩阅名，而缩阅名可以自己设置，比如：&#x2F;ss.html</p><p>注意：现在打开你的博客文章会出现404错误</p><p>然后我们需要修改nginx配置规则</p><p>如果使用的宝塔面板，就在 网站-设置-配置文件 里面修改</p><p>在规则里加入以下代码后保存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (!-e $request_filename) &#123;</span><br><span class="line"></span><br><span class="line">  rewrite ^(.*)$ /index.php$1 last;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以宝塔面板为例：</p><p><img src="https://git.poker/xiaowansm5/img/blob/master/blog/2.png?raw=true" alt="![](https://img.php.cn/upload/image/103/244/500/1598064283527469.png"></p><p>好了，一切都搞定了，现在打开你博客文章看看吧！</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Typecho </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Padavan【老毛子】固件基础使用教程</title>
      <link href="/post/padavan.html"/>
      <url>/post/padavan.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="一、联网设置"><a href="#一、联网设置" class="headerlink" title="一、联网设置"></a>一、联网设置</h2><blockquote><p>家庭宽带常用的联网方式有两种，pppoe拨号和DHCP模式，如果你不明白自家的宽带是哪种联网方式，可以拨打运营商客服电话咨询，再进行下面的设置。</p></blockquote><h3 id="pppoe拨号上网"><a href="#pppoe拨号上网" class="headerlink" title="pppoe拨号上网"></a>pppoe拨号上网</h3><blockquote><p>光猫是桥接，直连光猫无法上网的，选这个联网方式，准备好<strong>宽带账号和密码</strong></p></blockquote><p>路由器后面的WAN口用网线连接光猫，路由器通电后进入Padavan管理后台，点<strong>外网WAN</strong>–<strong>联网类型选PPPOE</strong>–<strong>按照下图填入宽带账号和密码</strong>-点<strong>应用设置</strong>，等待片刻即可。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/14_10_4_52_202208141004850.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/14_10_5_40_202208141005439.png"></p><h3 id="DHCP模式"><a href="#DHCP模式" class="headerlink" title="DHCP模式"></a>DHCP模式</h3><p><strong>DHCP模式无需设置，固件默认就是这个模式，WAN口连接光猫即可上网</strong></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/14_10_7_8_202208141007319.png"></p><h2 id="二、无线WiFi设置"><a href="#二、无线WiFi设置" class="headerlink" title="二、无线WiFi设置"></a>二、无线WiFi设置</h2><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/14_10_10_8_202208141010320.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/14_10_11_6_202208141011646.png"></p><h2 id="三、后台管理ip地址和密码修改"><a href="#三、后台管理ip地址和密码修改" class="headerlink" title="三、后台管理ip地址和密码修改"></a>三、后台管理ip地址和密码修改</h2><h3 id="后台ip地址修改"><a href="#后台ip地址修改" class="headerlink" title="后台ip地址修改"></a>后台ip地址修改</h3><blockquote><p>如果是做二级路由，而恰好和主路由器的后台ip一样就会冲突，造成无法上网，这时就需要修改一下后台ip地址。</p></blockquote><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/14_10_16_26_202208141016460.png"></p><h3 id="后台密码修改"><a href="#后台密码修改" class="headerlink" title="后台密码修改"></a>后台密码修改</h3><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/14_10_18_9_202208141018391.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/14_10_18_50_202208141018370.png"></p><h2 id="四、路由器重置【复位】"><a href="#四、路由器重置【复位】" class="headerlink" title="四、路由器重置【复位】"></a>四、路由器重置【复位】</h2><blockquote><p><strong>如果你的设置乱了或者无法上网等各种问题，可以尝试重置路由器解决</strong></p></blockquote><blockquote><p><font color="red"><strong>进不去后台可以进行硬复位，长按路由器后面reset键或者小孔30秒以上再送开，等待5分钟左右即可恢复默认状态</strong></font></p></blockquote><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/14_10_20_55_202208141020773.png"></p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> padavan </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小米红米ac2100刷回原厂官方固件</title>
      <link href="/post/miyc.html"/>
      <url>/post/miyc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><strong>刷机步聚：</strong></p><p>1、进入breed的管理界面，在固件更新界面选择闪存布局为固件1，不要勾选自动重启，点“更新”按钮刷入固件。刷完后会重新回到固件更新界面。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/13_13_17_17_202208131317888.png"></p><p>2、再次进入breed的管理界面，在固件更新界面选择闪存布局为固件2，勾选自动重启，点“更新”按钮刷入固件，刷完后路由器会重启。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/13_13_17_35_202208131317383.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/13_13_17_51_202208131317403.png"></p><p>3、重启后先是蓝灯长亮2分钟，然后转为橙灯2分钟，最后是蓝灯。之后可进入MiWiFi管理界面。我实测红米2.0.23版本会重置所有设置。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/13_13_18_9_202208131318979.png"></p><p><strong>固件下载地址：</strong></p><p><a href="https://pan.w2nn.ml/zh-CN/%F0%9F%94%A5OpenWrt_LEAN%E7%89%88%EF%BC%88%E7%9C%8B%E4%B8%8D%E6%87%82%E7%9A%84%E5%B0%B1%E7%82%B9%E5%BC%80%E6%AD%A4%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%89/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8AC2100/%E9%80%82%E7%94%A8%E4%BA%8Ebreed%E5%8E%9F%E5%8E%82%E5%9B%BA%E4%BB%B6/">适用breed的原厂固件</a></p><p>其中 miwifi_rm2100开头的是红米的，miwifi_r2100开头的是小米的。</p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小米 </tag>
            
            <tag> 原厂系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>白嫖cloudflare搭建属于自己的git加速站</title>
      <link href="/post/gh1.html"/>
      <url>/post/gh1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a><strong>准备</strong></h2><p>基于开源项目gh-proxy地址：–&gt;<a href="https://github.com/hunshcn/gh-proxy.git">点击访问</a>&lt;–</p><p>cloudflare地址:–&gt;<a href="https://dash.cloudflare.com/">点击访问</a>&lt;–</p><p>首先访问cloudflare注册一个你自己的账户</p><p>然后点击workers</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_23_21_25_202208122321361.png"></p><h2 id="然后按下图填写，之后点创建"><a href="#然后按下图填写，之后点创建" class="headerlink" title="然后按下图填写，之后点创建"></a><strong>然后按下图填写，之后点创建</strong></h2><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_23_24_50_202208122324727.png"></p><h2 id="然后点击快速编辑"><a href="#然后点击快速编辑" class="headerlink" title="然后点击快速编辑"></a><strong>然后点击快速编辑</strong></h2><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_23_25_51_202208122325555.png"></p><h2 id="将下面的代码复制-—-gt-点击查看源码-lt-–"><a href="#将下面的代码复制-—-gt-点击查看源码-lt-–" class="headerlink" title="将下面的代码复制 —&gt;点击查看源码&lt;–"></a><strong>将下面的代码复制 —&gt;<a href="https://github.com/hunshcn/gh-proxy/blob/master/index.js">点击查看源码</a>&lt;–</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line">&#x27;use strict&#x27;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * static files (404.html, sw.js, conf.js)</span><br><span class="line"> */</span><br><span class="line">const ASSET_URL = &#x27;https://hunshcn.github.io/gh-proxy/&#x27;</span><br><span class="line">// 前缀，如果自定义路由为example.com/gh/*，将PREFIX改为 &#x27;/gh/&#x27;，注意，少一个杠都会错！</span><br><span class="line">const PREFIX = &#x27;/&#x27;</span><br><span class="line">// 分支文件使用jsDelivr镜像的开关，0为关闭，默认关闭</span><br><span class="line">const Config = &#123;</span><br><span class="line">    jsdelivr: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const whiteList = [] // 白名单，路径里面有包含字符的才会通过，e.g. [&#x27;/username/&#x27;]</span><br><span class="line"></span><br><span class="line">/** @type &#123;RequestInit&#125; */</span><br><span class="line">const PREFLIGHT_INIT = &#123;</span><br><span class="line">    status: 204,</span><br><span class="line">    headers: new Headers(&#123;</span><br><span class="line">        &#x27;access-control-allow-origin&#x27;: &#x27;*&#x27;,</span><br><span class="line">        &#x27;access-control-allow-methods&#x27;: &#x27;GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS&#x27;,</span><br><span class="line">        &#x27;access-control-max-age&#x27;: &#x27;1728000&#x27;,</span><br><span class="line">    &#125;),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const exp1 = /^(?:https?:\/\/)?github\.com\/.+?\/.+?\/(?:releases|archive)\/.*$/i</span><br><span class="line">const exp2 = /^(?:https?:\/\/)?github\.com\/.+?\/.+?\/(?:blob|raw)\/.*$/i</span><br><span class="line">const exp3 = /^(?:https?:\/\/)?github\.com\/.+?\/.+?\/(?:info|git-).*$/i</span><br><span class="line">const exp4 = /^(?:https?:\/\/)?raw\.(?:githubusercontent|github)\.com\/.+?\/.+?\/.+?\/.+$/i</span><br><span class="line">const exp5 = /^(?:https?:\/\/)?gist\.(?:githubusercontent|github)\.com\/.+?\/.+?\/.+$/i</span><br><span class="line">const exp6 = /^(?:https?:\/\/)?github\.com\/.+?\/.+?\/tags.*$/i</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @param &#123;any&#125; body</span><br><span class="line"> * @param &#123;number&#125; status</span><br><span class="line"> * @param &#123;Object&lt;string, string&gt;&#125; headers</span><br><span class="line"> */</span><br><span class="line">function makeRes(body, status = 200, headers = &#123;&#125;) &#123;</span><br><span class="line">    headers[&#x27;access-control-allow-origin&#x27;] = &#x27;*&#x27;</span><br><span class="line">    return new Response(body, &#123;status, headers&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @param &#123;string&#125; urlStr</span><br><span class="line"> */</span><br><span class="line">function newUrl(urlStr) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        return new URL(urlStr)</span><br><span class="line">    &#125; catch (err) &#123;</span><br><span class="line">        return null</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">addEventListener(&#x27;fetch&#x27;, e =&gt; &#123;</span><br><span class="line">    const ret = fetchHandler(e)</span><br><span class="line">        .catch(err =&gt; makeRes(&#x27;cfworker error:\n&#x27; + err.stack, 502))</span><br><span class="line">    e.respondWith(ret)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function checkUrl(u) &#123;</span><br><span class="line">    for (let i of [exp1, exp2, exp3, exp4, exp5, exp6]) &#123;</span><br><span class="line">        if (u.search(i) === 0) &#123;</span><br><span class="line">            return true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @param &#123;FetchEvent&#125; e</span><br><span class="line"> */</span><br><span class="line">async function fetchHandler(e) &#123;</span><br><span class="line">    const req = e.request</span><br><span class="line">    const urlStr = req.url</span><br><span class="line">    const urlObj = new URL(urlStr)</span><br><span class="line">    let path = urlObj.searchParams.get(&#x27;q&#x27;)</span><br><span class="line">    if (path) &#123;</span><br><span class="line">        return Response.redirect(&#x27;https://&#x27; + urlObj.host + PREFIX + path, 301)</span><br><span class="line">    &#125;</span><br><span class="line">    // cfworker 会把路径中的 `//` 合并成 `/`</span><br><span class="line">    path = urlObj.href.substr(urlObj.origin.length + PREFIX.length).replace(/^https?:\/+/, &#x27;https://&#x27;)</span><br><span class="line">    if (path.search(exp1) === 0 || path.search(exp5) === 0 || path.search(exp6) === 0 || path.search(exp3) === 0 || path.search(exp4) === 0) &#123;</span><br><span class="line">        return httpHandler(req, path)</span><br><span class="line">    &#125; else if (path.search(exp2) === 0) &#123;</span><br><span class="line">        if (Config.jsdelivr) &#123;</span><br><span class="line">            const newUrl = path.replace(&#x27;/blob/&#x27;, &#x27;@&#x27;).replace(/^(?:https?:\/\/)?github\.com/, &#x27;https://cdn.jsdelivr.net/gh&#x27;)</span><br><span class="line">            return Response.redirect(newUrl, 302)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            path = path.replace(&#x27;/blob/&#x27;, &#x27;/raw/&#x27;)</span><br><span class="line">            return httpHandler(req, path)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if (path.search(exp4) === 0) &#123;</span><br><span class="line">        const newUrl = path.replace(/(?&lt;=com\/.+?\/.+?)\/(.+?\/)/, &#x27;@$1&#x27;).replace(/^(?:https?:\/\/)?raw\.(?:githubusercontent|github)\.com/, &#x27;https://cdn.jsdelivr.net/gh&#x27;)</span><br><span class="line">        return Response.redirect(newUrl, 302)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return fetch(ASSET_URL + path)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @param &#123;Request&#125; req</span><br><span class="line"> * @param &#123;string&#125; pathname</span><br><span class="line"> */</span><br><span class="line">function httpHandler(req, pathname) &#123;</span><br><span class="line">    const reqHdrRaw = req.headers</span><br><span class="line"></span><br><span class="line">    // preflight</span><br><span class="line">    if (req.method === &#x27;OPTIONS&#x27; &amp;&amp;</span><br><span class="line">        reqHdrRaw.has(&#x27;access-control-request-headers&#x27;)</span><br><span class="line">    ) &#123;</span><br><span class="line">        return new Response(null, PREFLIGHT_INIT)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const reqHdrNew = new Headers(reqHdrRaw)</span><br><span class="line"></span><br><span class="line">    let urlStr = pathname</span><br><span class="line">    let flag = !Boolean(whiteList.length)</span><br><span class="line">    for (let i of whiteList) &#123;</span><br><span class="line">        if (urlStr.includes(i)) &#123;</span><br><span class="line">            flag = true</span><br><span class="line">            break</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!flag) &#123;</span><br><span class="line">        return new Response(&quot;blocked&quot;, &#123;status: 403&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    if (urlStr.startsWith(&#x27;github&#x27;)) &#123;</span><br><span class="line">        urlStr = &#x27;https://&#x27; + urlStr</span><br><span class="line">    &#125;</span><br><span class="line">    const urlObj = newUrl(urlStr)</span><br><span class="line"></span><br><span class="line">    /** @type &#123;RequestInit&#125; */</span><br><span class="line">    const reqInit = &#123;</span><br><span class="line">        method: req.method,</span><br><span class="line">        headers: reqHdrNew,</span><br><span class="line">        redirect: &#x27;manual&#x27;,</span><br><span class="line">        body: req.body</span><br><span class="line">    &#125;</span><br><span class="line">    return proxy(urlObj, reqInit)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> * @param &#123;URL&#125; urlObj</span><br><span class="line"> * @param &#123;RequestInit&#125; reqInit</span><br><span class="line"> */</span><br><span class="line">async function proxy(urlObj, reqInit) &#123;</span><br><span class="line">    const res = await fetch(urlObj.href, reqInit)</span><br><span class="line">    const resHdrOld = res.headers</span><br><span class="line">    const resHdrNew = new Headers(resHdrOld)</span><br><span class="line"></span><br><span class="line">    const status = res.status</span><br><span class="line"></span><br><span class="line">    if (resHdrNew.has(&#x27;location&#x27;)) &#123;</span><br><span class="line">        let _location = resHdrNew.get(&#x27;location&#x27;)</span><br><span class="line">        if (checkUrl(_location))</span><br><span class="line">            resHdrNew.set(&#x27;location&#x27;, PREFIX + _location)</span><br><span class="line">        else &#123;</span><br><span class="line">            reqInit.redirect = &#x27;follow&#x27;</span><br><span class="line">            return proxy(newUrl(_location), reqInit)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    resHdrNew.set(&#x27;access-control-expose-headers&#x27;, &#x27;*&#x27;)</span><br><span class="line">    resHdrNew.set(&#x27;access-control-allow-origin&#x27;, &#x27;*&#x27;)</span><br><span class="line"></span><br><span class="line">    resHdrNew.delete(&#x27;content-security-policy&#x27;)</span><br><span class="line">    resHdrNew.delete(&#x27;content-security-policy-report-only&#x27;)</span><br><span class="line">    resHdrNew.delete(&#x27;clear-site-data&#x27;)</span><br><span class="line"></span><br><span class="line">    return new Response(res.body, &#123;</span><br><span class="line">        status,</span><br><span class="line">        headers: resHdrNew,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="替换掉原来所有代码，先点下面的保存，等待保存成功后，再点发送"><a href="#替换掉原来所有代码，先点下面的保存，等待保存成功后，再点发送" class="headerlink" title="替换掉原来所有代码，先点下面的保存，等待保存成功后，再点发送"></a><strong>替换掉原来所有代码，先点下面的保存，等待保存成功后，再点发送</strong></h2><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_23_27_48_202208122327835.png"></p><h2 id="显示如下就成功了，下面继续"><a href="#显示如下就成功了，下面继续" class="headerlink" title="显示如下就成功了，下面继续"></a><strong>显示如下就成功了，下面继续</strong></h2><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_23_28_42_202208122328415.png"></p><h2 id="托管一个域名到cloudflare"><a href="#托管一个域名到cloudflare" class="headerlink" title="托管一个域名到cloudflare"></a><strong>托管一个域名到cloudflare</strong></h2><p>登录cf，然后点击网站，添加你的域名，按提示完成域名托管，然后按提示完成域名托管</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_23_34_52_202208122334250.png"></p><p><strong>DNS配置</strong></p><p>配置好后，你的主页会显示你的网址，点进去，进入DNS配置，添加一个DNS解析</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_23_39_43_202208122339742.png"></p><p>按照图片设置就行，ip地址随便填无所谓，最好写一个能ping的，记得一定要开启小云朵！</p><h2 id="配置域名加速workers"><a href="#配置域名加速workers" class="headerlink" title="配置域名加速workers"></a><strong>配置域名加速workers</strong></h2><p>打开你网址下面的workers，不是主页下面的workers！！</p><p>点击添加路由</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_23_42_16_202208122342260.png"></p><p>第一个空输入 你的域名&#x2F;* （我的域名是github.w2aa.ga所以我输入github.w2aa.ga&#x2F;* ）</p><p>第二个选择你在主页workers里面创建的git加速的名字，你设置的啥他就叫啥！ （我的加速站名字就是 github 我就选 github）</p><p>第三个只有一个选项，你就选它就行</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_23_43_34_202208122343914.png"></p><p>然后保存</p><p>保存之后是这样</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_23_44_17_202208122344482.png"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a><strong>测试</strong></h2><p>直接访问你的域名，在没有魔法的情况下能否访问</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_23_45_16_202208122345747.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo插入音乐视频测试</title>
      <link href="/post/spcs.html"/>
      <url>/post/spcs.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="安装aplayer以及dplayer"><a href="#安装aplayer以及dplayer" class="headerlink" title="安装aplayer以及dplayer"></a>安装aplayer以及dplayer</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-tag-aplayer</span><br><span class="line"></span><br><span class="line">npm install hexo-tag-dplayer</span><br></pre></td></tr></table></figure><h2 id="插入视频"><a href="#插入视频" class="headerlink" title="插入视频"></a>插入视频</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% dplayer &quot;url=https://pan.w2aa.ml/api/raw/?path=/MV/20220411112859.mp4&quot;  &quot;pic=https://pan.w2aa.ml/api/raw/?path=/img/1021152.jpg&quot; &quot;loop=yes&quot; &quot;theme=#FADFA3&quot; &quot;autoplay=false&quot; &quot;token=tokendemo&quot; %&#125;</span><br></pre></td></tr></table></figure><div id="dplayer0" class="dplayer" style="margin-bottom: 20px;"></div><script>var dplayer0 = new DPlayer({"element":document.getElementById("dplayer0"),"autoplay":0,"theme":"#FADFA3","loop":1,"video":{"url":"https://pan.w2aa.ml/api/raw/?path","pic":"https://pan.w2aa.ml/api/raw/?path"}});</script><!-- dplayer used1 --><h2 id="插入音乐"><a href="#插入音乐" class="headerlink" title="插入音乐"></a>插入音乐</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer &quot;歌曲名称&quot; &quot;作者&quot; &quot;音乐_url&quot; &quot;封面图片_url&quot; &quot;autoplay&quot; %&#125;</span><br></pre></td></tr></table></figure>        <div id="aplayer-kDcXKERj" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-kDcXKERj"),            narrow: false,            autoplay: true,            showlrc: false,            music: {              title: "晚风心里吹",              author: "阿梨粤",              url: "https://pan.w2aa.ml/api/raw/?path=/music/%E3%80%90%E6%99%9A%E9%A3%8E%E5%BF%83%E9%87%8C%E5%90%B9%E3%80%91%E9%98%BF%E6%A2%A8%E7%B2%A4.mp3",              pic: "https://pan.w2aa.ml/api/raw/?path=/img/1001728.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><h2 id="插入网易云音乐"><a href="#插入网易云音乐" class="headerlink" title="插入网易云音乐"></a>插入网易云音乐</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=1929370102&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1929370102&auto=1&height=66"></iframe><h2 id="插入youtube视频"><a href="#插入youtube视频" class="headerlink" title="插入youtube视频"></a>插入youtube视频</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Qpf26PtBXgo&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><iframe width="560" height="315" src="https://www.youtube.com/embed/Qpf26PtBXgo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows11安装Google Play商店教学，WSA一键脚本</title>
      <link href="/post/Win11.html"/>
      <url>/post/Win11.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Windows 11 支持 Android 应用程序，但您只能使用 Amazon Appstore — 是吗？只需稍做工作，即可在您的 Windows 11 PC 上启动并运行 Google Play 商店。</p><p>Amazon Appstore 可能是在 Windows 11 中安装 Android 应用程序的官方方法，但总是有其他方法。您可以手动加载 Android 应用程序和游戏，但如果这很烦人，您可能更愿意一路走下去并获得 Play 商店。这就是我们要做的。</p><h3 id="电脑要求"><a href="#电脑要求" class="headerlink" title="电脑要求"></a><strong>电脑要求</strong></h3><blockquote><p>Windows11升级到最新</p><p>CPU和主板需要支持开启：虚拟化技术</p><p>4G以上内存</p><p>如果已经安装了安卓子系统，需要先卸载掉。</p></blockquote><h3 id="打开开发者模式"><a href="#打开开发者模式" class="headerlink" title="打开开发者模式"></a><strong>打开开发者模式</strong></h3><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_14_39_57_202208121439457.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_14_40_22_202208121440404.png"></p><h3 id="打开内存完整性"><a href="#打开内存完整性" class="headerlink" title="打开内存完整性"></a><strong>打开内存完整性</strong></h3><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_14_41_26_202208121441755.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_14_41_43_202208121441859.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_14_42_0_202208121442234.png"></p><h3 id="开启虚拟机平台和监控"><a href="#开启虚拟机平台和监控" class="headerlink" title="开启虚拟机平台和监控"></a><strong>开启虚拟机平台和监控</strong></h3><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_14_42_24_202208121442925.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_14_42_45_202208121442638.png"></p><h3 id="安装完后重启电脑"><a href="#安装完后重启电脑" class="headerlink" title="安装完后重启电脑"></a><strong>安装完后重启电脑</strong></h3><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_14_44_10_202208121444262.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_14_44_29_202208121444542.png"></p><h3 id="系统区域改成美国"><a href="#系统区域改成美国" class="headerlink" title="系统区域改成美国"></a><strong>系统区域改成美国</strong></h3><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_14_45_12_202208121445888.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_14_45_24_202208121445639.png"></p><h3 id="下载WSA-with-magisk-GApps安装包，解压到C盘根目录，此目录不能删除。"><a href="#下载WSA-with-magisk-GApps安装包，解压到C盘根目录，此目录不能删除。" class="headerlink" title="下载WSA-with-magisk-GApps安装包，解压到C盘根目录，此目录不能删除。"></a><strong>下载<a href="https://pan.w2aa.ml/api/raw/?path=/Windows/win11%E5%AE%89%E8%A3%85%E8%B0%B7%E6%AD%8C%E5%95%86%E5%BA%97/WSA-with-magisk-GApps-pico_2204.40000.20.0_x64_Release-Nightly.zip">WSA-with-magisk-GApps</a>安装包，解压到C盘根目录，此目录不能删除。</strong></h3><blockquote><p>此项目Github上已开源，可以自行编译，项目地址：<a href="https://github.com/LSPosed/MagiskOnWSA">https://github.com/LSPosed/MagiskOnWSA</a></p></blockquote><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_14_50_47_202208121450635.png"></p><h3 id="使用PowerShell运行目录里的install文件"><a href="#使用PowerShell运行目录里的install文件" class="headerlink" title="使用PowerShell运行目录里的install文件"></a><strong>使用PowerShell运行目录里的install文件</strong></h3><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_14_53_56_202208121453332.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_14_54_18_202208121454599.png"></p><h3 id="安装完成后，点开菜单–安卓子系统设置，开启开发者模式"><a href="#安装完成后，点开菜单–安卓子系统设置，开启开发者模式" class="headerlink" title="安装完成后，点开菜单–安卓子系统设置，开启开发者模式"></a><strong>安装完成后，点开菜单–安卓子系统设置，开启开发者模式</strong></h3><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_14_56_17_202208121456763.png"></p><h3 id="打开Microsoft-Store，安装Apk文件安装程序，就可以直接安装apk文件了"><a href="#打开Microsoft-Store，安装Apk文件安装程序，就可以直接安装apk文件了" class="headerlink" title="打开Microsoft Store，安装Apk文件安装程序，就可以直接安装apk文件了"></a><strong>打开Microsoft Store，安装Apk文件安装程序，就可以直接安装apk文件了</strong></h3><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_15_1_0_202208121501543.png"></p><h3 id="测试截图"><a href="#测试截图" class="headerlink" title="测试截图"></a><strong>测试截图</strong></h3><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_14_57_24_202208121457701.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_14_57_42_202208121457169.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_14_58_11_202208121458405.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/08/12_14_58_28_202208121458009.png"></p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个多功能的PHP短网址程序：Shortny，自定义后缀二维码链接统计等</title>
      <link href="/post/Shortny.html"/>
      <url>/post/Shortny.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><strong>说明：</strong><code>Shortny</code>是一款国外的<code>PHP</code>短网址源码，程序非常小巧，但是功能是很多的，支持自定义后缀、加密访问，查看链接统计，而且还支持放广告，这个广告功能相信有些人会喜欢。界面也比较好看，支持白天&#x2F;夜晚切换模式，由于官方的程序是收费的，所以这里博主提供的是由<a href="https://www.topide.com/">顶点网</a>破解的最新版<code>Shortny v2.0.1</code>，顺便说下安装方法和一些细节处理。</p><h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><img src="https://pan.w2aa.ml/api/raw/?path=/linux/Shortny%E5%A4%9A%E5%8A%9F%E8%83%BD%E7%9A%84PHP%E7%9F%AD%E7%BD%91%E5%9D%80%E7%A8%8B%E5%BA%8F/%E6%88%AA%E5%9B%BE/1.png"></p><p><img src="https://pan.w2aa.ml/api/raw/?path=/linux/Shortny%E5%A4%9A%E5%8A%9F%E8%83%BD%E7%9A%84PHP%E7%9F%AD%E7%BD%91%E5%9D%80%E7%A8%8B%E5%BA%8F/%E6%88%AA%E5%9B%BE/2.png"></p><p><img src="https://pan.w2aa.ml/api/raw/?path=/linux/Shortny%E5%A4%9A%E5%8A%9F%E8%83%BD%E7%9A%84PHP%E7%9F%AD%E7%BD%91%E5%9D%80%E7%A8%8B%E5%BA%8F/%E6%88%AA%E5%9B%BE/3.png"></p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p><strong>#前端</strong> </p><p>简洁、优雅、反应灵敏的设计 </p><p>创建URL </p><p>创建自定义URL </p><p>密码保护的链接 </p><p>链接统计 </p><p>暗色主题 </p><p>小书签 </p><p>复制和共享链接 </p><p><strong>#后端</strong> </p><p>删除网址 </p><p>编辑网站设置 </p><p>添加或编辑广告 </p><p>分析 </p><p>使用自定义CSS </p><p><strong>#功能</strong> </p><p>垃圾邮件检查器 </p><p>所有输入都经过验证以进行保护。 </p><p>安全支护板 </p><p>命中计数</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>环境要求：PHP、Mysql、Nginx&#x2F;Apache，搭建方法自行选择，这里使用宝塔演示。</p><h4 id="上传程序"><a href="#上传程序" class="headerlink" title="上传程序"></a>上传程序</h4><p>点击面板左侧-添加站点，数据库选择Mysql，设置好数据库名称、密码。然后上传源码到根目录并解压出来。</p><p>然后上传源码到根目录并解压出来(源码下载：<a href="https://pan.w2aa.ml/api/raw/?path=/linux/Shortny%E5%A4%9A%E5%8A%9F%E8%83%BD%E7%9A%84PHP%E7%9F%AD%E7%BD%91%E5%9D%80%E7%A8%8B%E5%BA%8F/Shortny_v2.0.1.zip">Shortny_v2.0.1</a>)</p><h4 id="伪静态设置"><a href="#伪静态设置" class="headerlink" title="伪静态设置"></a>伪静态设置</h4><p>#Nginx，点击域名设置-伪静态，然后将下面例子的域名改成自己的，再复制进去，例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rewrite ^/about /about.php last;</span><br><span class="line">rewrite ^/api-about /api-about.php last;</span><br><span class="line">rewrite ^/contact /contact.php last;</span><br><span class="line">rewrite ^/tos /tos.php last;</span><br><span class="line">rewrite ^/([^/.]+)/?$ /link.php?id=$1 last;</span><br><span class="line">rewrite ^/404 /404.php last;</span><br><span class="line">error_page 404 http://d.iowen.cn/404;</span><br><span class="line">error_page 403 http://d.iowen.cn/404;</span><br></pre></td></tr></table></figure><p>最后开始安装，由于伪静态问题，只能通过具体路径安装，链接如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#安装路径，记得修改下面域名地址</span><br><span class="line">https://www.iowen.cn/install/index.html</span><br><span class="line">#后台路径</span><br><span class="line">https://www.iowen.cn/admin/index.php</span><br></pre></td></tr></table></figure><p>安装完成后，默认用户名和密码均为admin。</p><p><font color="red"><strong>注意：</strong> 装置好后登录管理面板&gt;设置&gt;常规&gt;修正成你的域名&gt;保存&gt;前台即可正常显现（不然前台错位乱码）这一步非常重要，安装好后必须先设置自己的域名。</font></p><h2 id="二维码修改"><a href="#二维码修改" class="headerlink" title="二维码修改"></a>二维码修改</h2><p>源码默认的使用<code>google</code>的<code>api</code>生成二维码图片，在国内访问肯定是不会显示出来的，这就大大减少了体验，不过不用慌，有爱的博主自然会提前研究下解决方法，这里就说下，使其在国内也可以使用二维码功能。</p><p>1、下载博主提供的二维码文件，下载地址：<a href="https://pan.w2aa.ml/api/raw/?path=/linux/Shortny%E5%A4%9A%E5%8A%9F%E8%83%BD%E7%9A%84PHP%E7%9F%AD%E7%BD%91%E5%9D%80%E7%A8%8B%E5%BA%8F/Shortnyqr.zip">Shortnyqr.zip</a>。</p><p>2、文件解压出<code>3</code>个文件，如果你的短地址网站使用<code>http</code>，那将<code>http_qr</code>文件命名为<code>qr</code>；反之使用<code>https</code>，那么将<code>https_qr</code>命名为<code>qr</code>。然后再将<code>phpqrcode</code>和重新命令的<code>qr</code>文件上传到网站根目录。</p><p>3、找到网站根目录<code>stats.php</code>文件的<code>87</code>行和<code>functions/created.php</code>文件的<code>71</code>行，将<code>src</code>后面的参数替换下，修改如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#记得将域名替换成自己的</span><br><span class="line">src=&quot;https://www.moerats.com/qr.php?url=&lt;?php echo $created_link; ?&gt;</span><br></pre></td></tr></table></figure><p>最后你会发现二维码在国内可以正常使用了，好了最后自己研究吧。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shortny </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenWrt基础使用教程</title>
      <link href="/post/op.html"/>
      <url>/post/op.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="一、联网设置"><a href="#一、联网设置" class="headerlink" title="一、联网设置"></a>一、联网设置</h2><blockquote><p>家庭宽带常用的联网方式有两种，pppoe拨号和DHCP模式，如果你不明白自家的宽带是哪种联网方式，可以拨打运营商客服电话咨询，再进行下面的设置。</p></blockquote><h3 id="pppoe拨号上网"><a href="#pppoe拨号上网" class="headerlink" title="pppoe拨号上网"></a>pppoe拨号上网</h3><blockquote><p>光猫是桥接，直连光猫无法上网的，选这个联网方式，准备好<strong>宽带账号和密码</strong></p></blockquote><p>路由器后面的WAN口用网线连接光猫，路由器通电后进入openwrt管理后台，点<strong>网络</strong>-<strong>接口</strong>–<strong>WAN修改</strong>–<strong>传输协议选pppoe</strong>–<strong>切换</strong>–填入<strong>宽带账号和密码</strong>–点<strong>保存应用</strong>，等待片刻，<strong>接口–WAN</strong>的位置<em><strong>显示ipv4地址说明拨号成功</strong></em></p><p><img src="https://w.x-wan.top/other/openwrt-1.png"></p><p><img src="https://w.x-wan.top/other/openwrt-2.png"></p><h3 id="DHCP模式"><a href="#DHCP模式" class="headerlink" title="DHCP模式"></a>DHCP模式</h3><p><strong>DHCP模式无需设置，固件默认就是这个模式，WAN口连接光猫即可上网</strong></p><p><img src="https://w.x-wan.top/other/openwrt-3.png"></p><h2 id="二、无线WiFi设置"><a href="#二、无线WiFi设置" class="headerlink" title="二、无线WiFi设置"></a>二、无线WiFi设置</h2><h3 id="无线WiFi名称和WiFi密码修改"><a href="#无线WiFi名称和WiFi密码修改" class="headerlink" title="无线WiFi名称和WiFi密码修改"></a>无线WiFi名称和WiFi密码修改</h3><p><strong>双频WiFi的路由器需要单独修改2.4和5G</strong></p><p><img src="https://w.x-wan.top/other/openwrt-4.png"></p><p>点开<strong>网络</strong>–<strong>无线</strong>–<strong>修改</strong>–<strong>ESSID修改你的WiFi名称</strong>–<strong>保存应用</strong></p><p><img src="https://w.x-wan.top/other/openwrt-5.png"></p><p>点开<strong>网络</strong>–<strong>无线</strong>–<strong>修改</strong>–<strong>无线安全</strong>–<strong>修改你的密码</strong>–<strong>保存应用</strong></p><p><img src="https://w.x-wan.top/other/openwrt-6.png"></p><h3 id="修改完成后，请勿动无线的其他设置，再插拔电源重启你的路由器"><a href="#修改完成后，请勿动无线的其他设置，再插拔电源重启你的路由器" class="headerlink" title="修改完成后，请勿动无线的其他设置，再插拔电源重启你的路由器"></a>修改完成后，请勿动无线的其他设置，再插拔电源重启你的路由器</h3><h2 id="三、后台管理ip地址和密码修改"><a href="#三、后台管理ip地址和密码修改" class="headerlink" title="三、后台管理ip地址和密码修改"></a>三、后台管理ip地址和密码修改</h2><h3 id="后台ip地址修改"><a href="#后台ip地址修改" class="headerlink" title="后台ip地址修改"></a>后台ip地址修改</h3><blockquote><p><strong>网络➡️接口➡️LAN修改➡️ipv4地址修改你的后台ip➡️再点保存应用➡️插拔电源重启路由器即可</strong></p></blockquote><p><img src="https://w.x-wan.top/other/openwrt-10.png"></p><p><img src="https://w.x-wan.top/other/openwrt-11.png"></p><h3 id="后台密码修改"><a href="#后台密码修改" class="headerlink" title="后台密码修改"></a>后台密码修改</h3><p><img src="https://w.x-wan.top/other/openwrt-7.png"></p><h2 id="四、路由器重置【复位】"><a href="#四、路由器重置【复位】" class="headerlink" title="四、路由器重置【复位】"></a>四、路由器重置【复位】</h2><blockquote><p><strong>点了执行重置后，关闭页面，耐心等待5分钟左右，手动输入后台地址进管理后台即可</strong><br><strong>如果你的设置乱了或者无法上网等各种问题，可以尝试重置路由器解决</strong></p></blockquote><blockquote><p><font color="red"><strong>进不去后台可以进行硬复位，长按路由器后面reset键或者小孔30秒以上再松开，等待5分钟左右即可恢复默认状态</strong></font></p></blockquote><p><img src="https://w.x-wan.top/other/openwrt-8.png"></p><h2 id="五、定时重启设置"><a href="#五、定时重启设置" class="headerlink" title="五、定时重启设置"></a>五、定时重启设置</h2><p><img src="https://w.x-wan.top/other/openwrt-9.png"></p>]]></content>
      
      
      <categories>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个极简的列表程序：ko-crypto</title>
      <link href="/post/crypto.html"/>
      <url>/post/crypto.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h4 id="1、项目"><a href="#1、项目" class="headerlink" title="1、项目"></a>1、项目</h4><p>DongList是一个目录文件列表程序，支持任何架构的站点部署，无需任何数据库，支持html5，支持多种流媒体，可以使用aria2下载或上传文件到服务器。</p><p>地址：<a href="https://github.com/ko-crypto/ko-crypto">https://github.com/ko-crypto/ko-crypto</a></p><p>项目支持PHP7.4及以上版本</p><h4 id="2、准备"><a href="#2、准备" class="headerlink" title="2、准备"></a>2、准备</h4><p>1）首先你需要准备一台VPS，这个是必须的。</p><p>2）准备一个域名，这也是必须的。</p><p>3）安装好宝塔面板</p><h4 id="3、部署"><a href="#3、部署" class="headerlink" title="3、部署"></a>3、部署</h4><p>1）宝塔新建网站，这个略过，之后删除所有的默认文件！！</p><p>2）利用宝塔的自带的远程下载，把项目下载到网站根目录，。</p><p>3）解压之后，复制所有的文件到你的网站根目录</p><p>4）浏览器中打开域名，即可看到效果</p><p>5）错误修复，宝塔安装后的错误如图：</p><p><img src="https://cdn.staticaly.com/gh/xiaowansm5/img@master/blog/1.zdcpacimdvk.webp"></p><p>6）修复错误，在67行的count函数后面加一个(array)即可，注意，两个count()里面都加 ，如图：<img src="https://cdn.staticaly.com/gh/xiaowansm5/img@master/blog/2.1aiea61d6u00.webp"></p><h4 id="4、效果"><a href="#4、效果" class="headerlink" title="4、效果"></a>4、效果</h4><p>首次登录会出现登录页面，默认密码是Ohyeah，修改密码就需要编辑index.php这个源文件，改成你需要的即可。</p><p><img src="https://cdn.staticaly.com/gh/xiaowansm5/img@master/blog/3.png"></p><h4 id="5、最后"><a href="#5、最后" class="headerlink" title="5、最后"></a>5、最后</h4><p>因为只有一个index.php单文件，所以如果用宝塔就是开箱即食了，如果用命令就需要好好学习一番了。</p><h4 id="6、自用修改版"><a href="#6、自用修改版" class="headerlink" title="6、自用修改版"></a>6、自用修改版</h4><p>修复报错，去掉了aria2</p><p>下载地址：<a href="https://pan.w2aa.ml/api/raw/?path=/linux/ko-crypto.zip">ko-crypto修改版</a></p><hr><p><img src="https://cdn.staticaly.com/gh/xiaowansm5/img@master/blog/4.54wveguw1vg0.webp"></p><p><img src="https://cdn.staticaly.com/gh/xiaowansm5/img@master/blog/7.2j7zk7b6yqe0.webp"></p><p><img src="https://cdn.staticaly.com/gh/xiaowansm5/img@master/blog/5.354l3hdofz60.webp"></p><p><img src="https://cdn.staticaly.com/gh/xiaowansm5/img@master/blog/6.70pzpgjrckw0.webp"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ko-crypto </tag>
            
            <tag> 列表程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo教程：butterfly主题-页脚渐变</title>
      <link href="/post/hexoa.html"/>
      <url>/post/hexoa.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="页脚渐变"><a href="#页脚渐变" class="headerlink" title="页脚渐变"></a>页脚渐变</h2><p>可以自己创建css文件在配置文件引入即可，_config.butterfly.yml文件的inject下引入css文件链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">/* 页脚footer */</span><br><span class="line">/* 渐变色滚动动画 */</span><br><span class="line">@-webkit-keyframes Gradient &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        background-position: 0 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    50% &#123;</span><br><span class="line">        background-position: 100% 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        background-position: 0 50%;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@-moz-keyframes Gradient &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        background-position: 0 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    50% &#123;</span><br><span class="line">        background-position: 100% 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        background-position: 0 50%;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes Gradient &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        background-position: 0 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    50% &#123;</span><br><span class="line">        background-position: 100% 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        background-position: 0 50%;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#footer &#123;</span><br><span class="line">    background: linear-gradient(-45deg, #ee7752, #ce3e75, #23a6d5, #23d5ab);</span><br><span class="line">    background-size: 400% 400%;</span><br><span class="line">    -webkit-animation: Gradient 10s ease infinite;</span><br><span class="line">    -moz-animation: Gradient 10s ease infinite;</span><br><span class="line">    animation: Gradient 10s ease infinite;</span><br><span class="line">    -o-user-select: none;</span><br><span class="line">    -ms-user-select: none;</span><br><span class="line">    -webkit-user-select: none;</span><br><span class="line">    -moz-user-select: none;</span><br><span class="line">    user-select: none;</span><br><span class="line">    border-top-left-radius: 10px;</span><br><span class="line">    border-top-right-radius: 10px;</span><br><span class="line">&#125;</span><br><span class="line">#footer:before &#123;</span><br><span class="line">    background-color: rgba(0, 0, 0, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/xiaowansm5/img@master/blog/Snipaste_2022-08-05_10-45-09.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo教程：hexo-electric-clock 电子时钟插件</title>
      <link href="/post/hexob.html"/>
      <url>/post/hexob.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>效果如下：</p><p><img src="https://cdn.staticaly.com/gh/xiaowansm5/img@master/blog/22.png" alt="img"></p><h1 id="NPM-插件安装的部署方法："><a href="#NPM-插件安装的部署方法：" class="headerlink" title="NPM 插件安装的部署方法："></a>NPM 插件安装的部署方法：</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-electric-clock --save</span><br><span class="line">#或者</span><br><span class="line">cnpm i hexo-electric-clock --save</span><br></pre></td></tr></table></figure><p>注意，一定要加 –save，不然本地预览的时候可能不会显示！！！</p><h1 id="新增网站根目录-config-配置项-不是主题的-："><a href="#新增网站根目录-config-配置项-不是主题的-：" class="headerlink" title="新增网站根目录_config 配置项 (不是主题的)："></a>新增网站根目录_config 配置项 (不是主题的)：</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">electric_clock:</span><br><span class="line">  priority: 5</span><br><span class="line">  enable: true</span><br><span class="line">  enable_page: all</span><br><span class="line">  layout:</span><br><span class="line">    type: class</span><br><span class="line">    name: sticky_layout</span><br><span class="line">    index: 0</span><br><span class="line">  temple_html: &#x27;&lt;div class=&quot;card-widget card-clock&quot;&gt;&lt;div class=&quot;card-glass&quot;&gt;&lt;div class=&quot;card-background&quot;&gt;&lt;div class=&quot;card-content&quot;&gt;&lt;div id=&quot;hexo_electric_clock&quot;&gt;&lt;img id=&quot;card-clock-loading&quot; src=&quot;https://cdn.jsdelivr.net/gh/Zfour/Butterfly-clock/clock/images/weather/loading.gif&quot; style=&quot;height: 120px; width: 100%;&quot; data-ll-status=&quot;loading&quot; class=&quot;entered loading&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span><br></pre></td></tr></table></figure><h3 id="enable"><a href="#enable" class="headerlink" title="enable"></a>enable</h3><p><strong>参数：</strong>true&#x2F;false<br><strong>含义：</strong>是否开启插件</p><h3 id="enable-page"><a href="#enable-page" class="headerlink" title="enable_page"></a>enable_page</h3><p><strong>参数：</strong>all<br><strong>含义：</strong>路由地址，all 代表全局开启。如 &#x2F; 代表主页。</p><h3 id="priority"><a href="#priority" class="headerlink" title="priority"></a>priority</h3><p><strong>参数：</strong>1<br><strong>含义：</strong>插件的叠放顺序，数字越大，叠放约靠前。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">electric_clock:</span><br><span class="line">  enable: true</span><br><span class="line">  priority: 5 # 这里是参数</span><br></pre></td></tr></table></figure><h3 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h3><p><strong>参数：</strong>type; （class&amp;id）<br><strong>参数：</strong>name;<br><strong>参数：</strong>index；（数字）<br><strong>含义：</strong>如果说 electric_clock 是一幅画，那么这个 layout 就是指定了哪面墙来挂画<br>而在 HTML 的是世界里有两种墙分别 type 为 id 和 class。<br>其中在定义 class 的时候会出现多个 class 的情况，这时就需要使用 index，确定是哪一个。<br>最后墙的名字即是 name;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div desc=&quot;我是墙&quot; id=&quot;recent-posts&quot;&gt;</span><br><span class="line">  &lt;!-- id=&gt;type  recent-posts=&gt;name    --&gt;</span><br><span class="line">  &lt;div desc=&quot;我是画框&quot;&gt;</span><br><span class="line">    &lt;div desc=&quot;我是纸&quot;&gt;</span><br><span class="line">      &lt;!--这里通过js挂载electric_clock，也就是画画--&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="temple-html"><a href="#temple-html" class="headerlink" title="temple_html"></a>temple_html</h3><p><strong>参数：</strong>html 模板字段<br><strong>含义：</strong>包含挂载容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;card-widget card-clock&quot;&gt;</span><br><span class="line">  &lt;!-- 挂载容器 --&gt;</span><br><span class="line">  &lt;div class=&quot;card-glass&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;card-background&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;card-content&quot;&gt;</span><br><span class="line">        &lt;div id=&quot;hexo_electric_clock&quot;&gt;</span><br><span class="line">          &lt;img</span><br><span class="line">            id=&quot;card-clock-loading&quot;</span><br><span class="line">            src=&quot;https://cdn.jsdelivr.net/gh/Zfour/Butterfly-clock/clock/images/weather/loading.gif&quot;</span><br><span class="line">            style=&quot;height: 120px; width: 100%;&quot;</span><br><span class="line">            data-ll-status=&quot;loading&quot;</span><br><span class="line">            class=&quot;entered loading&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="hexo-三连"><a href="#hexo-三连" class="headerlink" title="hexo 三连"></a>hexo 三连</h1><p>执行 hexo 三连</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>即可发现已经成功部署。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo教程：hexo-history-calendar 历史上的今天插件</title>
      <link href="/post/hexoc.html"/>
      <url>/post/hexoc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>效果如下：</p><p><img src="https://cdn.staticaly.com/gh/xiaowansm5/img@master/blog/11.png" alt="img"></p><h1 id="NPM-插件安装的部署方法："><a href="#NPM-插件安装的部署方法：" class="headerlink" title="NPM 插件安装的部署方法："></a>NPM 插件安装的部署方法：</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-history-calendar --save</span><br><span class="line"></span><br><span class="line"># 或者</span><br><span class="line"></span><br><span class="line">cnpm i hexo-history-calendar --save</span><br></pre></td></tr></table></figure><p>注意，一定要加 –save，不然本地预览的时候可能不会显示！！！</p><h1 id="新增网站根目录-config-配置项-不是主题的-："><a href="#新增网站根目录-config-配置项-不是主题的-：" class="headerlink" title="新增网站根目录_config 配置项 (不是主题的)："></a>新增网站根目录_config 配置项 (不是主题的)：</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">history_calendar:</span><br><span class="line">  priority: 4</span><br><span class="line">  enable: true</span><br><span class="line">  enable_page: all</span><br><span class="line">  layout:</span><br><span class="line">    type: class</span><br><span class="line">    name: sticky_layout</span><br><span class="line">    index: 0</span><br><span class="line">  temple_html: &#x27;&lt;div class=&quot;card-widget card-history&quot;&gt;&lt;div class=&quot;card-content&quot;&gt;&lt;div class=&quot;item-headline&quot;&gt;&lt;i class=&quot;fas fa-clock fa-spin&quot;&gt;&lt;/i&gt;&lt;span&gt;那年今日&lt;/span&gt;&lt;/div&gt;&lt;div id=&quot;history-baidu&quot; style=&quot;height: 100px;overflow: hidden&quot;&gt;&lt;div class=&quot;history_swiper-container&quot; id=&quot;history-container&quot; style=&quot;width: 100%;height: 100%&quot;&gt;&lt;div class=&quot;swiper-wrapper&quot; id=&quot;history_container_wrapper&quot; style=&quot;height:20px&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span><br></pre></td></tr></table></figure><h3 id="enable"><a href="#enable" class="headerlink" title="enable"></a>enable</h3><p><strong>参数：</strong>true&#x2F;false<br><strong>含义：</strong>是否开启插件</p><h3 id="enable-page"><a href="#enable-page" class="headerlink" title="enable_page"></a>enable_page</h3><p><strong>参数：</strong>all<br><strong>含义：</strong>路由地址，all 代表全局开启。如 &#x2F; 代表主页。</p><h3 id="priority"><a href="#priority" class="headerlink" title="priority"></a>priority</h3><p><strong>参数：</strong>1<br><strong>含义：</strong>插件的叠放顺序，数字越大，叠放约靠前。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">history_calendar:</span><br><span class="line">  enable: true</span><br><span class="line">  priority: 4 # 这里是参数</span><br></pre></td></tr></table></figure><h3 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h3><p><strong>参数：</strong>type; （class&amp;id）<br><strong>参数：</strong>name;<br><strong>参数：</strong>index；（数字）<br><strong>含义：</strong>如果说 history_calendar 是一幅画，那么这个 layout 就是指定了哪面墙来挂画<br>而在 HTML 的是世界里有两种墙分别 type 为 id 和 class。<br>其中在定义 class 的时候会出现多个 class 的情况，这时就需要使用 index，确定是哪一个。<br>最后墙的名字即是 name;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div desc=&quot;我是墙&quot; id=&quot;recent-posts&quot;&gt;</span><br><span class="line">  &lt;!-- id=&gt;type  recent-posts=&gt;name    --&gt;</span><br><span class="line">  &lt;div desc=&quot;我是画框&quot;&gt;</span><br><span class="line">    &lt;div desc=&quot;我是纸&quot;&gt;</span><br><span class="line">      &lt;!--这里通过js挂载history_calendar，也就是画画--&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="temple-html"><a href="#temple-html" class="headerlink" title="temple_html"></a>temple_html</h3><p><strong>参数：</strong>html 模板字段<br><strong>含义：</strong>包含挂载容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;card-widget card-history&quot;&gt; &lt;!-- 挂载容器 --&gt;</span><br><span class="line">  &lt;div class=&quot;card-content&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;item-headline&quot;&gt;</span><br><span class="line">      &lt;i class=&quot;fas fa-clock fa-spin&quot;&gt;&lt;/i&gt;</span><br><span class="line">      &lt;span&gt;那年今日&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;history-baidu&quot; style=&quot;height: 100px;overflow: hidden&quot;&gt; &lt;!-- 挂载器 --&gt;</span><br><span class="line">    &lt;div class=&quot;history_swiper-container&quot; id=&quot;history-container&quot; style=&quot;width: 100%;height: 100%&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;swiper-wrapper&quot; id=&quot;history_container_wrapper&quot; style=&quot;height:20px&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="hexo-三连"><a href="#hexo-三连" class="headerlink" title="hexo 三连"></a>hexo 三连</h1><p>执行 hexo 三连</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openwrt软路由无法访问国内网站的解决方法</title>
      <link href="/post/a11.html"/>
      <url>/post/a11.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="openwrt软路由无法访问国内网站的解决方法"><a href="#openwrt软路由无法访问国内网站的解决方法" class="headerlink" title="openwrt软路由无法访问国内网站的解决方法"></a>openwrt软路由无法访问国内网站的解决方法</h1><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>主路由拨号，软路由装openwrt挂在主路由下。软路由内装“出国访问”，但是各个客户端设备有时无法访问国内网站。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>openwrt网络–》防火墙–》自定义规则–》在其中加入如下语句：</p><p>iptables -t nat -I POSTROUTING -j MASQUERADE</p><p>重启防火墙即可</p>]]></content>
      
      
      <categories>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openwrt软路由间歇性断流掉线无法连接的解决办法</title>
      <link href="/post/a10.html"/>
      <url>/post/a10.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>家里的笔记本或单网口主机装openwrt作为软旁路由（网关）提供家里的设备“出国访问”。但是经常性会发生断流，掉线的情况。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ol><li>openwrt 网络–》接口–》编辑eth0网口–》高级设置物理接口–》取消掉桥接</li><li>openwrt 网络–》防火墙–》自定义规则，添加如下规则，iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE，然后重启即可。</li></ol>]]></content>
      
      
      <categories>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 hexo 无法使用本地图片</title>
      <link href="/post/a12.html"/>
      <url>/post/a12.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="关于-hexo-无法使用本地图片"><a href="#关于-hexo-无法使用本地图片" class="headerlink" title="关于 hexo 无法使用本地图片"></a>关于 hexo 无法使用本地图片</h1><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ul><li>hexo 中文章为 markdown 写法，当调用本地图片时出现无法调用或者一段时间后调用的图片发生变化导致图片加载不出来；</li><li>早期大部分的方案是把图片放在 source&#x2F;img 下，然后在 markdown 里写！[img] (&#x2F;source&#x2F;img&#x2F;img.png) 。显然这样在本地的编辑器里完全不能正确识别图片的位置。</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>在 hexo 主配置文件中将 post_asset_folder: false 改成 post_asset_folder:true ；</li><li>在 hexo 博客根目录执行 cnpm install <a href="https://github.com/CodeFalling/hexo-asset-image">https://github.com/CodeFalling/hexo-asset-image</a> –save；</li><li>执行 hexo new “hello”，会在 source&#x2F;_posts 里面生成 hello.md 文件与 hello 的文件夹；</li><li>把要添加的图片放在 hello 的文件夹里面，然后！[title] (hello &#x2F; 图片名) 来调用图片。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将Docker容器设置为开机启动项，开机自动启动容器</title>
      <link href="/post/a13.html"/>
      <url>/post/a13.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="将Docker容器设置为开机启动项，开机自动启动容器"><a href="#将Docker容器设置为开机启动项，开机自动启动容器" class="headerlink" title="将Docker容器设置为开机启动项，开机自动启动容器"></a>将Docker容器设置为开机启动项，开机自动启动容器</h1><h2 id="查看容器ID"><a href="#查看容器ID" class="headerlink" title="查看容器ID"></a>查看容器ID</h2><p>进入ssh，然后输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>复制你需要设置开机启动的id</p><h2 id="设置开机自动启动"><a href="#设置开机自动启动" class="headerlink" title="设置开机自动启动"></a>设置开机自动启动</h2><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update --restart=always 你的容器ID</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update --restart=always fbb75d6ef0d1</span><br></pre></td></tr></table></figure><h2 id="如果是新建容器"><a href="#如果是新建容器" class="headerlink" title="如果是新建容器"></a>如果是新建容器</h2><p>新建容器设置开机启动的话只需要添加参数即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always --name 容器名 镜像</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红米AX6刷机+UBOOT完全攻略，随意刷大ROM包</title>
      <link href="/post/miwifi-ax6.html"/>
      <url>/post/miwifi-ax6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote><p><a href="https://pan.wwang.pw/%F0%9F%94%A5OpenWrt_LEAN%E7%89%88%EF%BC%88%E7%9C%8B%E4%B8%8D%E6%87%82%E7%9A%84%E5%B0%B1%E7%82%B9%E5%BC%80%E6%AD%A4%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%89/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8AX6/%E5%88%B7%E6%9C%BA%E5%B7%A5%E5%85%B7">全套刷机工具和固件</a></p></blockquote><p>1、一台刷好openwrt的路由器（无线名称改为OpenWrt，无线密码改为password）</p><p>2、电脑一台，需要用网线的方式连接路由器</p><p>3、准备一个牙签或卡针</p><h2 id="配置openwrt路由器"><a href="#配置openwrt路由器" class="headerlink" title="配置openwrt路由器"></a>配置openwrt路由器</h2><p>电脑用网线连接openwrt路由器</p><ul><li>用winscp把文件<code>xqsystem.lua</code>上传到<code>/usr/lib/lua/luci/controller/admin/</code>目录下</li></ul><p><img src="https://img.x-wan.top/imgs/2022/05/62f7bf37eb5ac33e.png"></p><ul><li><p>openwrt路由器ip设置为 169.254.31.1 然后关闭DHCP</p><p><img src="https://img.x-wan.top/imgs/2022/05/c3661699d1a03973.png"></p></li><li><p>电脑固定ip为169.254.31.3，再重启openwrt路由器</p><p><img src="https://img.x-wan.top/imgs/2022/05/e74023aa10e3ea0c.png"></p></li><li><p>169.254.31.1能进openwrt路由器后台后，浏览器访问<code>http://169.254.31.1/cgi-bin/luci/api/xqsystem/token</code>，之后会出现<code>code 0</code>等字样就OK了</p></li></ul><p><img src="https://img.x-wan.top/imgs/2022/05/27e89a5f243dd8fa.png"></p><p><img src="https://img.x-wan.top/imgs/2022/05/39a4d232b09cd76f.png"></p><ul><li>拔掉openwrt路由器跟电脑的网线放在一边备用（电源不要拔），然后电脑的ip地址改为自动获取。</li></ul><p><img src="https://img.x-wan.top/imgs/2022/05/05c281bb541cb9a7.png"></p><h2 id="开启SSH"><a href="#开启SSH" class="headerlink" title="开启SSH"></a>开启SSH</h2><p>电脑网线连接红米AX6路由器，进入后台</p><p><img src="https://img.x-wan.top/imgs/2022/05/97756368f9c3d5cb.png"></p><p>浏览器访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.10.1/cgi-bin/luci/;stok=ab2186b95ae6335cc1326ba54e6db644/api/misystem/extendwifi_connect?ssid=OpenWrt&amp;password=password</span><br></pre></td></tr></table></figure><blockquote><p><code>http://192.168.10.1/cgi-bin/luci/;stok=ab2186b95ae6335cc1326ba54e6db644</code>改成你的</p></blockquote><p>成功则显示 “code”:0 等字样</p><img src="https://img.x-wan.top/imgs/2022/05/27012ba6ec8639fb.png" style="zoom:25%;" /><p>然后浏览器访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.10.1/cgi-bin/luci/;stok=ab2186b95ae6335cc1326ba54e6db644/api/xqsystem/oneclick_get_remote_token?username=xxx&amp;password=xxx&amp;nonce=xxx</span><br></pre></td></tr></table></figure><blockquote><p><code>http://192.168.10.1/cgi-bin/luci/;stok=ab2186b95ae6335cc1326ba54e6db644</code>改成你的</p></blockquote><p>成功则显示 “code”:0 等字样</p><p><img src="https://img.x-wan.top/imgs/2022/05/212dea1a38c0e8f4.png"></p><h2 id="刷入qsdk固件"><a href="#刷入qsdk固件" class="headerlink" title="刷入qsdk固件"></a>刷入qsdk固件</h2><ul><li><p>用PUTTY或者其他SSH工具登录192.168.31.1 用户名：root 密码：admin</p></li><li><p>依次每行单独复制如下代码并回车</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">nvram set flag_last_success=0</span><br><span class="line">nvram set flag_boot_rootfs=0</span><br><span class="line">nvram set flag_boot_success=1</span><br><span class="line">nvram set flag_try_sys1_failed=0</span><br><span class="line">nvram set flag_try_sys2_failed=0</span><br><span class="line">nvram set boot_wait=on</span><br><span class="line">nvram set uart_en=1</span><br><span class="line">nvram set telnet_en=1</span><br><span class="line">nvram set ssh_en=1</span><br><span class="line">nvram commit</span><br></pre></td></tr></table></figure></li><li><p>打开安装好的WinSCP工具并登录，地址用户名密码和上面一样</p></li><li><p>下载qsdk固件： <strong>xiaomimtd12.bin</strong>并上传到&#x2F;tmp目录下。</p></li><li><p>回到PUTTY继续输入：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mtd write /tmp/xiaomimtd12.bin rootfs</span><br></pre></td></tr></table></figure><p><img src="https://img.x-wan.top/imgs/2022/06/9e465d6f289d17f6.png"></p><ul><li>插拨电源重新启动路由器</li></ul><h2 id="刷入UBOOT"><a href="#刷入UBOOT" class="headerlink" title="刷入UBOOT"></a>刷入UBOOT</h2><ul><li>用winscp工具登录192.168.1.1 用户名：root 密码：password</li><li>将如下压缩包内两个文件上传到路由器 &#x2F;tmp目录下</li></ul><p>UBOOT下载：<a href="https://pan.wwang.pw/%F0%9F%94%A5OpenWrt_LEAN%E7%89%88%EF%BC%88%E7%9C%8B%E4%B8%8D%E6%87%82%E7%9A%84%E5%B0%B1%E7%82%B9%E5%BC%80%E6%AD%A4%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%89/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8AX6/%E5%88%B7%E6%9C%BA%E5%B7%A5%E5%85%B7">AX6-UBOOT.rar</a></p><ul><li>用PUTTY或者其他SSH工具登录192.168.1.1 用户名：root 密码：password</li><li>分别依次输入如下6行代码并回车：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fw_setenv flag_last_success 0</span><br><span class="line">fw_setenv flag_boot_rootfs 0</span><br><span class="line">mtd erase /dev/mtd1</span><br><span class="line">mtd write /tmp/ax6-mibib.bin /dev/mtd1</span><br><span class="line">mtd erase /dev/mtd7</span><br><span class="line">mtd write /tmp/uboot-redmi-ax6.bin /dev/mtd7</span><br></pre></td></tr></table></figure><p>大功告成，以后想怎么刷怎么刷固件了</p><h2 id="UBoot使用方法"><a href="#UBoot使用方法" class="headerlink" title="UBoot使用方法"></a>UBoot使用方法</h2><ul><li><p>网线链接电脑和AX3600路由器，设置ipv4为192.168.1.2 子掩码：255.255.255.0 网关：192.168.1.1</p><p><img src="https://img.x-wan.top/imgs/2022/06/28baf3b0a6456b5a.png"></p></li><li><p>关闭路由器状态下长按路由器reset键同时插上电源，大概5秒松开</p></li><li><p>电脑浏览器输入192.168.1.1进入UBOOT界面，上传你想刷的任何AX6底包（UBI格式包或带factory字样的bin格式包）</p><p><img src="https://img.x-wan.top/imgs/2022/06/99bab1be309419d3.png"></p><p><img src="https://img.x-wan.top/imgs/2022/06/e08d73f40c5947ec.png"></p></li><li><p>在登录路由器后台正常升级你想升级正常的固件包</p></li><li><p>记得用UBOOT刷完底包后把电脑IPV4改成自动获取，在进路由器后台升级</p></li></ul><p><strong>注意：</strong></p><ul><li>如上刷完的底包路由器后台地址：192.168.5.1 用户名和密码：root&#x2F;password</li><li>登录路由器后台后通过备份与升级-升级正常固件包再使用</li></ul>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 红米AX6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PVE | Proxmox VE 修改IP地址以及无法联网问题</title>
      <link href="/post/ee4e.html"/>
      <url>/post/ee4e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="PVE-Proxmox-VE-修改IP地址以及无法联网问题"><a href="#PVE-Proxmox-VE-修改IP地址以及无法联网问题" class="headerlink" title="PVE | Proxmox VE 修改IP地址以及无法联网问题"></a>PVE | Proxmox VE 修改IP地址以及无法联网问题</h1><h2 id="修改-IP-地址"><a href="#修改-IP-地址" class="headerlink" title="修改 IP 地址"></a>修改 IP 地址</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/network/interfaces</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line">iface enp3s0 inet manual</span><br><span class="line"></span><br><span class="line">auto vmbr0</span><br><span class="line">iface vmbr0 inet static</span><br><span class="line">        address 10.0.0.200</span><br><span class="line">        netmask 255.255.255.0</span><br><span class="line">        gateway 10.0.0.1</span><br><span class="line">        bridge_ports enp3s0</span><br><span class="line">        bridge_stp off</span><br><span class="line">        bridge_fd 0</span><br><span class="line"></span><br><span class="line">iface enp5s0 inet manual</span><br></pre></td></tr></table></figure><p>网络设备名每台机器可能会略有不同，忽略，修改 <code>address</code>, <code>netmask</code> 和 <code>gateway</code> 字段对应的值为新环境的网络地址。</p><h2 id="修改终端提示的-URL"><a href="#修改终端提示的-URL" class="headerlink" title="修改终端提示的 URL"></a>修改终端提示的 URL</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/issue</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Welcome to the Proxmox Virtual Environment. Please use your web browser to</span><br><span class="line">configure this server - connect to:</span><br><span class="line"></span><br><span class="line">  https://10.0.0.200:8006/</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p><code>/etc/issue</code> 的内容是 Linux 终端登启动后的欢迎语句。将 URL 中的 IP 地址更改 PVE 新的 IP</p><h2 id="修改-hosts"><a href="#修改-hosts" class="headerlink" title="修改 hosts"></a>修改 hosts</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/hosts</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 localhost.localdomain localhost</span><br><span class="line">10.0.0.200 pve.lan pve</span><br></pre></td></tr></table></figure><p>将 <code>pve.lan</code> （局域网 hostname）映射的 IP 更换成 PVE 新的 IP 地址。</p><h2 id="修改-DNS-这步是取决于PVE能否联网的关键"><a href="#修改-DNS-这步是取决于PVE能否联网的关键" class="headerlink" title="修改 DNS(这步是取决于PVE能否联网的关键)"></a>修改 DNS(这步是取决于PVE能否联网的关键)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/resolv.conf</span><br></pre></td></tr></table></figure><p><code>nameserver </code>114.114.114.114 (这里面建议改为114的DNS)</p><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小米AX3600刷机+UBOOT完全攻略，随意刷大ROM包</title>
      <link href="/post/13cf5208.html"/>
      <url>/post/13cf5208.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h4 id="教程前准备"><a href="#教程前准备" class="headerlink" title="教程前准备"></a>教程前准备</h4><p><a href="https://pan.wwang.pw/%F0%9F%94%A5OpenWrt_LEAN%E7%89%88%EF%BC%88%E7%9C%8B%E4%B8%8D%E6%87%82%E7%9A%84%E5%B0%B1%E7%82%B9%E5%BC%80%E6%AD%A4%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%89/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8AX3600">全套刷机工具和固件</a></p><ul><li>安装WinSCP软件 </li><li>安装PUTTY软件 Windows如上两个工具即可，自行百度下载。</li></ul><h2 id="AX3600系统降级"><a href="#AX3600系统降级" class="headerlink" title="AX3600系统降级"></a>AX3600系统降级</h2><ul><li>浏览器输入：192.168.31.1 登录路由器</li><li>右上角小图标点击选择升级固件</li><li>下载：1.0.17固件，并上传升级至1.0.17漏洞固件</li></ul><p>这一步刷两次，就是升级完后再进去重复升级一次避免后面报错</p><h2 id="获取路由器SSH权限"><a href="#获取路由器SSH权限" class="headerlink" title="获取路由器SSH权限"></a>获取路由器SSH权限</h2><ul><li>浏览器输入：192.168.31.1 登录路由器</li><li>查看路由【STOK】 值<br><code>http://192.168.31.1/cgi-bin/luci/;stok=【STOK】/web/home#router</code><br>直接复制这个STOK值替换进如下这个链接【STOK】位置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.1/cgi-bin/luci/;stok=【STOK】/api/misystem/set_config_iotdev?bssid=Xiaomi&amp;user_id=longdike&amp;ssid=-h%3B%20nvram%20set%20ssh_en%3D1%3B%20nvram%20commit%3B%20sed%20-i%20&#x27;s%2Fchannel%3D.*%2Fchannel%3D%5C%22debug%5C%22%2Fg&#x27;%20%2Fetc%2Finit.d%2Fdropbear%3B%20%2Fetc%2Finit.d%2Fdropbear%20start%3B</span><br></pre></td></tr></table></figure><ul><li>在浏览器打开替换完的链接后回车，网页显示{“code”:0}就表示成功</li><li>接着上面方法将STOK值再替换如下链接【STOK】值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.1/cgi-bin/luci/;stok=【STOK】/api/misystem/set_config_iotdev?bssid=Xiaomi&amp;user_id=longdike&amp;ssid=-h%3B%20echo%20-e%20&#x27;admin%5Cnadmin&#x27;%20%7C%20passwd%20root%3B</span><br></pre></td></tr></table></figure><ul><li>同样在浏览器打开替换完的链接后回车，网页显示{“code”:0}就表示成功</li></ul><h2 id="登录SSH并刷写底包"><a href="#登录SSH并刷写底包" class="headerlink" title="登录SSH并刷写底包"></a>登录SSH并刷写底包</h2><ul><li>用PUTTY或者其他SSH工具登录192.168.31.1 用户名：root 密码：admin</li><li>依次每行单独复制如下代码并回车</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">nvram set flag_last_success=0</span><br><span class="line">nvram set flag_boot_rootfs=0</span><br><span class="line">nvram set flag_boot_success=1</span><br><span class="line">nvram set flag_try_sys1_failed=0</span><br><span class="line">nvram set flag_try_sys2_failed=0</span><br><span class="line">nvram set boot_wait=on</span><br><span class="line">nvram set uart_en=1</span><br><span class="line">nvram set telnet_en=1</span><br><span class="line">nvram set ssh_en=1</span><br><span class="line">nvram commit</span><br></pre></td></tr></table></figure><ul><li>打开安装好的WinSCP工具并登录，地址用户名密码和上面一样</li><li>下载底包： nand-factory.ubi并上传到&#x2F;tmp目录下。</li><li>回到PUTTY继续输入：ubiformat &#x2F;dev&#x2F;mtd12 -y -f &#x2F;tmp&#x2F;替换精简包名.ubi<br>接着依次单排输入如下代码后路由器重启：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nvram set flag_last_success=0</span><br><span class="line">nvram set flag_boot_rootfs=0</span><br><span class="line">nvram commit</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="刷入UBOOT"><a href="#刷入UBOOT" class="headerlink" title="刷入UBOOT"></a>刷入UBOOT</h2><ul><li>用winscp工具登录10.0.0.1 用户名：root 密码：root</li><li>将如下压缩包内两个文件上传到路由器 &#x2F;tmp目录下<br>UBOOT下载：AX3600-UBOOT.rar</li><li>用PUTTY或者其他SSH工具登录10.0.0.1 用户名：root 密码：root</li><li>分别依次输入如下6行代码并回车：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fw_setenv flag_last_success 0</span><br><span class="line">fw_setenv flag_boot_rootfs 0</span><br><span class="line">mtd erase /dev/mtd1</span><br><span class="line">mtd write /tmp/ax3600-mibib.bin /dev/mtd1</span><br><span class="line">mtd erase /dev/mtd7</span><br><span class="line">mtd write /tmp/ax3600-uboot.bin /dev/mtd7</span><br></pre></td></tr></table></figure><p>大功告成，以后想怎么刷怎么刷固件了</p><h2 id="UBoot使用方法："><a href="#UBoot使用方法：" class="headerlink" title="UBoot使用方法："></a>UBoot使用方法：</h2><ul><li>网线链接电脑和AX3600路由器，设置ipv4为192.168.1.111 子掩码：255.255.255.0 网关：192.168.1.1</li><li>关闭路由器状态下长按路由器reset键同时插上电源，大概5秒松开</li><li>电脑浏览器输入192.168.1.1进入UBOOT界面，上传你想刷的任何AX3600底包（UBI格式包或带factory字样的bin格式包）</li><li>在登录路由器后台正常升级你想升级正常的固件包</li><li>记得用UBOOT刷完底包后把电脑IPV4改成自动获取，在进路由器后台升级</li></ul><p><strong>注意：</strong></p><ul><li>如上刷完的底包路由器后台地址：10.0.0.1 用户名和密码：root</li><li>登录路由器后台后通过备份与升级-升级正常固件包再使用</li></ul>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AX3600 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小米路由器CR660X全系列开SSH刷OpenWrt教程</title>
      <link href="/post/cr660x.html"/>
      <url>/post/cr660x.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="路由器硬件配置"><a href="#路由器硬件配置" class="headerlink" title="路由器硬件配置"></a>路由器硬件配置</h2><p>SoC: MediaTek MT7621AT</p><p>RAM: 256MB DDR3 (ESMT M15T2G16128A)</p><p>Flash: 128MB NAND (ESMT F59L1G81MB)</p><p>网口: 1个千兆WAN 3个千兆LAN (MT7530 SoC)</p><p>无线: 2x2 2.4GHz 574Mbps + 2x2 5GHz 1201Mbps (MT7905DAN + MT7975DN)</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>1、一台刷好openwrt的路由器（无线名称改为OpenWrt，无线密码改为password）</p><p>2、电脑一台，需要用网线的方式连接路由器</p><p>3、准备一个牙签或卡针</p><p>本方法支持小米CR660X的全部机型，我用的是小米CR6608。</p><h2 id="配置openwrt路由器"><a href="#配置openwrt路由器" class="headerlink" title="配置openwrt路由器"></a>配置openwrt路由器</h2><p>电脑用网线连接openwrt路由器</p><ul><li>用winscp把文件<code>xqsystem.lua</code>上传到<code>/usr/lib/lua/luci/controller/admin/</code>目录下</li></ul><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/12/15_11_6_7_202212151106326.png"></p><ul><li><p>openwrt路由器ip设置为 169.254.31.1 然后关闭DHCP</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/12/15_11_6_3_202212151106242.png"></p></li><li><p>电脑固定ip为169.254.31.3，再重启openwrt路由器</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/12/15_11_6_1_202212151106719.png"></p></li><li><p>169.254.31.1能进openwrt路由器后台后，浏览器访问<code>http://169.254.31.1/cgi-bin/luci/api/xqsystem/token</code>，之后会出现<code>code 0</code>等字样就OK了</p></li></ul><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/12/15_11_5_54_202212151105041.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/12/15_11_5_52_202212151105371.png"></p><ul><li>拔掉openwrt路由器跟电脑的网线放在一边备用（电源不要拔），然后电脑的ip地址改为自动获取。</li></ul><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/12/15_11_5_50_202212151105298.png"></p><h2 id="CR660X开启SSH"><a href="#CR660X开启SSH" class="headerlink" title="CR660X开启SSH"></a>CR660X开启SSH</h2><p>电脑网线连接CR660x路由器，进入后台</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/12/15_11_5_46_202212151105931.png"></p><p>浏览器访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.10.1/cgi-bin/luci/;stok=ab2186b95ae6335cc1326ba54e6db644/api/misystem/extendwifi_connect?ssid=OpenWrt&amp;password=password</span><br></pre></td></tr></table></figure><blockquote><p><code>http://192.168.10.1/cgi-bin/luci/;stok=ab2186b95ae6335cc1326ba54e6db644</code>改成你的</p></blockquote><p>成功则显示 “code”:0 等字样</p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/12/15_11_5_44_202212151105024.png" style="zoom:25%;" /><p>然后浏览器访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.10.1/cgi-bin/luci/;stok=ab2186b95ae6335cc1326ba54e6db644/api/xqsystem/oneclick_get_remote_token?username=xxx&amp;password=xxx&amp;nonce=xxx</span><br></pre></td></tr></table></figure><blockquote><p><code>http://192.168.10.1/cgi-bin/luci/;stok=ab2186b95ae6335cc1326ba54e6db644</code>改成你的</p></blockquote><p>成功则显示 “code”:0 等字样</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/12/15_11_5_41_202212151105042.png"></p><p><strong>此时已经成功开启SSH接下来刷pb-boot</strong></p><h2 id="刷入pb-boot"><a href="#刷入pb-boot" class="headerlink" title="刷入pb-boot"></a>刷入pb-boot</h2><p>用 winscp 将 <code>pb-boot.img</code> 上传到<code>/tmp</code>目录</p><blockquote><p>用户名root，密码admin</p></blockquote><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/12/15_11_5_38_202212151105474.png"></p><p>执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mtd write /tmp/pb-boot.img Bootloader</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/12/15_11_5_37_202212151105472.png"></p><h2 id="进pb-boot刷固件"><a href="#进pb-boot刷固件" class="headerlink" title="进pb-boot刷固件"></a>进pb-boot刷固件</h2><blockquote><blockquote><p>按住复位孔再插电，20秒后松开，浏览器192.168.1.1进入pb-boot控制台，点浏览，选<code>openwrt-ramips-mt7621-xiaomi_mi-router-cr660x-squashfs-factory.bin</code>，再点恢复固件，等待几分钟即可。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/12/15_11_5_40_202212151105236.jpeg"></p></blockquote></blockquote><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/12/15_11_5_37_202212151105240.png"></p><h2 id="刷机工具和固件"><a href="#刷机工具和固件" class="headerlink" title="刷机工具和固件"></a>刷机工具和固件</h2><blockquote><p><a href="https://pan.wwang.pw/%F0%9F%94%A5OpenWrt_LEAN%E7%89%88%EF%BC%88%E7%9C%8B%E4%B8%8D%E6%87%82%E7%9A%84%E5%B0%B1%E7%82%B9%E5%BC%80%E6%AD%A4%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%89/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8CR660X">下载地址</a></p></blockquote><blockquote><p><a href="https://url.x-wan.top/cr6608">路由器购买链接</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> CR660x </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极路由系列刷老毛子固件后搜不到WiFi的解决办法</title>
      <link href="/post/hiwifi.html"/>
      <url>/post/hiwifi.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>进入breed控制台，修改MAC地址</p></blockquote><blockquote><p><strong>把第一行和第四行都修改成和第二行一样</strong>，再点修改即可</p></blockquote><p><img src="https://home.x-wan.top/upload/2022/05/Snipaste_2022-05-26_14-20-57.png"></p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenWRT基本知识整理</title>
      <link href="/post/openwrt-docs.html"/>
      <url>/post/openwrt-docs.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="OpenWRT基本知识整理"><a href="#OpenWRT基本知识整理" class="headerlink" title="OpenWRT基本知识整理"></a>OpenWRT基本知识整理</h1><h1 id="1-OpenWRT虚拟系统准备"><a href="#1-OpenWRT虚拟系统准备" class="headerlink" title="1.OpenWRT虚拟系统准备"></a>1.OpenWRT虚拟系统准备</h1><p>环境：</p><p>编译服务器：Ubuntu-14.04-desktop</p><p>虚拟机软件：VMWare-10.0</p><p>编译环境准备：apt-get install subversion build-essential libncurses5-dev zlib1g-dev gawk git ccache gettext libssl-dev xsltproc flex gcc-multilib</p><h2 id="1-1-编译openwrt虚拟机系统"><a href="#1-1-编译openwrt虚拟机系统" class="headerlink" title="1.1.编译openwrt虚拟机系统"></a>1.1.编译openwrt虚拟机系统</h2><h3 id="1-1-1-准备源码"><a href="#1-1-1-准备源码" class="headerlink" title="1.1.1 准备源码"></a>1.1.1 准备源码</h3><p>#cd &#x2F;home&#x2F;nickli&#x2F;</p><p>#mkdir openwrt_SDK</p><p>#cd openwrt_SDK</p><p>#svn checkout</p><p>svn:&#x2F;&#x2F;svn.openwrt.org&#x2F;openwrt&#x2F;branches&#x2F;barrier_breaker</p><h3 id="1-1-2-准备源码包"><a href="#1-1-2-准备源码包" class="headerlink" title="1.1.2 准备源码包"></a>1.1.2 准备源码包</h3><p>#cd barrier_breaker</p><p>#mkdir dl</p><p>#cp -r &#x2F;home&#x2F;public&#x2F;openwrt_dl&#x2F;* .&#x2F;dl&#x2F;</p><p>之前已经将几乎所有的编译时需要下载的源码包下载到了&#x2F;home&#x2F;public&#x2F;openwrt_dl 目录下，所以为减少编译时间直接将该目录链接到新的SDK中。</p><h3 id="1-1-3-编译配置"><a href="#1-1-3-编译配置" class="headerlink" title="1.1.3 编译配置"></a>1.1.3 编译配置</h3><p>#make defconfig</p><p>#make prereq</p><p>#make menuconfig  &#x2F;&#x2F;配置系统编译选单时需注意以下几点：</p><ul><li>系统目标平台选择为x86</li><li>目标文件为虚拟机文件***.vmdk</li><li>选择c库(uClibc&#x2F;eglibc&#x2F;glibc……)</li><li>配置系统所需的基本配置比如adduser&#x2F;addgroup&#x2F;su等命令（basesystem&#x2F;busybox）</li></ul><p>退出配置单并保存。</p><h3 id="1-1-4-编译"><a href="#1-1-4-编译" class="headerlink" title="1.1.4 编译"></a>1.1.4 编译</h3><p>#make V&#x3D;99</p><p>完成以后镜像文件“openwrt-x86-generic-combined-squashfs.vmdk”存在于bin&#x2F;x86&#x2F;目录下,将该文件拷贝到windows下如F:&#x2F;template&#x2F;下。</p><h2 id="1-2-安装虚拟机"><a href="#1-2-安装虚拟机" class="headerlink" title="1.2.安装虚拟机"></a>1.2.安装虚拟机</h2><h3 id="1-2-1-新建虚拟机"><a href="#1-2-1-新建虚拟机" class="headerlink" title="1.2.1.新建虚拟机"></a>1.2.1.新建虚拟机</h3><p>下一步</p><p>选择稍后安装操作系统</p><p>客户及操作系统选择Linux，版本选择“其他Linux 2.6.x内核”</p><p>为虚拟机命名，并选择之前镜像存放的路径作为虚拟机存放路径</p><p>点击继续</p><p>Cpu&#x2F;memory等信息保持默认，点击下一步即可：</p><p>内存选择512足够了：</p><p>选择桥接：</p><p>保持默认，点击下一步</p><p>选择硬盘类型为IDE:</p><p>创建新磁盘：</p><p>设置磁盘大小10G：</p><p>然后一路默认，点击“下一步”直到结束。</p><h3 id="1-2-2-修改虚拟机配置文件："><a href="#1-2-2-修改虚拟机配置文件：" class="headerlink" title="1.2.2.修改虚拟机配置文件："></a>1.2.2.修改虚拟机配置文件：</h3><p>进入以上放置虚拟机的目录，并找后缀为vmx的文件，使用记事本打开，将以下途中表示的虚拟机名字修改成第一步中编译出来，保存在本地的那个系统镜像名称：</p><p>修改完成后保存退出。</p><p>在vmware中启动刚刚新建的虚拟机“smartRouter_4x4”</p><h1 id="2-配置使用"><a href="#2-配置使用" class="headerlink" title="2.配置使用"></a>2.配置使用</h1><h2 id="2-1-设置root密码"><a href="#2-1-设置root密码" class="headerlink" title="2.1.设置root密码"></a>2.1.设置root密码</h2><p>#passwd</p><p>两次输入密码即可</p><p>重启系统即可</p><h2 id="2-2-网络配置"><a href="#2-2-网络配置" class="headerlink" title="2.2.网络配置"></a>2.2.网络配置</h2><p>#vi &#x2F;etc&#x2F;config&#x2F;network</p><p>保存退出，后重启网络：</p><p>#&#x2F;etc&#x2F;init.d&#x2F;network restart</p><p>#ifconfig  br-lan</p><p>以上红色标注处显示修改成功。</p><h2 id="2-3-关于ssh"><a href="#2-3-关于ssh" class="headerlink" title="2.3.关于ssh"></a>2.3.关于ssh</h2><p>OpenWrt 中默认自带的 SSH 服务端和客户端是 Dropbear</p><p>使用ssh代理方法，实现自动登录ssh，类似于convirt节点管理方法：</p><p><a href="http://talk.withme.me/?p=210#codesyntax_1">http://talk.withme.me/?p=210#codesyntax_1</a></p><h1 id="3-软件安装方法"><a href="#3-软件安装方法" class="headerlink" title="3.软件安装方法"></a>3.软件安装方法</h1><h2 id="3-1-本地安装ipk软件包"><a href="#3-1-本地安装ipk软件包" class="headerlink" title="3.1.本地安装ipk软件包"></a>3.1.本地安装ipk软件包</h2><p>使用命令:opkg install softwall.ipk</p><p>例如：安装sftp</p><p>首先下载软件：</p><p>#cd &#x2F;root</p><p>#wget <a href="http://downloads.openwrt.org/backfire/10.03.1/x86_generic/packages/openssh-sftp-server_5.8p2-2_x86.ipk">http://downloads.openwrt.org/backfire/10.03.1/x86_generic/packages/openssh-sftp-server_5.8p2-2_x86.ipk</a></p><p># opkg install openssh-sftp-server_5.8p2-2_x86.ipk</p><p>Installing openssh-sftp-server (5.8p2-2) to root…</p><p>Configuring openssh-sftp-server.</p><h2 id="3-2-在线安装软件及设置"><a href="#3-2-在线安装软件及设置" class="headerlink" title="3.2.在线安装软件及设置"></a>3.2.在线安装软件及设置</h2><h3 id="3-2-1-设置软件源"><a href="#3-2-1-设置软件源" class="headerlink" title="3.2.1.设置软件源"></a>3.2.1.设置软件源</h3><p>#vim &#x2F;etc&#x2F;opkg.conf</p><p>内容如下：</p><p>dest root &#x2F;</p><p>dest ram &#x2F;tmp</p><p>lists_dir ext &#x2F;var&#x2F;opkg-lists</p><p>option overlay_root &#x2F;overlay</p><p>src&#x2F;gz barrier_breaker_base <a href="http://downloads.openwrt.org/barrier_breaker/14.07/x86/generic/packages/base">http://downloads.openwrt.org/barrier_breaker/14.07/x86/generic/packages/base</a></p><p>最后一行url为实际可以下载到ipk的地址，配置好后才能使用在线安装功能。</p><h3 id="3-2-2-安装软件"><a href="#3-2-2-安装软件" class="headerlink" title="3.2.2.安装软件"></a>3.2.2.安装软件</h3><p>更新可用ipk软件包列表：</p><p>#opkg update</p><p>查看所有ipk包列表：</p><p>#opkg list</p><p>#opkg install software.ipkg</p><p>安装软件：</p><p>#opkg install software.ipk</p><h3 id="3-2-3-直接安装"><a href="#3-2-3-直接安装" class="headerlink" title="3.2.3.直接安装"></a>3.2.3.直接安装</h3><p>在3.1节中，描述的安装本地软件，实际上是先wget下载一个软件到本地，然后再执行本地安装，实际上可以直接使用opkg install URL的方式在线安装。如下：</p><p>#opkg install <a href="http://downloads.openwrt.org/backfire/10.03.1/x86_generic/packages/openssh-sftp-server_5.8p2-2_x86.ipk">http://downloads.openwrt.org/backfire/10.03.1/x86_generic/packages/openssh-sftp-server_5.8p2-2_x86.ipk</a></p><h2 id="3-3-使用本地服务器做软件源以安装自定义软件"><a href="#3-3-使用本地服务器做软件源以安装自定义软件" class="headerlink" title="3.3.使用本地服务器做软件源以安装自定义软件"></a>3.3.使用本地服务器做软件源以安装自定义软件</h2><p>安装本地软件有两种方法：一种是将本地软件scp到openwrt系统中，通过opkg安装即可；第二种就是在本地服务器上搭建一个ftp服务器， 然后在openwrt系统软件源中添加该服务器的url，然后通过在线安装的方式安装本地服务器上制作的Ipk包。现就第二种方式做介绍。</p><h3 id="3-3-1-在编译服务器上配置vsftp服务器"><a href="#3-3-1-在编译服务器上配置vsftp服务器" class="headerlink" title="3.3.1.在编译服务器上配置vsftp服务器"></a>3.3.1.在编译服务器上配置vsftp服务器</h3><p>2.11安装ftp服务器</p><p>#sudo apt-get install vsftpd</p><p># sudo gedit &#x2F;etc&#x2F;vsftpd.conf</p><p>原文件中不少指令被注释，只要启用部分即可，一下是启用的命令（配置文件中对每一条都有具体说明）</p><p>listen&#x3D;YES    # 服务器监听</p><p>anonymous_enable&#x3D;YES    # 匿名访问允许</p><p>local_enable&#x3D;YES  # 本地主机访问允许</p><p>write_enable&#x3D;YES  # 写允许</p><p>anon_upload_enable&#x3D;YES</p><p># 匿名上传允许，默认是NO，嫌麻烦的可以开起来。出了问题我不负责～</p><p>anon_mkdir_write_enable&#x3D;YES # 匿名创建文件夹允许</p><p>dirmessage_enable&#x3D;YES # 进入文件夹允许</p><p>xferlog_enable&#x3D;YES  # ftp 日志记录允许</p><p>connect_from_port_20&#x3D;YES   # 允许使用20号端口作为数据传送的端口</p><p>secure_chroot_dir&#x3D;&#x2F;var&#x2F;run&#x2F;vsftpd&#x2F;empty</p><p>pam_service_name&#x3D;vsftpd</p><p>rsa_cert_file&#x3D;&#x2F;etc&#x2F;ssl&#x2F;private&#x2F;vsftpd.pem</p><p>保存。</p><p>创建匿名访问目录以供openwrt访问</p><p>#mkdir &#x2F;srv&#x2F;ftp</p><p>修改ftp目录权限：</p><p>#chmod 755 &#x2F;srv&#x2F;ftp</p><p>创建upload download目录</p><p>#mkdir –p –m 777 &#x2F;srv&#x2F;ftp&#x2F;upload</p><p>#mkdir –p –m 755 &#x2F;srv&#x2F;ftp&#x2F;download</p><p>重启vsftpd</p><p>#service vsftpd restart</p><p>然后将&#x2F;home&#x2F;nickli&#x2F;openwrt_SDK&#x2F;barrier_breaker&#x2F;bin&#x2F;x86&#x2F;packages 目录下所有的内容都拷贝到&#x2F;srv&#x2F;ftp&#x2F;download目录下：</p><p>#scp -r &#x2F;home&#x2F;nickli&#x2F;openwrt_SDK&#x2F;barrier_breaker&#x2F;bin&#x2F;x86&#x2F;packages &#x2F;srv&#x2F;ftp&#x2F;download&#x2F;</p><p>默认情况下，每个用户的家目录会自动做为vsftp服务的根目录。也就是说使用用户A的权限来访问该ftp服务器时，其登录到的ftp根目录就是该用户A在该ftp服务器寄存的这台主机上自己的home目录。</p><p>本文档制作时服务器IP为10.8.3.50的ubuntu-14.04系统，OpenWRT的SDK在&#x2F;home&#x2F;nickli &#x2F;openwrt_SDK&#x2F;barrier_breaker目录下。编译出来的所有成果在该目录的bin目录下。我们将使用编译出的packages作为 最终的软件源。</p><h3 id="3-3-2-修改openwrt在线安装软件源"><a href="#3-3-2-修改openwrt在线安装软件源" class="headerlink" title="3.3.2.修改openwrt在线安装软件源"></a>3.3.2.修改openwrt在线安装软件源</h3><p>openwrt端修改opkg.conf，添加ftp服务器ipk包存在地址，注释掉系统默认的url地址如下红色标注，并添加绿色标注的文字：</p><p>src&#x2F;gz barrier_breaker_base <a href="ftp://10.8.3.50/download/packages/base">ftp://10.8.3.50/download/packages/base</a></p><p>(或者src&#x2F;gz packages <a href="ftp://10.8.3.50/download/packages/base">ftp://10.8.3.50/download/packages/base</a>)</p><p>dest root &#x2F;</p><p>dest ram &#x2F;tmp</p><p>lists_dir ext &#x2F;var&#x2F;opkg-lists</p><p>option overlay_root &#x2F;overlay</p><p>#src&#x2F;gz barrier_breaker_base <a href="http://downloads.openwrt.org/barrier_breaker/14.07/x86/generic/packages/base">http://downloads.openwrt.org/barrier_breaker/14.07/x86/generic/packages/base</a></p><h3 id="3-3-3更新opkg"><a href="#3-3-3更新opkg" class="headerlink" title="3.3.3更新opkg"></a>3.3.3更新opkg</h3><p>#opkg update</p><p>若无错误提示，则表示可以正常使用opkg从ftp下载ipk包了。</p><h3 id="3-3-3-通过命令安装ipk软件"><a href="#3-3-3-通过命令安装ipk软件" class="headerlink" title="3.3.3.通过命令安装ipk软件"></a>3.3.3.通过命令安装ipk软件</h3><p>#opkg install software.ipk</p><h1 id="4-openwrt-SDK源码目录结构"><a href="#4-openwrt-SDK源码目录结构" class="headerlink" title="4.openwrt SDK源码目录结构"></a>4.openwrt SDK源码目录结构</h1><h2 id="4-1-源码下载"><a href="#4-1-源码下载" class="headerlink" title="4.1.源码下载"></a>4.1.源码下载</h2><p>OpenWrt的源代码管理默认用的是SVN下载：</p><p>svn co svn:&#x2F;&#x2F;svn.openwrt.org&#x2F;openwrt&#x2F;trunk&#x2F; .</p><p>还可以用Git下载：</p><p>git clone git:&#x2F;&#x2F;git.openwrt.org&#x2F;openwrt.git</p><p>git clone git:&#x2F;&#x2F;git.openwrt.org&#x2F;packages.git</p><p>参考方法：<a href="https://dev.openwrt.org/wiki/GetSource">https://dev.openwrt.org/wiki/GetSource</a></p><h2 id="4-2-OpenWRT的feeds"><a href="#4-2-OpenWRT的feeds" class="headerlink" title="4.2.OpenWRT的feeds"></a>4.2.OpenWRT的feeds</h2><p>包括：</p><p>packages – 提供众多库, 工具等基本功能. 也是其他feed所依赖的软件源, 因此在安装其他feed前一定要先安装packages!</p><p>luci – OpenWrt默认的GUI(WEB管理界面).</p><p>xwrt – 另一种可替换LuCI的GUI</p><p>qpe – DreamBox维护的基于Qt的图形界面, 包含Qt2, Qt4, Qtopia, OPIE, SMPlayer等众多图形界面.</p><p>device – DreamBox维护与硬件密切相关的软件, 如uboot, qemu等.</p><p>dreambox_packages – DreamBox维护的国内常用网络工具, 如oh3c, njit8021xclient等.</p><p>desktop – OpenWrt用于桌面的一些软件包.</p><p>xfce – 基于Xorg的著名轻量级桌面环境. Xfce建基在GTK+2.x之上, 它使用Xfwm作为窗口管理器.</p><p>efl – 针对enlightenment.</p><p>phone -针对fso, paroli.</p><p>trunk中默认的feeds下载有packages、xwrt、luci、routing、telephony。如要下载其他的软件包，需打开源码根目录下面的feeds.conf.default文件，去掉相应软件包前面的#号，然后更新源:</p><p>.&#x2F;scripts&#x2F;feeds update -a</p><p>安装下载好的包:</p><p>.&#x2F;scripts&#x2F;feeds install -a</p><h2 id="4-3-OpenWrt源码目录结构"><a href="#4-3-OpenWrt源码目录结构" class="headerlink" title="4.3.OpenWrt源码目录结构"></a>4.3.OpenWrt源码目录结构</h2><p><strong>tools</strong>和<strong>toolchain</strong>目录：包含了一些通用命令, 用来生成固件, 编译器, 和C库.</p><p><strong>build dir&#x2F;host</strong>目录：是一个临时目录, 用来储存不依赖于目标平台的工具.</p><p><strong>build dir&#x2F;toolchain</strong>-目录：用来储存依赖于指定平台的编译链. 只是编译文件存放目录无需修改.</p><p><strong>build dir&#x2F;target</strong>-目录：用来储存依赖于指定平台的软件包的编译文件, 其中包括linux内核, u-boot, packages, 只是编译文件存放目录无需修改.</p><p><strong>staging_dir</strong>目录：是编译目标的最终安装位置, 其中包括rootfs, package, toolchain.</p><p><strong>package</strong>目录：软件包的下载编译规则, 在OpenWrt固件中, 几乎所有东西都是.ipk, 这样就可以很方便的安装和卸载.</p><p><strong>target</strong>目录：目标系统指嵌入式设备, 针对不同的平台有不同的特性, 针对这些特性, “target&#x2F;linux”目录下按照平台进行目录划分, 里面包括了针对标准内核的补丁, 特殊配置等.</p><p><strong>bin</strong>目录：编译完OpenWrt的二进制文件生成目录, 其中包括sdk, uImage, u-boot, dts, rootfs构建一个嵌入式系统完整的二进制文件.</p><p><strong>config</strong>目录：存放着整个系统的的配置文件.</p><p><strong>docs</strong>目录：里面不断包含了整个宿主机的文件源码的介绍, 里面还有Makefile为目标系统生成docs.</p><p><strong>include</strong>目录：里面包括了整个系统的编译需要的头文件, 但是是以Make进行连接的.</p><p><strong>feeds</strong>目录：扩展软件包索引目录.</p><p><strong>scripts</strong>目录：组织编译整个OpenWrt的规则.</p><p><strong>tmp</strong>目录：编译文件夹, 一般情况为空.</p><p><strong>dl</strong>目录：所有软件的下载目录, 包括u-boot, kernel.</p><p><strong>logs</strong>目录：如果编译出错, 可以在这里找到编译出错的log.</p><h2 id="4-4-基本命令介绍"><a href="#4-4-基本命令介绍" class="headerlink" title="4.4.基本命令介绍"></a>4.4.基本命令介绍</h2><p>#.&#x2F;scripts&#x2F;feeds update -a</p><p>#.&#x2F;scripts&#x2F;feeds install -a</p><p>#make prereq &#x2F;&#x2F;该命令可以检查SDK中target内是否有存在错误的Makefile。</p><p>#make defconfig</p><p>#make menuconfig</p><p>#make kernel_config</p><p>#make V&#x3D;99</p><p>#make package&#x2F;pacakge_name&#x2F;{clean,prepare,compile,install} V&#x3D;99</p><h1 id="5-用户层模块开发方法"><a href="#5-用户层模块开发方法" class="headerlink" title="5.用户层模块开发方法"></a>5.用户层模块开发方法</h1><h2 id="5-1-SDK准备"><a href="#5-1-SDK准备" class="headerlink" title="5.1.SDK准备"></a>5.1.SDK准备</h2><p>请参考：4.1小节内容。</p><h2 id="5-2-添加模块代码"><a href="#5-2-添加模块代码" class="headerlink" title="5.2.添加模块代码"></a>5.2.添加模块代码</h2><p>例如添加模块名字加hello，其目录树如下：</p><p>hello</p><p>├── files   ———————–文件夹：存放文件如：服务配置文件&#x2F;启动脚本等</p><p>├── Makefile ————————文件：打包相关的Makefile</p><p>└── src   ———————–文件夹：存放模块源码文件</p><p>├── hello.c ———————文件：源代码</p><p>└── Makefile ——————文件：源码编译用的Makefile</p><h2 id="5-3-模块程序源代码"><a href="#5-3-模块程序源代码" class="headerlink" title="5.3.模块程序源代码"></a>5.3.模块程序源代码</h2><p>#include&lt;stdio.h&gt;</p><p>int main ()</p><p>{</p><p>printf(“hello world!\n”);</p><p>return 0;</p><p>}</p><h2 id="5-4-源码编译Makefile"><a href="#5-4-源码编译Makefile" class="headerlink" title="5.4.源码编译Makefile"></a>5.4.源码编译Makefile</h2><p>hello:hello.o</p><p>$(CC) -o $@ $^</p><p>hello.o:hello.c</p><p>$(CC) -c $&lt;</p><p>clean:</p><p>rm -rf *.o hello</p><h2 id="5-5-ipK包制作规则Makefile"><a href="#5-5-ipK包制作规则Makefile" class="headerlink" title="5.5.ipK包制作规则Makefile"></a>5.5.ipK包制作规则Makefile</h2><p>#</p><p># Copyright (C) 2006-2010 OpenWrt.org</p><p>#</p><p># This is free software, licensed under the GNU General Public License v2.</p><p># See &#x2F;LICENSE for more information.</p><p>#</p><p>include $(TOPDIR)&#x2F;rules.mk</p><p>PKG_NAME:&#x3D;hello</p><p>PKG_VERSION:&#x3D;1.0</p><p>PKG_RELEASE:&#x3D;1.0</p><p>PKG_BUILD_DIR :&#x3D; $(BUILD_DIR)&#x2F;$(PKG_NAME)</p><p>include $(INCLUDE_DIR)&#x2F;package.mk</p><p>define Package&#x2F;hello</p><p>SECTION:&#x3D;libs</p><p>CATEGORY:&#x3D;Libraries</p><p>TITLE:&#x3D;hello</p><p>endef</p><p>define Build&#x2F;Prepare</p><p>mkdir -p $(PKG_BUILD_DIR)</p><p>$(CP) .&#x2F;src&#x2F;* $(PKG_BUILD_DIR)&#x2F;</p><p>endef</p><p>define Package&#x2F;hello&#x2F;description</p><p>the hello is the base utils of the skysoft’s smartrouter</p><p>endef</p><p>define Package&#x2F;hello&#x2F;install</p><p>$(INSTALL_DIR) $(1)&#x2F;usr&#x2F;lib&#x2F;</p><p>$(CP) $(PKG_BUILD_DIR)&#x2F;hello.so* $(1)&#x2F;usr&#x2F;lib&#x2F;</p><p>endef</p><p>$(eval $(call BuildPackage,hello))</p><p><strong>注意以上红色标注部分文字须保持一致。</strong></p><h2 id="5-6-编译模块"><a href="#5-6-编译模块" class="headerlink" title="5.6.编译模块"></a>5.6.编译模块</h2><p>$ make package&#x2F;libs&#x2F;hello&#x2F;compile V&#x3D;99</p><p>$ make package&#x2F;libs&#x2F;hello&#x2F;clean</p><p>$ make package&#x2F;skysoft_web_admin&#x2F;{clean,prepare,compile} V&#x3D;99</p><h2 id="5-7-ipk包制作"><a href="#5-7-ipk包制作" class="headerlink" title="5.7.ipk包制作"></a>5.7.ipk包制作</h2><p>加入install后会将编译结果打包安装到SDK目录下bin目录下相应位置。</p><p>$ make package&#x2F;skysoft_web_admin&#x2F;{clean,prepare,compile,install} V&#x3D;99</p><h2 id="5-8-安装测试"><a href="#5-8-安装测试" class="headerlink" title="5.8.安装测试"></a>5.8.安装测试</h2><p>编译完成后在SDK目录下的&#x2F;bin&#x2F;x86&#x2F;package&#x2F;base文件夹下回有hello*.ipk文件，将bin&#x2F;x86&#x2F;package 整个目录拷贝到ftp下载目录&#x2F;srv&#x2F;ftp&#x2F;download&#x2F;下，采用在openwrt在线安装的方式，或者直接远程拷贝到目标openwrt系统 中安装。</p><h1 id="6-内核模块开发方法"><a href="#6-内核模块开发方法" class="headerlink" title="6.内核模块开发方法"></a>6.内核模块开发方法</h1><p>OpenWrt开发内核驱动有多种方式，前面讲到的制作内核补丁也是一种开发方法。这里介绍直接在OpenWrt系统上开发内核驱动，把内核驱动做成ipk软件包的形式。</p><h2 id="6-1-建立工作目录"><a href="#6-1-建立工作目录" class="headerlink" title="6.1.建立工作目录"></a>6.1.建立工作目录</h2><p><strong>$cd openwrt&#x2F;trunk&#x2F;package</strong></p><p><strong>$mkdir example</strong></p><h2 id="6-2-进入example目录，创建Makefile文件和代码路径"><a href="#6-2-进入example目录，创建Makefile文件和代码路径" class="headerlink" title="6.2.进入example目录，创建Makefile文件和代码路径"></a>6.2.进入example目录，创建Makefile文件和代码路径</h2><p><strong>$cd example</strong></p><p><strong>$mkdir src</strong></p><p><strong>$vim Makefile</strong></p><p><strong>文件内容如下：</strong></p><p><strong># Kernel module example</strong></p><p><strong>include $(TOPDIR)&#x2F;rules.mk</strong></p><p><strong>include $(INCLUDE_DIR)&#x2F;kernel.mk</strong></p><p><strong>PKG_NAME:&#x3D;example</strong></p><p><strong>PKG_RELEASE:&#x3D;1</strong></p><p><strong>include $(INCLUDE_DIR)&#x2F;package.mk</strong></p><p><strong>define KernelPackage&#x2F;example</strong></p><p>　　<strong>SUBMENU:&#x3D;Other modules</strong></p><p>　　<strong>DEPENDS:&#x3D;@TARGET_octeon</strong></p><p>　　<strong>TITLE:&#x3D;Support Module for example</strong></p><p>　　<strong>AUTOLOAD:&#x3D;$(call AutoLoad,81,example)</strong></p><p>　　<strong>FILES:&#x3D;$(PKG_BUILD_DIR)&#x2F;example&#x2F;example.$(LINUX_KMOD_SUFFIX)</strong></p><p><strong>endef</strong></p><p><strong>define Build&#x2F;Prepare</strong></p><p>　　<strong>mkdir -p $(PKG_BUILD_DIR)</strong></p><p>　　<strong>$(CP) -R .&#x2F;src&#x2F;* $(PKG_BUILD_DIR)&#x2F;</strong></p><p><strong>endef</strong></p><p><strong>define Build&#x2F;Compile</strong></p><p>　　**$(MAKE) -C “$(LINUX_DIR)” **</p><p>　　　　*<em>CROSS_COMPILE&#x3D;”$(TARGET_CROSS)” *</em></p><p>　　　　*<em>ARCH&#x3D;”$(LINUX_KARCH)” *</em></p><p>　　　　*<em>SUBDIRS&#x3D;”$(PKG_BUILD_DIR)&#x2F;example” *</em></p><p>　　　　*<em>EXTRA_CFLAGS&#x3D;”-g $(BUILDFLAGS)” *</em></p><p>　　　　<strong>modules</strong></p><p><strong>endef</strong></p><p><strong>$(eval $(call KernelPackage,example))</strong></p><p>注释：AUTOLOAD：定义了内核模块开机自动挂载的动作，$(call AutoLoad,81,example)，表示当系统启动时名叫“example”的内核模块会在顺序为第81的位置加载到系统中，不必每次启动系统后 手动的去insmod加载模块。如果正常，本模块ipk包制作好并安装到目标系统中后，会在目标系统的&#x2F;etc&#x2F;modules.d&#x2F;目录下创建一份名叫 81-example的加载序列文件，其内容为example。而本ipk安装后会在&#x2F;lib&#x2F;moudules&#x2F;$(KERNEL-VERSION) &#x2F;目录下放置example.ko文件。而如果本软件包包含了多个内核模块文件，比如多个“.ko”文件，那么在这个位置就要加入多个模块名，模块名之间 以“空格”隔开，如下例： </p><p><strong>define KernelPackage&#x2F;exfat</strong></p><p> <strong>SUBMENU:&#x3D;Other modules</strong></p><p> <strong>TITLE:&#x3D;exfat driver</strong></p><p> <strong>DEPENDS:&#x3D;+kmod-nls-base @BUILD_PATENTED</strong></p><p> <strong>FILES:&#x3D;$(PKG_BUILD_DIR)&#x2F;*.$(LINUX_KMOD_SUFFIX)</strong></p><p> <strong>AUTOLOAD:&#x3D;$(call AutoLoad,82,exfat_core exfat_fs)</strong></p><p> <strong>KCONFIG:&#x3D;</strong></p><p><strong>endef</strong></p><p>定义的模块名称为exfat，其内部有两个内核文件需要添加，分别为exfat_core.ko,exfat_fs.ko。</p><h2 id="6-3-进入src目录，创建代码路径和相关源文件"><a href="#6-3-进入src目录，创建代码路径和相关源文件" class="headerlink" title="6.3.进入src目录，创建代码路径和相关源文件"></a>6.3.进入src目录，创建代码路径和相关源文件</h2><p><strong>$cd src</strong></p><p><strong>$mkdir example</strong></p><p><strong>$cd example</strong></p><p><strong>$vim example.c</strong></p><p><strong>编辑内容如下：</strong></p><p><strong>#include &lt;linux&#x2F;init.h&gt;</strong></p><p><strong>#include &lt;linux&#x2F;module.h&gt;</strong></p><p><strong>#include &lt;linux&#x2F;kernel.h&gt;</strong></p><p><strong>&#x2F;* hello_init —-</strong> <strong>初始化函数，当模块装载时被调用，如果成功装载返回0</strong> <strong>否则返回非0****值 *&#x2F;</strong></p><p><strong>static int __init hello_init(void)</strong></p><p><strong>{</strong></p><p>　　　<strong>printk(“I bear a charmed life.\n”);</strong></p><p>　　　<strong>return 0;</strong></p><p><strong>}</strong></p><p><strong>&#x2F; * hello_exit —-</strong> <strong>退出函数，当模块卸载时被调用 *&#x2F;</strong></p><p><strong>static void __exit hello_exit(void)</strong></p><p><strong>{</strong></p><p>　　　<strong>printk(“Out, out, brief candle\n”);</strong></p><p><strong>}</strong></p><p><strong>module_init(hello_init);</strong></p><p><strong>module_exit(hello_exit);</strong></p><p><strong>MODULE_LICENSE(“GPL”);</strong></p><p><strong>MODULE_AUTHOR(“Pillar_zuo”);</strong></p><p><strong>vim Kconfig</strong></p><p><strong>config EXAMPLE</strong></p><p>　　<strong>tristate “Just a example”</strong></p><p>　　<strong>default n</strong></p><p>　　<strong>help</strong></p><p>　　　<strong>This is a example, for debugging kernel model.</strong></p><p>　　　<strong>If unsure, say N.</strong></p><p><strong>保存并退出。</strong></p><p><strong>增加源码编译Makefile****：</strong></p><p><strong>$vim Makefile</strong></p><p><strong>内容如下：</strong></p><p><strong>obj-m :&#x3D; example.o</strong></p><h2 id="6-4-回到OpenWrt源码根目录下"><a href="#6-4-回到OpenWrt源码根目录下" class="headerlink" title="6.4.回到OpenWrt源码根目录下"></a>6.4.回到OpenWrt源码根目录下</h2><p><strong>$make menuconfig</strong></p><p>　　<strong>Kernel modules —&gt;</strong></p><p>　　　　<strong>Other modules —&gt;</strong></p><p>　　　　　　<strong>kmod-example</strong></p><p>选项设置为M，保存退出</p><p>然后编译该模块：</p><p><strong>$make package&#x2F;example&#x2F;compile</strong></p><p><strong>$make package&#x2F;index</strong></p><h2 id="6-5-在OpenWrt系统里面就可以用opkg下载使用了。"><a href="#6-5-在OpenWrt系统里面就可以用opkg下载使用了。" class="headerlink" title="6.5.在OpenWrt系统里面就可以用opkg下载使用了。"></a>6.5.在OpenWrt系统里面就可以用opkg下载使用了。</h2><p>方法参考第三节内容。</p><h1 id="7-openwrt-Makefile框架分析"><a href="#7-openwrt-Makefile框架分析" class="headerlink" title="7.openwrt Makefile框架分析"></a>7.openwrt Makefile框架分析</h1><p>本节原文地址：<a href="http://www.cnblogs.com/sammei/p/3968916.html">http://www.cnblogs.com/sammei/p/3968916.html</a></p><p>本篇的主要目的是想通过分析Makefile，了解openwrt编译过程。着重关注以下几点：</p><ul><li><strong>openwrt****目录结构</strong></li><li><strong>主Makefile****的解析过程，各子目录的目标生成</strong></li><li><strong>kernel****编译过程</strong></li><li><strong>firmware****的生成过程</strong></li><li><strong>软件包的编译过程</strong></li></ul><h2 id="7-1-openwrt目录结构"><a href="#7-1-openwrt目录结构" class="headerlink" title="7.1.openwrt目录结构"></a>7.1.openwrt目录结构</h2><p>官方源下载速度太慢，我从github上clone了openwrt的代码仓库。</p><p>git clone <a href="https://github.com/openwrt-mirror/openwrt.git">https://github.com/openwrt-mirror/openwrt.git</a></p><p>openwrt目录结构</p><p>上图是openwrt目录结构，其中第一行是原始目录，第二行是编译过程中生成的目录。各目录的作用是：</p><p><strong>tools</strong> – 编译时需要一些工具， tools里包含了获取和编译这些工具的命令。里面是一些Makefile，有的可能还有patch。每个Makefile里都有一句 $(eval $(call HostBuild))，表示编译这个工具是为了在主机上使用的。</p><p><strong>toolchain</strong> – 包含一些命令去获取kernel headers, C library, bin-utils, compiler, debugger</p><p><strong>target</strong> – 各平台在这个目录里定义了firmware和kernel的编译过程。</p><p><strong>package</strong> – 包含针对各个软件包的Makefile。openwrt定义了一套Makefile模板，各软件参照这个模板定义了自己的信息，如软件包的版本、下载地址、编译方式、安装地址等。</p><p><strong>include</strong> – openwrt的Makefile都存放在这里。</p><p><strong>scripts</strong> – 一些perl脚本，用于软件包管理。</p><p><strong>dl</strong> – 软件包下载后都放到这个目录里</p><p><strong>build_dir</strong> – 软件包都解压到build_dir&#x2F;里，然后在此编译</p><p><strong>staging_dir</strong> – 最终安装目录。tools, toolchain被安装到这里，rootfs也会放到这里。例如puma_SDK中文件系统目录为：</p><p>&#x2F;home&#x2F;nickli&#x2F;2015-Router_N01-PUMA_4x4&#x2F;trunk&#x2F;02.DevelopementRepository&#x2F;04.Coding&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;staging_dir&#x2F;target-arm_v7-a_uClibc-0.9.33.2_eabi&#x2F;root-ipq806x</p><p><strong>feeds</strong> – 扩展软件包索引目录。</p><p><strong>bin</strong> – 编译完成之后，firmware和各ipk会放到此目录下。</p><p><strong>推荐阅读官方资料</strong>：<a href="http://www.ccs.neu.edu/home/noubir/Courses/CS6710/S12/material/OpenWrt_Dev_Tutorial.pdf">OpenWrt Development Guide</a></p><p><a href="http://www.liwangmeng.com/wp-content/uploads/2016/01/OpenWrt_Dev_Tutorial.pdf">OpenWrt_Dev_Tutorial</a></p><h2 id="7-2-main-Makefile"><a href="#7-2-main-Makefile" class="headerlink" title="7.2.main Makefile"></a>7.2.main Makefile</h2><p>openwrt根目录下的Makefile是执行make命令时的入口。从这里开始分析。</p><p>world:</p><p>ifndef ($(OPENWRT_BUILD),1)</p><p># 第一个逻辑</p><p>…</p><p>else</p><p># 第二个逻辑</p><p>…</p><p>endif</p><p>上面这段是主Makefile的结构，可以得知：</p><p>执行make时，若无任何目标指定，则默认目标是world</p><p>执行make时，无参数指定，则会进入第一个逻辑。如果执行命令make OPENWRT_BUILD&#x3D;1，则直接进入第二个逻辑。</p><p>编译时一般直接使用make V&#x3D;s -j5这样的命令，不会指定OPENWRT_BUILD变量</p><h3 id="第一个逻辑"><a href="#第一个逻辑" class="headerlink" title="第一个逻辑"></a>第一个逻辑</h3><p>override OPENWRT_BUILD&#x3D;1</p><p>export OPENWRT_BUILD</p><p>更改了OPENWRT_BUILD变量的值。这里起到的作用是下次执行make时，会进入到第二逻辑中。</p><p>toplevel.mk中的 %:: 解释world目标的规则。</p><p>prereq:: prepare-tmpinfo .config</p><p>@+$(MAKE) -r -s tmp&#x2F;.prereq-build $(PREP_MK)</p><p>@+$(NO_TRACE_MAKE) -r -s $@</p><p>%::</p><p>@+$(PREP_MK) $(NO_TRACE_MAKE) -r -s prereq</p><p>@( \</p><p>cp .config tmp&#x2F;.config; \</p><p>.&#x2F;scripts&#x2F;config&#x2F;conf –defconfig&#x3D;tmp&#x2F;.config -w tmp&#x2F;.config Config.in &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1; \</p><p>if .&#x2F;scripts&#x2F;kconfig.pl ‘&gt;’ .config tmp&#x2F;.config | grep -q CONFIG; then \</p><p>printf “$(_R)WARNING: your configuration is out of sync. Please run make menuconfig, oldconfig or defconfig!$(_N)\n” &gt;&amp;2; \</p><p>fi \</p><p>)</p><p>@+$(ULIMIT_FIX) $(SUBMAKE) -r $@</p><p>执行 make V&#x3D;s 时，上面这段规则简化为：</p><p>prereq:: prepare-tmpinfo .config</p><p>@make -r -s tmp&#x2F;.prereq-build</p><p>@make V&#x3D;ss -r -s prereq</p><p>%::</p><p>@make V&#x3D;s -r -s prereq</p><p>@make -w -r world</p><p>可见其中最终又执行了prereq和world目标，这两个目标都会进入到第二逻辑中。</p><h3 id="第二逻辑"><a href="#第二逻辑" class="headerlink" title="第二逻辑"></a>第二逻辑</h3><p>首先就引入了target, package, tools, toolchain这四个关键目录里的Makefile文件</p><p>include target&#x2F;Makefile</p><p>include package&#x2F;Makefile</p><p>include tools&#x2F;Makefile</p><p>include toolchain&#x2F;Makefile</p><p>这些子目录里的Makefile使用include&#x2F;subdir.mk里定义的两个函数来动态生成规则，这两个函数是subdir和stampfile</p><h3 id="stampfile"><a href="#stampfile" class="headerlink" title="stampfile"></a>stampfile</h3><p>拿target&#x2F;Makefile举例：</p><p>(eval(call stampfile,$(curdir),target,prereq,.config))</p><p>会生成规则：</p><p>target&#x2F;stamp-prereq:&#x3D;$(STAGING_DIR)&#x2F;stamp&#x2F;.target_prereq</p><p>$$(target&#x2F;stamp-prereq): $(TMP_DIR)&#x2F;.build .config</p><p>@+$(SCRIPT_DIR)&#x2F;timestamp.pl -n $$(target&#x2F;stamp-prereq) target .config || \</p><p>make $$(target&#x2F;flags-prereq) target&#x2F;prereq</p><p>@mkdir -p $$$$(dirname $$(target&#x2F;stamp-prereq))</p><p>@touch $$(target&#x2F;stamp-prereq)</p><p>$$(if $(call debug,target,v),,.SILENT: $$(target&#x2F;stamp-prereq))</p><p>.PRECIOUS: $$(target&#x2F;stamp-prereq) # work around a make bug</p><p>target&#x2F;&#x2F;clean:&#x3D;target&#x2F;stamp-prereq&#x2F;clean</p><p>target&#x2F;stamp-prereq&#x2F;clean: FORCE</p><p>@rm -f $$(target&#x2F;stamp-prereq)</p><p>所以可以简单的看作： (eval(call stampfile,(curdir),target,prereq,.config))生成了目标(target&#x2F;stamp-prereq)</p><p>对于target分别生成了：(target&#x2F;stamp−preq)，(target&#x2F;stamp-copile)， $(target&#x2F;stamp-install)</p><p>toolchain : $(toolchain&#x2F;stamp-install)</p><p>package : (package&#x2F;stamp−preq),(package&#x2F;stamp-cleanup), (package&#x2F;stamp−compile),(package&#x2F;stamp-install)</p><p>tools : $(tools&#x2F;stamp-install)</p><p>OpenWrt的主Makefile工作过程</p><p>subdir</p><p>subdir这个函数写了一大堆东西，看起来很复杂 。</p><p>$(call subdir, target) 会遍历下的子目录，执行 make -C 操作。这样就切入子目录中去了。</p><h3 id="目录变量"><a href="#目录变量" class="headerlink" title="目录变量"></a>目录变量</h3><p>几个重要的目录路径：</p><p><strong>KERNEL_BUILD_DIR</strong></p><p>build_dir&#x2F;target-mipsel_24kec+dsp_uClibc-0.9.33.2&#x2F;linux-ramips_mt7620a&#x2F;linux-3.14.18</p><p><strong>LINUX_DIR</strong></p><p>build_dir&#x2F;target-mipsel_24kec+dsp_uClibc-0.9.33.2&#x2F;linux-ramips_mt7620a&#x2F;linux-3.14.18</p><p><strong>KDIR</strong></p><p>build_dir&#x2F;target-mipsel_24kec+dsp_uClibc-0.9.33.2&#x2F;linux-ramips_mt7620a</p><p><strong>BIN_DIR</strong></p><p>bin&#x2F;ramips</p><p>Makefile中包含了rules.mk, target.mk等.mk文件，这些文件中定义了许多变量，有些是路径相关的，有些是软件相关的。这些变量在整个Makefile工程中经常被用到，</p><p><strong>TARGET_ROOTFS_DIR</strong></p><p>build_dir&#x2F;target-mipsel_24kec+dsp_uClibc-0.9.33.2</p><p><strong>BUILD_DIR</strong></p><p>build_dir&#x2F;target-mipsel_24kec+dsp_uClibc-0.9.33.2</p><p><strong>STAGING_DIR_HOST</strong></p><p>staging_dir&#x2F;toolchain-mipsel_24kec+dsp_gcc-4.8-linaro_uClibc-0.9.33.2</p><p><strong>TARGET_DIR</strong></p><p>build_dir&#x2F;target-mipsel_24kec+dsp_uClibc-0.9.33.2&#x2F;root-ramips</p><h2 id="7-3-kernel-编译："><a href="#7-3-kernel-编译：" class="headerlink" title="7.3.kernel 编译："></a>7.3.kernel 编译：</h2><p>target&#x2F;linux&#x2F;ramips&#x2F;Makefile: $(eval $(call BuildTarget))</p><p>target&#x2F;linux&#x2F;Makefile : export TARGET_BUILD&#x3D;1</p><p>include&#x2F;target.mk:</p><p>ifeq ($(TARGET_BUILD),1)</p><p>include $(INCLUDE_DIR)&#x2F;kernel-build.mk</p><p>BuildTarget?&#x3D;$(BuildKernel)</p><p>endif</p><p>BuildKernel是include&#x2F;kernel-build.mk定义的一个多行变量，其中描述了如何编译内核, 主要关注其中install规则的依赖链：</p><p>$(KERNEL_BUILD_DIR)&#x2F;symtab.h: FORCE</p><p>rm -f $(KERNEL_BUILD_DIR)&#x2F;symtab.h</p><p>touch $(KERNEL_BUILD_DIR)&#x2F;symtab.h</p><p>+$(MAKE) $(KERNEL_MAKEOPTS) vmlinux</p><p>…</p><p>$(LINUX_DIR)&#x2F;.image: $(STAMP_CONFIGURED) $(if $(CONFIG_STRIP_KERNEL_EXPORTS),$(KERNEL_BUILD_DIR)&#x2F;symtab.h) FORCE</p><p>$(Kernel&#x2F;CompileImage)</p><p>$(Kernel&#x2F;CollectDebug)</p><p>touch $$@</p><p>install: $(LINUX_DIR)&#x2F;.image</p><p>+$(MAKE) -C image compile install TARGET_BUILD&#x3D;</p><ol><li><p>触发make vmlinux命令生成vmlinux： install –&gt; $(LINUX_DIR)&#x2F;.image –&gt; $(KERNEL_BUILD_DIR)&#x2F;symtab.h –&gt; <code>$(MAKE) $(KERNEL_MAKEOPTS) vmlinux</code></p></li><li><p>对vmlinux做objcopy, strip操作: $(LINUX_DIR)&#x2F;.image –&gt; $(Kernel&#x2F;CompileImage) –&gt; $(call Kernel&#x2F;CompileImage&#x2F;Default) –&gt; $(call Kernel&#x2F;CompileImage&#x2F;Default)</p></li></ol><p>$(KERNEL_CROSS)objcopy -O binary $(OBJCOPY_STRIP) -S $(LINUX_DIR)&#x2F;vmlinux $(LINUX_KERNEL)$(1)</p><p>–&gt; build_dir&#x2F;target-mipsel_24kec+dsp_uClibc-0.9.33.2&#x2F;linux-ramips_mt7620a&#x2F;vmlinux</p><p>$(KERNEL_CROSS)objcopy $(OBJCOPY_STRIP) -S $(LINUX_DIR)&#x2F;vmlinux $(KERNEL_BUILD_DIR)&#x2F;vmlinux$(1).elf</p><p>–&gt; build_dir&#x2F;target-mipsel_24kec+dsp_uClibc-0.9.33.2&#x2F;linux-ramips_mt7620a&#x2F;vmlinux.elf</p><p>$(CP) $(LINUX_DIR)&#x2F;vmlinux $(KERNEL_BUILD_DIR)&#x2F;vmlinux.debug</p><p>–&gt; build_dir&#x2F;target-mipsel_24kec+dsp_uClibc-0.9.33.2&#x2F;linux-ramips_mt7620a&#x2F;vmlinux.debug</p><h2 id="7-4-生成firmware"><a href="#7-4-生成firmware" class="headerlink" title="7.4.生成firmware"></a>7.4.生成firmware</h2><p>firmware由kernel和rootfs两个部分组成，要对两个部分先分别处理，然后再合并成一个.bin文件。先看一下这个流程。</p><p>“target&#x2F;linux&#x2F;ramips&#x2F;image&#x2F;Makefile” 文件中的最后一句：$(eval $(call BuildImage))，将BuildImage展开在这里。BuildImage定义在 include&#x2F;image.mk 文件中，其中定义了数个目标的规则。</p><p>define BuildImage</p><p>compile: compile-targets FORCE</p><p><strong>$(call Build&#x2F;Compile)</strong></p><p>install: compile install-targets FORCE</p><p>…</p><p>$(call Image&#x2F;BuildKernel) ## 处理vmlinux</p><p>…</p><p>$(call Image&#x2F;mkfs&#x2F;squashfs) ## 生成squashfs，并与vmlinux合并成一个.bin文件</p><p>…</p><p>endef</p><h3 id="处理vmlinux-Image-x2F-BuildKernel"><a href="#处理vmlinux-Image-x2F-BuildKernel" class="headerlink" title="处理vmlinux: Image&#x2F;BuildKernel"></a>处理vmlinux: Image&#x2F;BuildKernel</h3><p>target&#x2F;linux&#x2F;ramips&#x2F;image&#x2F;Makefile:</p><p>define Image&#x2F;BuildKernel</p><p>cp $(KDIR)&#x2F;vmlinux.elf $(BIN_DIR)&#x2F;$(VMLINUX).elf</p><p>cp $(KDIR)&#x2F;vmlinux $(BIN_DIR)&#x2F;$(VMLINUX).bin</p><p>$(call CompressLzma,$(KDIR)&#x2F;vmlinux,$(KDIR)&#x2F;vmlinux.bin.lzma)</p><p>$(call MkImage,lzma,$(KDIR)&#x2F;vmlinux.bin.lzma,$(KDIR)&#x2F;uImage.lzma)</p><p>cp $(KDIR)&#x2F;uImage.lzma $(BIN_DIR)&#x2F;$(UIMAGE).bin</p><p>ifneq ($(CONFIG_TARGET_ROOTFS_INITRAMFS),)</p><p>cp $(KDIR)&#x2F;vmlinux-initramfs.elf $(BIN_DIR)&#x2F;$(VMLINUX)-initramfs.elf</p><p>cp $(KDIR)&#x2F;vmlinux-initramfs $(BIN_DIR)&#x2F;$(VMLINUX)-initramfs.bin</p><p>$(call CompressLzma,$(KDIR)&#x2F;vmlinux-initramfs,$(KDIR)&#x2F;vmlinux-initramfs.bin.lzma)</p><p>$(call MkImage,lzma,$(KDIR)&#x2F;vmlinux-initramfs.bin.lzma,$(KDIR)&#x2F;uImage-initramfs.lzma)</p><p>cp $(KDIR)&#x2F;uImage-initramfs.lzma $(BIN_DIR)&#x2F;$(UIMAGE)-initramfs.bin</p><p>endif</p><p>$(call Image&#x2F;Build&#x2F;Initramfs)</p><p>endef</p><h3 id="lzma压缩内核"><a href="#lzma压缩内核" class="headerlink" title="lzma压缩内核"></a>lzma压缩内核</h3><p>build_dir&#x2F;target-mipsel_24kec+dsp_uClibc-0.9.33.2&#x2F;linux-ramips_mt7620a&#x2F; 目录中:</p><p>lzma e vmlinux -lc1 -lp2 -pb2 vmlinux.bin.lzma</p><h3 id="MkImage"><a href="#MkImage" class="headerlink" title="MkImage"></a>MkImage</h3><p>build_dir&#x2F;target-mipsel_24kec+dsp_uClibc-0.9.33.2&#x2F;linux-ramips_mt7620a&#x2F; 目录中：</p><p>mkimage -A mips -O linux -T kernel -C lzma -a 0x80000000 -e 0x80000000 -n “MIPS OpenWrt Linux-3.14.18” -d vmlinux.bin.lzma uImage.lzma</p><h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p>VMLINUX:&#x3D;$(IMG_PREFIX)-vmlinux –&gt; openwrt-ramips-mt7620a-vmlinux</p><p>UIMAGE:&#x3D;$(IMG_PREFIX)-uImage –&gt; openwrt-ramips-mt7620a-uImage</p><p>cp $(KDIR)&#x2F;uImage.lzma $(BIN_DIR)&#x2F;$(UIMAGE).bin</p><p>把uImage.lzma复制到bin&#x2F;ramips&#x2F;目录下：</p><p>cp $(KDIR)&#x2F;uImage.lzma bin&#x2F;ramips&#x2F;openwrt-ramips-mt7620a-uImage</p><h2 id="7-5-制作squashfs，生成-bin-call-Image-x2F-mkfs-x2F-squashfs"><a href="#7-5-制作squashfs，生成-bin-call-Image-x2F-mkfs-x2F-squashfs" class="headerlink" title="7.5.制作squashfs，生成.bin: $(call Image&#x2F;mkfs&#x2F;squashfs)"></a>7.5.制作squashfs，生成.bin: $(call Image&#x2F;mkfs&#x2F;squashfs)</h2><p>define Image&#x2F;mkfs&#x2F;squashfs</p><p>@mkdir -p $(TARGET_DIR)&#x2F;overlay</p><p>$(STAGING_DIR_HOST)&#x2F;bin&#x2F;mksquashfs4 $(TARGET_DIR) $(KDIR)&#x2F;root.squashfs -nopad -noappend -root-owned -comp $(SQUASHFSCOMP) $(SQUASHFSOPT) -processors $(if $(CONFIG_PKG_BUILD_JOBS),$(CONFIG_PKG_BUILD_JOBS),1)</p><p>$(call Image&#x2F;Build,squashfs)</p><p>endif</p><p>mkdir -p $(TARGET_DIR)&#x2F;overlay</p><p>mkdir -p build_dir&#x2F;target-mipsel_24kec+dsp_uClibc-0.9.33.2&#x2F;root-ramips&#x2F;overlay</p><p>mksquashfs4</p><p>$(STAGING_DIR_HOST)&#x2F;bin&#x2F;mksquashfs4 $(TARGET_DIR) $(KDIR)&#x2F;root.squashfs -nopad -noappend -root-owned -comp $(SQUASHFSCOMP) $(SQUASHFSOPT) -processors $(if $(CONFIG_PKG_BUILD_JOBS),$(CONFIG_PKG_BUILD_JOBS),1)</p><p>制作squashfs文件系统，生成root.squashfs:</p><p>mksquashfs4 root-ramips root.squashfs -nopad -noappend -root-owned -comp gzip -b 256k -p ‘&#x2F;dev d 755 0 0’ -p ‘&#x2F;dev&#x2F;console c 600 0 0 5 1’ -processors 1</p><p>$(call Image&#x2F;Build,squashfs)</p><p>在 target&#x2F;linux&#x2F;ramips&#x2F;image&#x2F;Makefile 中：</p><p>define Image&#x2F;Build</p><p>$(call Image&#x2F;Build&#x2F;$(1))</p><p>dd if&#x3D;$(KDIR)&#x2F;root.$(1) of&#x3D;$(BIN_DIR)&#x2F;$(IMG_PREFIX)-root.$(1) bs&#x3D;128k conv&#x3D;sync</p><p>$(call Image&#x2F;Build&#x2F;Profile&#x2F;$(PROFILE),$(1))</p><p>endef</p><p>dd if&#x3D;(KDIR)&#x2F;root.squashfsof&#x3D;(BIN_DIR)&#x2F;$(IMG_PREFIX)-root.squashfs bs&#x3D;128k conv&#x3D;sync</p><p>dd if&#x3D;build_dir&#x2F;target-mipsel_24kec+dsp_uClibc-0.9.33.2&#x2F;linux-ramips_mt7620a&#x2F;root.squashfs of&#x3D;bin&#x2F;ramips&#x2F;openwrt-ramips-mt7620-root.squashfs bs&#x3D;128k conv&#x3D;sync</p><p>(callImage&#x2F;Build&#x2F;Profile&#x2F;(PROFILE),squashfs)</p><p>target&#x2F;linux&#x2F;ramips&#x2F;mt7620a&#x2F;profiles&#x2F;00-default.mk, 中调用 Profile 函数：$(eval $(call Profile,Default))</p><p>include&#x2F;target.mk 中定义了 Profile 函数， 其中令 PROFILE&#x3D;Default</p><p>define Image&#x2F;Build&#x2F;Profile&#x2F;Default</p><p>$(call Image&#x2F;Build&#x2F;Profile&#x2F;MT7620a,$(1))</p><p>…</p><p>endef</p><p>规则依赖序列如下：</p><p>$(call Image&#x2F;Build&#x2F;Profile&#x2F;$(PROFILE),squashfs)</p><p>–&gt; $(call BuildFirmware&#x2F;Default8M&#x2F;squashfs,squashfs,mt7620a,MT7620a)</p><p>–&gt; $(call BuildFirmware&#x2F;OF,squashfs,mt7620a,MT7620a,8060928)</p><p>–&gt; $(call MkImageLzmaDtb,mt7620a,MT7620a)</p><p>–&gt; $(call PatchKernelLzmaDtb,mt7620a,MT7620a)</p><p>–&gt; $(call MkImage,lzma,$(KDIR)&#x2F;vmlinux-mt7620a.bin.lzma,$(KDIR)&#x2F;vmlinux-mt7620a.uImage)</p><p>–&gt; $(call MkImageSysupgrade&#x2F;squashfs,squashfs,mt7620a,8060928)</p><p>其中的主要步骤：</p><p>复制： cp (KDIR)&#x2F;vmlinux(KDIR)&#x2F;vmlinux-mt7620a</p><p>生成dtb文件： (LINUXDIR)&#x2F;scripts&#x2F;dtc&#x2F;dtc−Odtb−o(KDIR)&#x2F;MT7620a.dtb ..&#x2F;dts&#x2F;MT7620a.dts</p><p>将内核与dtb文件合并：(STAGINGDIRHOST)&#x2F;bin&#x2F;patch−dtb(KDIR)&#x2F;vmlinux-mt7620a $(KDIR)&#x2F;MT7620a.dtb</p><p>使用lzma压缩：(callCompressLzma,(KDIR)&#x2F;vmlinux-mt7620a,$(KDIR)&#x2F;vmlinux-mt7620a.bin.lzma)</p><p>将lzma压缩后的文件经过mkimage工具处理，即在头部添加uboot可识别的信息。</p><p>接下来就是合并生成firmware固件了：</p><p>MkImageSysupgrade&#x2F;squashfs, squashfs, mt7620a,8060928</p><p>cat vmlinux-mt7620a.uImage root.squashfs &gt; openwrt-ramips-mt7620-mt7620a-squashfs-sysupgrade.bin</p><p>–&gt; 制作squashfs bin文档, 并确认它的大小 &lt; 8060928 才是有效的，否则报错。</p><p>总结： 整个流程下来，其实最烦索的还是对内核生成文件vmlinux的操作，经过了objcopy, patch-dtb, lzma, mkimage 等过程生成一个uImage，再与mksquashfs工具制作的文件系统rootfs.squashfs合并。</p><h2 id="7-6-Openwrt-SDK中Makefile相关总结"><a href="#7-6-Openwrt-SDK中Makefile相关总结" class="headerlink" title="7.6.Openwrt_SDK中Makefile相关总结"></a>7.6.Openwrt_SDK中Makefile相关总结</h2><h3 id="7-6-1CURDIR变量"><a href="#7-6-1CURDIR变量" class="headerlink" title="7.6.1CURDIR变量"></a>7.6.1CURDIR变量</h3><p>在makefile中表示当前目录，效果等同于shell命令pwd.</p><h3 id="7-6-2空格的表示方法："><a href="#7-6-2空格的表示方法：" class="headerlink" title="7.6.2空格的表示方法："></a>7.6.2空格的表示方法：</h3><p>empty:&#x3D;</p><p>space:&#x3D;$(empty) $(empty)</p><p>在openwrtSDK中该变量用以检查SDK目录是否含有空格，要求所有路径中不得有含空格的文件夹</p><h3 id="7-6-3调用makefile中的函数"><a href="#7-6-3调用makefile中的函数" class="headerlink" title="7.6.3调用makefile中的函数"></a>7.6.3调用makefile中的函数</h3><p>if判断函数，用法：</p><p>$(if <condition>,<then-part>)</p><p>或者：</p><p>$(if <condition>,<then-part>,<else-part>)</p><p>findstring查找字符串函数，用法：</p><p>$(findstring <find>,<in>)在字串<in>中查找<find>字串</p><p>error控制makefile运行的函数，用法：</p><h3 id="7-6-4-其他相关内容"><a href="#7-6-4-其他相关内容" class="headerlink" title="7.6.4.其他相关内容"></a>7.6.4.其他相关内容</h3><h4 id="2-1make-的参数"><a href="#2-1make-的参数" class="headerlink" title="2.1make 的参数"></a>2.1make 的参数</h4><p>-i 或者”–ignore-errors”:忽略Makefile中所有的命令错误；</p><p>-k或者“–keep-going“：终止出错命令，但继续执行其他命令；</p><p>-w或者”–print-directory“：嵌套执行make时，会输出当前工作目录信息，该选项的反作用项是”-s“；</p><h4 id="2-2嵌套执行make"><a href="#2-2嵌套执行make" class="headerlink" title="2.2嵌套执行make"></a>2.2嵌套执行make</h4><p>我们有一个子目录叫 subdir，这个目录下有个 Makefile 文件，来指明了这个目录下文件的编译规则。那么我们总控的 Makefile 可以这样书写：</p><p>subsystem:</p><p>cd subdir &amp;&amp; $(MAKE)</p><p>其等价于：</p><p>subsystem:</p><p>$(MAKE) -C subdir</p><p>定义$(MAKE)宏变量的意思是，也许我们的 make 需要一些参数，所以定义成一个变量比较利于维护。这两个例子的意思都是先进入“subdir”目录，然后执行 make 命令。</p><p>我们把这个 Makefile 叫做“总控 Makefile”，总控 Makefile 的变量可以传递到下级的 Makefile 中（如果你显示的声明），但是不会覆盖下层的 Makefile 中所定义的变量，除非指定了“-e”参数。</p><p>如果你要传递变量到下级 Makefile 中，那么你可以使用这样的声明：</p><p>export &lt;variable …&gt;</p><p>如果你不想让某些变量传递到下级 Makefile 中，那么你可以这样声明：</p><p>unexport &lt;variable …&gt;</p><h4 id="2-在package目录中的Makefile"><a href="#2-在package目录中的Makefile" class="headerlink" title="2.在package目录中的Makefile:"></a>2.在package目录中的Makefile:</h4><h5 id="2-1-call函数"><a href="#2-1-call函数" class="headerlink" title="2.1.call函数"></a>2.1.call函数</h5><p>call 函数是唯一一个可以用来创建新的参数化的函数。你可以写一个非常复杂的表达式，这个表达式中，你可以定义许多参数，然后你可以用 call 函数来向这个表达式传递参数。其语法是：</p><p>$(call <expression>,<parm1>,<parm2>,<parm3>…)</p><p>当 make 执行这个函数时，<expression>参数中的变量，如$(1)，$(2)，$(3)等，会被参 数<parm1>，<parm2>，<parm3>依次取代。而<expression>的返回值就是 call 函数的返回值。</p><h5 id="2-2-eval函数"><a href="#2-2-eval函数" class="headerlink" title="2.2.eval函数"></a>2.2.eval函数</h5><p>函数“eval”是一个比较特殊的函数。使用它可以在Makefile中构造一个可变的规则结构关系（依赖关系链），其中可以使用其它变量和函数。</p><p>函数“eval”对它的参数进行展开，展开的结果作为Makefile的一部分，make可以对展开内容进行语法解析。展开的结果可以包含一个新变量、目标、隐含规则或者是明确规则等。也就是说此函数的功能主要是：根据其参数的关系、结构，对它们进行替换展开。</p><p>Ø    <strong>返回值：</strong>函数“eval”的返回值是空，也可以说没有返回值。</p><p>Ø    <strong>函数说明：</strong>“eval” 函数执行时会对它的参数进行两次展开。第一次展开过程发是由函数本身完成的，第二次是函数展开后的结果被作为Makefile内容时由make解析时展开 的。明确这一过程对于使用“eval”函数非常重要。理解了函数“eval”二次展开的过程后。实际使用时，如果在函数的展开结果中存在引用（格式 为：$(x)），那么在函数的参数中应该使用“$$”来代替“$”。因为这一点，所以通常它的参数中会使用函数“value”来取一个变量的文本值。</p><p>我们看一个例子。例子看起来似乎非常复杂，因为它综合了其它的一些概念和函数。不过我们可以考虑两点：其一，通常实际一个模板的定义可能比例子中的 更为复杂；其二，我们可以实现一个复杂通用的模板，在所有Makefile中包含它，亦可作到一劳永逸。相信这一点可能是大多数程序员所推崇的。</p><p>示例：</p><p>***# sample Makefile***</p><p>*<strong>PROGRAMS  &#x3D; server client*</strong></p><p> *<strong>server_OBJS &#x3D; server.o server_priv.o server_access.o*</strong></p><p>*<strong>server_LIBS &#x3D; priv protocol*</strong></p><p>*<strong>client_OBJS &#x3D; client.o client_api.o client_mem.o*</strong></p><p>*<strong>client_LIBS &#x3D; protocol*</strong></p><p> ***# Everything after this is generic***</p><p>***.PHONY: all***</p><p>*<strong>all: $(PROGRAMS)*</strong></p><p> *<strong>define PROGRAM_template*</strong></p><p>***$(1): $$($(1)_OBJ) $$($(1)_LIBS:%&#x3D;-l%)***</p><p>  *<strong>ALL_OBJS  +&#x3D; $$($(1)_OBJS)*</strong></p><p>*<strong>endef*</strong></p><p>​        ***$(foreach prog,$(PROGRAMS),$(eval $(call PROGRAM_template,$(prog))))***</p><p>​        ***$(PROGRAMS):***</p><p>​        ***$(LINK.o) $^ $(LDLIBS) -o $@***</p><p>​        *<strong>clean:*</strong></p><p>​        *<strong>rm -f $(ALL_OBJS) $(PROGRAMS)*</strong></p><p>来看一下这个例子：它实现的功能是完成“PROGRAMS”的编译链接。例子中“$(LINK.o)”为“$(CC) $(LDFLAGS)”，意思是对所有的.o文件和指定的库文件进行链接。</p><p>​        ***“$(foreach prog,$(PROGRAM),$(eval $(call PROGRAM_template,$(prog))))”***展开为：</p><p>​        *<strong>server : $(server_OBJS) –l$(server_LIBS)*</strong></p><p>​        *<strong>client : $(client_OBJS) –l$(client_LIBS)*</strong></p><h1 id="8-软件包Makefile解析"><a href="#8-软件包Makefile解析" class="headerlink" title="8.软件包Makefile解析"></a>8.软件包Makefile解析</h1><p>上面一篇博文中，博主尝试创建一个非常简单的helloworld包，过程详见博文：<a href="http://my.oschina.net/hevakelcj/blog/410633">http://my.oschina.net/hevakelcj/blog/410633</a></p><p>本文将带大家一起深入地学习一下OpenWrt包的 Makefile。我们不仅要知其然，还要知其所以然。在上篇博文里，包里的 Makefile 内容如下：</p><p>include $(TOPDIR)&#x2F;rules.mk PKG_NAME:&#x3D;helloworldPKG_RELEASE:&#x3D;1PKG_BUILD_DIR:&#x3D;$(BUILD_DIR)&#x2F;$(PKG_NAME) include $(INCLUDE_DIR)&#x2F;package.mk define Package&#x2F;helloworldSECTION:&#x3D;utilsCATEGORY:&#x3D;UtilitiesTITLE:&#x3D;Helloworld — prints a snarky messageendef define Package&#x2F;helloworld&#x2F;descriptionIt’s my first package demo.endef define Build&#x2F;Prepareecho “Here is Package&#x2F;Prepare”mkdir -p $(PKG_BUILD_DIR)$(CP) .&#x2F;src&#x2F;* $(PKG_BUILD_DIR)&#x2F;endef define Package&#x2F;helloworld&#x2F;installecho “Here is Package&#x2F;install”$(INSTALL_DIR) $(1)&#x2F;bin$(INSTALL_BIN) $(PKG_BUILD_DIR)&#x2F;helloworld $(1)&#x2F;bin&#x2F;endef $(eval $(call BuildPackage,helloworld))</p><p>大概我们可以将简代为如下的结构：</p><p>include $(TOPDIR)&#x2F;rules.mk # 这里定义一系列的 PKG_XX include $(INCLUDE_DIR)&#x2F;package.mk # 定义各种 Package, Build 宏 $(eval $(call BuildPackage,包名))</p><p>下面，我们来一一拆解。</p><h2 id="8-1-include-TOPDIR-x2F-rules-mk"><a href="#8-1-include-TOPDIR-x2F-rules-mk" class="headerlink" title="8.1.include $(TOPDIR)&#x2F;rules.mk"></a>8.1.include $(TOPDIR)&#x2F;rules.mk</h2><p>首先，include $(TOPDIR)&#x2F;rules.mk，也就是将 SDK&#x2F;rules.mk 文件中的内容导入进来。</p><p>TOPDIR就是SDK的路径。</p><p>在 SDK&#x2F;rules.mk 文件中，定义了许多变量。</p><p>我们可以看出，在Makefile中，赋值是用 :&#x3D; ，而不是等号。</p><p>比如上面的 BUILD_DIR, INCLUDE_DIR 等，都在这里定义。还有：</p><p>还有关于 TARGET_CC, TARGET_CXX 等非常有用的变量定义。</p><p>还有 TAR， FIND， INSTALL_BIN, INSTALL_DIR, INSTALL_DATA等等非常重要的变量定义。</p><h2 id="8-2-自定义-PKG-XXXX-变量"><a href="#8-2-自定义-PKG-XXXX-变量" class="headerlink" title="8.2.自定义 PKG_XXXX 变量"></a>8.2.自定义 PKG_XXXX 变量</h2><p>官网上指定有如下变量需要设置：</p><p>PKG_NAME     – The name of the package, as seen via menuconfig and ipkg</p><p>PKG_VERSION   – The upstream version number that we’re downloading</p><p>PKG_RELEASE   – The version of this package Makefile</p><p>PKG_LICENSE   – The license(s) the package is available under, SPDX form.</p><p>PKG_LICENSE_FILE- file containing the license text</p><p>PKG_BUILD_DIR  – Where to compile the package</p><p>PKG_SOURCE    – The filename of the original sources</p><p>PKG_SOURCE_URL- Where to download the sources from (directory)</p><p>PKG_MD5SUM    – A checksum to validate the download</p><p>PKG_CAT     – How to decompress the sources (zcat, bzcat, unzip)</p><p>PKG_BUILD_DEPENDS – Packages that need to be built before this package, but are not required at runtime. Uses the same syntax as DEPENDS below.</p><p>PKG_INSTALL   – Setting it to “1” will call the package’s original “make install” with prefix set to PKG_INSTALL_DIR</p><p>PKG_INSTALL_DIR – Where “make install” copies the compiled files</p><p>PKG_FIXUP    – ???</p><p>PKG_SOURCE_PROTO – the protocol to use for fetching the sources (git, svn)</p><p>PKG_REV     – the svn revision to use, must be specified if proto is “svn”</p><p>PKG_SOURCE_SUBDIR – must be specified if proto is “svn” or “git”, e.g. “PKG_SOURCE_SUBDIR:&#x3D;$(PKG_NAME)-$(PKG_VERSION)”</p><p>PKG_SOURCE_VERSION – must be specified if proto is “git”, the commit hash to check out</p><p>PKG_CONFIG_DEPENDS – specifies which config options depend on this package being selected</p><h2 id="8-3-include-INCLUDE-DIR-x2F-package-mk"><a href="#8-3-include-INCLUDE-DIR-x2F-package-mk" class="headerlink" title="8.3.include $(INCLUDE_DIR)&#x2F;package.mk"></a>8.3.include $(INCLUDE_DIR)&#x2F;package.mk</h2><p>跟上面的 include $(TOPDIR)&#x2F;rules.mk 是一样的。就是把这个文件包含进来。</p><p>INCLUDE_DIR这个变量在 rules.mk 里已经定义了：</p><p>那就是 SDK&#x2F;include&#x2F;package.mk 文件了，打开看看。</p><p>主要有以下几个功能：</p><h3 id="（1）它会配置默认的变量"><a href="#（1）它会配置默认的变量" class="headerlink" title="（1）它会配置默认的变量"></a>（1）它会配置默认的变量</h3><p>如果某个变量我们没有在上一部分里定义，那里在这个文件里，它就会被指定为默认值，比如：</p><p>上面的用 ?&#x3D; 来表示给未定义的变量赋默认值。比如，如果没有指定 PKG_MD5SUM，那么就默认为 unknow。</p><h3 id="（2）推导其它变量"><a href="#（2）推导其它变量" class="headerlink" title="（2）推导其它变量"></a>（2）推导其它变量</h3><p>根据上部分用户自定义的 PKG_XXXX 变量推导出更多相关的变量。</p><p>比如：</p><p>虽然我没有看过相关的手册，根据多年的从业经验也能看出上面的意思来。</p><p>#如果定义了宏，就…ifdef 宏名…endif #如果宏相等ifeq (宏1,宏2)…endif strip $宏名   #将宏对应的值去除前后的空白字符 VAR +&#x3D; xxxx  #在变量 VAR 后面追加 xxxx</p><p>我猜大概就是这样，如果不对请指正。</p><p>再比如如下：</p><p>就这样，它为我们提供了大量有价值的变量。</p><h3 id="（3）包含其它mk文件"><a href="#（3）包含其它mk文件" class="headerlink" title="（3）包含其它mk文件"></a>（3）包含其它mk文件</h3><h3 id="（4）定义默认宏"><a href="#（4）定义默认宏" class="headerlink" title="（4）定义默认宏"></a>（4）定义默认宏</h3><p>在 Makefile 中，宏的定义格式是：</p><p>define XXX&#x2F;xxxx&lt;宏的实体…&gt;endef</p><p>package.mk会把大部分需要的宏都定义好。理想情况下，用户只需要定义好了 PKG_XXX 之后，不需要再自定义宏，默认的宏就可以满足需求。</p><p>比如Build&#x2F;Prepare&#x2F;Default的定义：</p><p>Build&#x2F;Prepare宏是在编译前进行的，是准备工作。</p><p>可以看出，它分了两种情况：</p><p>A，定义了 USE_GIT_TREE，则按git的方式定义。</p><p>B，定义了 USB_SOURCE_DIR，则按源码在本地的方案定义。</p><h3 id="（5）BuildPackage宏"><a href="#（5）BuildPackage宏" class="headerlink" title="（5）BuildPackage宏"></a>（5）BuildPackage宏</h3><p>最重要的一个宏是 BuildPackage。它会在 Makefile 的最后一行被引用。它的实现也就是在 package.mk 文件里。如下为其源码：</p><p>define BuildPackage$(Build&#x2F;IncludeOverlay)$(eval $(Package&#x2F;Default))  #定义在package-defaults.mk文件里$(eval $(Package&#x2F;$(1)))    #调用用户自定义的 Package&#x2F;&lt;包名&gt; 宏 ifdef DESCRIPTION$$(error DESCRIPTION:&#x3D; is obsolete, use Package&#x2F;PKG_NAME&#x2F;description)endif #检查有没有定义 Package&#x2F;&lt;包名&gt;&#x2F;description宏，如果没有定义，则以TITLE默认定义一个ifndef Package&#x2F;$(1)&#x2F;descriptiondefine Package&#x2F;$(1)&#x2F;description$(TITLE)endefendif BUILD_PACKAGES +&#x3D; $(1)$(STAMP_PREPARED): $$(if $(QUILT)$(DUMP),,$(call find_library_dependencies,$(DEPENDS))) #检查 TITLE, CATEGORY, SECTION, VERSION 是否定义，如果没有定义则报错$(foreach FIELD, TITLE CATEGORY SECTION VERSION,ifeq ($($(FIELD)),)$$(error Package&#x2F;$(1) is missing the $(FIELD) field)endif) #如果有定义DUMP，那就引入Dumpinfo&#x2F;Package宏的内部。#如果没有，那么就引用 Packaget&#x2F;&lt;包名&gt;&#x2F;targets里面的每一个target，如果没有定义Packaget&#x2F;&lt;包名&gt;&#x2F;targets宏，那么将PKG_TARGETS里的每个target取出来，#如果也没有定义PKG_TARGETS，那就默认ipkg作为target。将每一个target，引用 BuildTarget&#x2F;$(target)。$(if $(DUMP), $(Dumpinfo&#x2F;Package), $(foreach target, $(if $(Package&#x2F;$(1)&#x2F;targets),$(Package&#x2F;$(1)&#x2F;targets), $(if $(PKG_TARGETS),$(PKG_TARGETS), ipkg) ), $(BuildTarget&#x2F;$(target)) ) )$(if $(PKG_HOST_ONLY)$(DUMP),,$(call Build&#x2F;DefaultTargets,$(1)))endef</p><p>总结一下语法：</p><p>$() 表示要执行的一条语句</p><p>$(if 条件, 成立执行, 失败执行)    if条件分支</p><p>$(foreach 变量, 成员列表, 执行体)  成员遍历语句</p><p>可以看出，语句是可以嵌套使用的。</p><p>$(N) 表示第N个参数</p><h2 id="8-4-自定义宏"><a href="#8-4-自定义宏" class="headerlink" title="8.4.自定义宏"></a>8.4.自定义宏</h2><h3 id="必须定义的宏"><a href="#必须定义的宏" class="headerlink" title="必须定义的宏"></a>必须定义的宏</h3><p>我定要为我们的package定义特定的宏：</p><p>Package&#x2F;&lt;包名&gt;  #包的参数</p><p>在 Package&#x2F;&lt;包名&gt; 宏中定义与包相关的信息。</p><p>如Package&#x2F;helloworld宏：</p><table><thead><tr><th>12345</th><th>define Package&#x2F;helloworldSECTION:&#x3D;utilsCATEGORY:&#x3D;UtilitiesTITLE:&#x3D;Helloworld — prints a snarky messageendef</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>除了上面所列的 SECTION，CATEGORY，TITLE变量外，还可以定义：</p><p>SECTION   – 包的种类</p><p>CATEGORY   – 显示在menuconfig的哪个目录下</p><p>TITLE    – 简单的介绍</p><p>DESCRIPTION – (deprecated) 对包详细的介绍</p><p>URL – 源码所在的网络路径</p><p>MAINTAINER  – (required for new packages) 维护者是谁（出错了联系谁）</p><p>DEPENDS   – (optional) 需要依事的包，See <a href="http://wiki.openwrt.org/doc/devel/packages#dependencytypes">below</a> for the syntax.</p><p>USERID    – (optional) a username:groupname pair to create at package installation time.</p><p>【PKG_VERSION宏缺失时报错】：</p><p>OpenWrt Developers Team <a href="mailto:&#111;&#x70;&#101;&#x6e;&#119;&#x72;&#x74;&#x2d;&#100;&#x65;&#x76;&#x65;&#108;&#x40;&#x6f;&#112;&#x65;&#110;&#119;&#x72;&#116;&#46;&#x6f;&#x72;&#103;">&#111;&#x70;&#101;&#x6e;&#119;&#x72;&#x74;&#x2d;&#100;&#x65;&#x76;&#x65;&#108;&#x40;&#x6f;&#112;&#x65;&#110;&#119;&#x72;&#116;&#46;&#x6f;&#x72;&#103;</a></p><p>@@</p><p>Makefile:53: *** Package&#x2F;exfat is missing the VERSION field. Stop.</p><h3 id="可选定义的宏"><a href="#可选定义的宏" class="headerlink" title="可选定义的宏"></a>可选定义的宏</h3><p>其它的宏可以选择性地定义，通常没必要自己重写。但有些情况，package.mk中默认的宏不能满足我们的需求。这时，我们就需要自己重定义宏。</p><p>比如，我们在为helloworld写Makefile时，我们要求在编译之前，将 SDK&#x2F;package&#x2F;helloworld&#x2F;src&#x2F; 路径下的文件复制到 PKG_BUILD_DIR 所指定的目录下。</p><p>于是我们重新定义Build&#x2F;Prepare宏：</p><p><a href="http://my.oschina.net/hevakelcj/blog/411942">?</a></p><table><thead><tr><th>1234</th><th>define Build&#x2F;Preparemkdir -p $(PKG_BUILD_DIR)$(CP) .&#x2F;src&#x2F;* $(PKG_BUILD_DIR)&#x2F;endef</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>如此以来，在我们 make V&#x3D;s 时，make工具会在编译之前执行 Build&#x2F;Prepare 宏里的命令。</p><p>再比如，我们要指定包的安装方法：</p><p><a href="http://my.oschina.net/hevakelcj/blog/411942">?</a></p><table><thead><tr><th>1234</th><th>define Package&#x2F;helloworld&#x2F;install$(INSTALL_DIR) $(1)&#x2F;bin$(INSTALL_BIN) $(PKG_BUILD_DIR)&#x2F;helloworld $(1)&#x2F;bin&#x2F;endef</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>上面的这个宏就是指定了包的安装过程。其中 INSTALL_DIR 定义在 rules.mk 文件里。</p><p>INSTALL_DIR &#x3D; install -d -m0755</p><p>INSTALL_BIN &#x3D; install -m0755</p><p>$(1)为第一个参数是.&#x2F;configure时的–prefix参数，通常为””</p><p>展开之后就是：</p><p>define Package&#x2F;helloworld&#x2F;installinstall -d -m0755 &#x2F;bininstall -m0755 $(PKG_BUILD_DIR)&#x2F;helloworld &#x2F;bin&#x2F;endef</p><p>它的意思就一目了然了。</p><p>除了上面所列举的这两个宏外，在官网上也说明了其它可选的宏：</p><h5 id="Package-x2F-conffiles-optional"><a href="#Package-x2F-conffiles-optional" class="headerlink" title="Package&#x2F;conffiles (optional)"></a>Package&#x2F;conffiles (optional)</h5><p>由该包安装的配置文件的列表，一行一个文件。</p><h5 id="Package-x2F-description"><a href="#Package-x2F-description" class="headerlink" title="Package&#x2F;description"></a>Package&#x2F;description</h5><p>对包描述的纯文本</p><h5 id="Build-x2F-Prepare-optional"><a href="#Build-x2F-Prepare-optional" class="headerlink" title="Build&#x2F;Prepare (optional)"></a>Build&#x2F;Prepare (optional)</h5><p>A set of commands to unpack and patch the sources. You may safely leave this undefined.</p><h5 id="Build-x2F-Configure-optional"><a href="#Build-x2F-Configure-optional" class="headerlink" title="Build&#x2F;Configure (optional)"></a>Build&#x2F;Configure (optional)</h5><p>You can leave this undefined if the source doesn’t use configure or has a normal config script, otherwise you can put your own commands here or use “$(call Build&#x2F;Configure&#x2F;Default,)” as above to pass in additional arguments for a standard configure script.</p><h5 id="Build-x2F-Compile-optional"><a href="#Build-x2F-Compile-optional" class="headerlink" title="Build&#x2F;Compile (optional)"></a>Build&#x2F;Compile (optional)</h5><p>How to compile the source; in most cases you should leave this undefined, because then the default is used, which calls make. If you want to pass special arguments to make, use e.g. “$(call Build&#x2F;Compile&#x2F;Default,FOO&#x3D;bar)</p><h5 id="Build-x2F-Install-optional"><a href="#Build-x2F-Install-optional" class="headerlink" title="Build&#x2F;Install (optional)"></a>Build&#x2F;Install (optional)</h5><p>How to install the compiled source. The default is to call make install. Again, to pass special arguments or targets, use $(call Build&#x2F;Install&#x2F;Default,install install-foo) Note that you need put all the needed make arguments here. If you just need to add something to the “install” argument, don’t forget the ‘install’ itself.</p><h5 id="Build-x2F-InstallDev-optional"><a href="#Build-x2F-InstallDev-optional" class="headerlink" title="Build&#x2F;InstallDev (optional)"></a>Build&#x2F;InstallDev (optional)</h5><p>For things needed to compile packages against it (static libs, header files), but that are of no use on the target device.</p><h5 id="Package-x2F-install"><a href="#Package-x2F-install" class="headerlink" title="Package&#x2F;install"></a>Package&#x2F;install</h5><p>A set of commands to copy files into the ipkg which is represented by the $(1) directory. As source you can use relative paths which will install from the unpacked and compiled source, or $(PKG_INSTALL_DIR) which is where the files in the Build&#x2F;Install step above end up.</p><h5 id="Package-x2F-preinst"><a href="#Package-x2F-preinst" class="headerlink" title="Package&#x2F;preinst"></a>Package&#x2F;preinst</h5><p>The actual text of the script which is to be executed before installation. Dont forget to include the #!&#x2F;bin&#x2F;sh. If you need to abort installation have the script return false.</p><h5 id="Package-x2F-postinst"><a href="#Package-x2F-postinst" class="headerlink" title="Package&#x2F;postinst"></a>Package&#x2F;postinst</h5><p>The actual text of the script which is to be executed after installation. Dont forget to include the #!&#x2F;bin&#x2F;sh.</p><h5 id="Package-x2F-prerm"><a href="#Package-x2F-prerm" class="headerlink" title="Package&#x2F;prerm"></a>Package&#x2F;prerm</h5><p>The actual text of the script which is to be executed before removal. Dont forget to include the #!&#x2F;bin&#x2F;sh. If you need to abort removal have the script return false.</p><h5 id="Package-x2F-postrm"><a href="#Package-x2F-postrm" class="headerlink" title="Package&#x2F;postrm"></a>Package&#x2F;postrm</h5><p>The actual text of the script which is to be executed after removal. Dont forget to include the #!&#x2F;bin&#x2F;sh.</p><p>之所以有些宏是以”Package&#x2F;”开头，有的又以”Build&#x2F;”，是因为在一个Makefile里生成多个包。OpenWrt默认认为一个 Makefile里定义一个包，但我们也可以根据需要将其拆分成多个。所以说，如果我们只希望编译一次，那么只要有一系列的”Build&#x2F;”的宏定义就可 以了。但是，我们也可以通过添加多个”Package&#x2F;”宏定义，并调用 BuildPackage，来创建多个包。</p><h2 id="8-5-使之生效"><a href="#8-5-使之生效" class="headerlink" title="8.5.使之生效"></a>8.5.使之生效</h2><p>在Makefile的最后一行是：</p><p>$(eval $(call BuildPackage,helloworld))</p><p>最重要的 BuildPackage定义在 package.mk 文件里。见上面 BuildPackage 宏定义。</p><h2 id="8-6-添加新编译选项"><a href="#8-6-添加新编译选项" class="headerlink" title="8.6.添加新编译选项"></a>8.6.添加新编译选项</h2><p>比如dibbler软件包的编译，需要编译C++代码，需要使用-Istdc++选项，可以在dibbler编译Makefile中添加TAGET_CXXFLAGS +&#x3D;-Istdc++ 即可。</p><h1 id="9-openwrt主Makafile解析"><a href="#9-openwrt主Makafile解析" class="headerlink" title="9.openwrt主Makafile解析"></a>9.openwrt主Makafile解析</h1><p>其他相关参考：<a href="http://blog.csdn.net/suiyuan19840208/article/details/25737323/">http://blog.csdn.net/suiyuan19840208/article/details/25737323/</a></p><p>原文地址：<a href="http://www.right.com.cn/forum/thread-73443-1-1.html">http://www.right.com.cn/forum/thread-73443-1-1.html</a></p><p>本文是本人对OpenWrt的Makefile的理解，并非转载。<br>OpenWrt是一个典型的嵌入式Linux工程，了解OpenWrt的Makefile的工作过程对提高嵌入式Linux工程的开发能力有极其重要意义。<br>OpenWrt的主Makefile文件只有100行，可以简单分为三部分，1<del>17行为前导部分，19</del>31为首次执行部分，33~101为再次执行部分。<br>前导部分<br>CURDIR为make默认变量，默认值为当前目录。<br>前导部分主要把变量TOPDIR赋值为当前目录，把变量LC_ALL、LANG赋值为C，并使用变量延伸指示符export，把上述三个变量延伸到下层Makefile。<br>使用文件使用指示符include引入$(TOPDIR)&#x2F;include&#x2F;host.mk。在OpenWrt的主Makefile文件使用了多次 include指示符，说明主Makefile文件被拆分成多个文件，被拆分的文件放在不同的目录。拆分的目的是明确各部分的功能，而且增加其灵活性。<br>在前导部分比较费解的是使用world目标，在makefile中基本规则为：<br>TARGETS : PREREQUISITES<br>COMMAND<br>…<br>即makefile规则由目标、依赖、命令三部分组成，在OpenWrt的主Makefile文件的第一个目标world没有依赖和命令。它主要起到指示 当make命令不带目标时所要执行的目标，没有设定依赖和命令部分表明此目标在此后将会有其他依赖关系或命令。world目标的命令需要进一步参 考$(TOPDIR)&#x2F;include&#x2F;toplevel.mk和主Makefile文件的再次执行部分。<br>首次执行部分<br>OPENWRT_BUILD是区分首次执行与再次执行的变量。在首次执行时使用强制赋值指示符override把OPENWRT_BUILD赋值为1，并 使用变量延伸指示符export把OPENWRT_BUILD延伸。在OPENWRT_BUILD使用强制赋值指示符override意味着make命令 行可能引入OPENWRT_BUILD参数。<br>引入$(TOPDIR)&#x2F;include&#x2F;debug.mk、$(TOPDIR)&#x2F;include&#x2F;depends.mk、$(TOPDIR) &#x2F;include&#x2F;toplevel.mk三个文件，由于TOPDIR是固定的，所以三个文件也是固定的。其中$(TOPDIR)&#x2F;include &#x2F;toplevel.mk的135行%::有效解释首次执行时world目标的规则。<br>再次执行部分<br>引入rules.mk、$(INCLUDE_DIR)&#x2F;depends.mk、$(INCLUDE_DIR)&#x2F;subdir.mk、target &#x2F;Makefile、package&#x2F;Makefile、tools&#x2F;Makefile、toolchain&#x2F;Makefile七个文 件，rules.mk没有目录名，即引入与主Makefile文件目录相同的rules.mk。在rules.mk定义了INCLUDE_DIR 为$(TOPDIR)&#x2F;include，所以$(INCLUDE_DIR)&#x2F;depends.mk实际上与首次执行时引入的$(TOPDIR) &#x2F;include&#x2F;depends.mk是同一个文件。<br>四个子目录下的Makefile实际上是不能独立执行。主要利用$(INCLUDE_DIR)&#x2F;subdir.mk动态建立规则，诸 如$(toolchain&#x2F;stamp-install)目标是靠$(INCLUDE_DIR)&#x2F;subdir.mk的stampfile函数动态建立。 在package&#x2F;Makefile动态建立了$(package&#x2F; stamp-prereq)、$(package&#x2F; stamp-cleanup)、$(package&#x2F; stamp-compile)、$(package&#x2F; stamp-install)、$(package&#x2F; stamp-rootfs-prepare)目标。<br>定义一些使用变量命名的目标，其变量的赋值位置在$(INCLUDE_DIR)&#x2F;subdir.mk的stampfile函数中。目标只有依赖关系，可能 说明其工作顺序，在$(INCLUDE_DIR)&#x2F;subdir.mk的stampfile函数中有进一步说明其目标执行的命令，并为目标建立一个空文 件，即使用变量命名的目标为真实的文件。<br>定义一些使用固定的目标规则。<br>其中：clean是清除编译结果的目标，清除$(BUILD_DIR) $(BIN_DIR) $(BUILD_LOG_DIR)三个目录的用意是十分明确。暂时不知道为什么执行make target&#x2F;linux&#x2F;clean。<br>dirclean是删除所有编译过程产生的目录和文件的目标，执行dirclean目标依赖于clean，因此将执行clean目标所执行的命令，然后删 除$(STAGING_DIR) $(STAGING_DIR_HOST) $(STAGING_DIR_TOOLCHAIN) $(TOOLCHAIN_DIR) $(BUILD_DIR_HOST) $(BUILD_DIR_TOOLCHAIN)目录，以及删除$(TMP_DIR)目录。上述目录的变量均在rules.mk定义。好像删除 staging_dir目录就意味着删除staging_dir目录下的所有子目录，不知道为什么要强调删除$(STAGING_DIR_HOST) $(STAGING_DIR_TOOLCHAIN) $(TOOLCHAIN_DIR)目录。同样删除builde_dir目录就意味着删除builde_dir目录下的所有子目录，不知道为什么要强调删 除$(BUILD_DIR_TOOLCHAIN)目录。<br>tmp&#x2F;.prereq_packages目标是对所需软件包的预处理。目标依赖于.config，即执行make menuconfig后将会进行一次所需软件包的预处理。不知什么原因在编译前删除tmp目录，执行时无法建立tmp&#x2F;.prereq_packages 文件。<br>prereq应该是预请求目标，在OpenWrt执行Makefile时好像都要先执行prereq目标。<br>prepare应该是准备目标，是world依赖的一个伪目标。依赖于文件.config和$(tools&#x2F;stamp-install) $(toolchain&#x2F;stamp-install)目标。<br>world就是编译的目标。依赖于prepare为目标和前面提到的变量命名目标。采用取消隐含规则方式执行package&#x2F;index目标。package&#x2F;index目标在package&#x2F;Makefile的92行定义。<br>package&#x2F;symlinks和package&#x2F;symlinks-install是更新或安装软件包来源的目标，使用$(SCRIPT_DIR)&#x2F;feeds脚本文件完成。<br>package&#x2F;symlinks-clean是清除软件包来源的目标，也是使用$(SCRIPT_DIR)&#x2F;feeds脚本文件完成。<br>最后使用伪目标.PHONY说明clean dirclean prereq prepare world package&#x2F;symlinks package&#x2F;symlinks-install package&#x2F;symlinks-clean属于伪目标。通过伪目标说明可以知道可以执行的目标。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>Openwrt官网<a href="http://wiki.openwrt.org/start">http://wiki.openwrt.org/start</a></p><p>软件包相关：<a href="https://dev.openwrt.org/browser/branches/packages_10.03.2?order=name">https://dev.openwrt.org/browser/branches/packages_10.03.2?order=name</a></p><p>关于包的依赖问题：<a href="http://wiki.openwrt.org/doc/devel/dependencies">http://wiki.openwrt.org/doc/devel/dependencies</a></p><h1 id="问题记录："><a href="#问题记录：" class="headerlink" title="问题记录："></a>问题记录：</h1><h2 id="（1）【close】在移植exfat驱动到openwrt时遇到如下问题："><a href="#（1）【close】在移植exfat驱动到openwrt时遇到如下问题：" class="headerlink" title="（1）【close】在移植exfat驱动到openwrt时遇到如下问题："></a>（1）【close】在移植exfat驱动到openwrt时遇到如下问题：</h2><p>nickli@NewRouterDev:qsdk$ make package&#x2F;exfat&#x2F;{clean,prepare,compile,install} V&#x3D;99</p><p>Collecting package info: done</p><p>make[1]: Entering directory &#96;&#x2F;home&#x2F;nickli&#x2F;puma_sdk&#x2F;qualcomm_sdk&#x2F;qsdk’</p><p>make[2]: Entering directory &#96;&#x2F;home&#x2F;nickli&#x2F;puma_sdk&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;package&#x2F;exfat’</p><p>Makefile:56: warning: overriding commands for target &#96;&#x2F;home&#x2F;nickli&#x2F;puma_sdk&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;build_dir&#x2F;target-arm_v7-a_uClibc-0.9.33.2_eabi&#x2F;exfat’</p><p>Makefile:56: warning: ignoring old commands for target &#96;&#x2F;home&#x2F;nickli&#x2F;puma_sdk&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;build_dir&#x2F;target-arm_v7-a_uClibc-0.9.33.2_eabi&#x2F;exfat’</p><p>Makefile:56: warning: overriding commands for target &#96;&#x2F;home&#x2F;nickli&#x2F;puma_sdk&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;build_dir&#x2F;target-arm_v7-a_uClibc-0.9.33.2_eabi&#x2F;exfat’</p><p>Makefile:56: warning: ignoring old commands for target &#96;&#x2F;home&#x2F;nickli&#x2F;puma_sdk&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;build_dir&#x2F;target-arm_v7-a_uClibc-0.9.33.2_eabi&#x2F;exfat’</p><p>rm -f &#x2F;home&#x2F;nickli&#x2F;puma_sdk&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;staging_dir&#x2F;target-arm_v7-a_uClibc-0.9.33.2_eabi&#x2F;stamp&#x2F;.exfat _installed</p><p>bash: line 2: [: packages&#x2F;exfat: binary operator expected</p><p>rm -f &#x2F;home&#x2F;nickli&#x2F;puma_sdk&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;bin&#x2F;ipq806x&#x2F;packages&#x2F;exfat_*</p><p>rm -f &#x2F;home&#x2F;nickli&#x2F;puma_sdk&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;staging_dir&#x2F;target-arm_v7-a_uClibc-0.9.33.2_eabi&#x2F;packages&#x2F;exfat .list &#x2F;home&#x2F;nickli&#x2F;puma_sdk&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;staging_dir&#x2F;host&#x2F;packages&#x2F;exfat .list</p><p>rm -rf &#x2F;home&#x2F;nickli&#x2F;puma_sdk&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;build_dir&#x2F;target-arm_v7-a_uClibc-0.9.33.2_eabi&#x2F;exfat</p><p>make[2]: Leaving directory &#96;&#x2F;home&#x2F;nickli&#x2F;puma_sdk&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;package&#x2F;exfat’</p><p>make[1]: Leaving directory &#96;&#x2F;home&#x2F;nickli&#x2F;puma_sdk&#x2F;qualcomm_sdk&#x2F;qsdk’</p><p>make[1]: Entering directory &#96;&#x2F;home&#x2F;nickli&#x2F;puma_sdk&#x2F;qualcomm_sdk&#x2F;qsdk’</p><p>make[2]: Entering directory &#96;&#x2F;home&#x2F;nickli&#x2F;puma_sdk&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;package&#x2F;exfat’</p><p>Makefile:56: *** target file &#96;&#x2F;home&#x2F;nickli&#x2F;puma_sdk&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;build_dir&#x2F;target-arm_v7-a_uClibc-0.9.33.2_eabi&#x2F;exfat’ has both : and :: entries. Stop.</p><p>make[2]: Leaving directory &#96;&#x2F;home&#x2F;nickli&#x2F;puma_sdk&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;package&#x2F;exfat’</p><p>make[1]: *** [package&#x2F;exfat&#x2F;prepare] Error 2</p><p>make[1]: Leaving directory &#96;&#x2F;home&#x2F;nickli&#x2F;puma_sdk&#x2F;qualcomm_sdk&#x2F;qsdk’</p><p>make: *** [package&#x2F;exfat&#x2F;prepare] Error 2</p><p>问题原因：在Makefile中版本号变量后面多了个空格。</p><p>PKG_NAME:&#x3D;exfat</p><p>PKG_VERSION:&#x3D;0.9.5$space_char</p><p>PKG_RELEASE:&#x3D;1</p><p>解决方法：将版本号后面的空格去掉</p><p>结果：问题解决。</p><p>参考：<a href="https://forum.openwrt.org/viewtopic.php?id=20353">https://forum.openwrt.org/viewtopic.php?id=20353</a></p><h2 id="（2）【close】SDK修改目录名称后无法继续编译问题解决"><a href="#（2）【close】SDK修改目录名称后无法继续编译问题解决" class="headerlink" title="（2）【close】SDK修改目录名称后无法继续编译问题解决"></a>（2）【close】SDK修改目录名称后无法继续编译问题解决</h2><p>问题现象：check 了一份openwrt的SDK，执行编译之后又重新修改了该SDK的名称，导致后续再编译时无法编译。</p><p>原因：有些编译器是动态编译生成的，但是make clean之后编译器不会重新编译，其路径与绝对路径有关，修改名称后无法找到相关编译器。</p><p>解决方法：进入SDK根目录执行make distclean，将所有编译记录完整清除即可。</p><p>结果：问题解决（应该有更加优化的方法，即删除其中交叉编译链相关内容，后续有时间再解决）</p><h2 id="（3）【close】编译单个模块软件时，提示缺少C库"><a href="#（3）【close】编译单个模块软件时，提示缺少C库" class="headerlink" title="（3）【close】编译单个模块软件时，提示缺少C库"></a>（3）【close】编译单个模块软件时，提示缺少C库</h2><p>编译单个模块软件时，在最后一步执行打包操作时提示缺少libc.so.6而无法打包，信息如下：</p><p>Package skysoft_net6scan is missing dependencies for the following libraries:</p><p>libc.so.6</p><p>原因：编译单个模块时，缺少目标平台相同的libc.so.6文件。</p><p>解决方法：</p><p>参考：<a href="http://my.oschina.net/hevakelcj/blog/411944">http://my.oschina.net/hevakelcj/blog/411944</a></p><p>真正解决问题的参考：<a href="http://www.cnblogs.com/liushannet/p/3895092.html">http://www.cnblogs.com/liushannet/p/3895092.html</a></p><p>查看依赖文件：</p><p>nickli@NewRouterDev:qsdk$ readelf -d build_dir&#x2F;target-arm_v7-a_uClibc-0.9.33.2_eabi&#x2F;skysoft_net6scan&#x2F;net6scan</p><p>Dynamic section at offset 0x2e28 contains 24 entries:</p><p>Tag    Type             Name&#x2F;Value</p><p>0x0000000000000001 (NEEDED)       Shared library: [libc.so.6]</p><p>0x000000000000000c (INIT)        0x400c28</p><p>0x000000000000000d (FINI)        0x401ad0</p><p>0x0000000000000019 (INIT_ARRAY)     0x602e10</p><p>0x000000000000001b (INIT_ARRAYSZ)    8 (bytes)</p><p>0x000000000000001a (FINI_ARRAY)     0x602e18</p><p>0x000000000000001c (FINI_ARRAYSZ)    8 (bytes)</p><p>0x000000006ffffef5 (GNU_HASH)      0x400298</p><p>实际解决方法：</p><p>先检查系统里面有没有这个库存在,如果没有,安装 (在&#x2F;lib &#x2F;lib64 等目录找)<br>之后添加库openwrt的编译环境<br>修改 libc.provides 平台不同,可能目录不同,find .&#x2F;stagging_dir -name libc.provides 下<br>一般在 stagging_dir&#x2F;target-mipsel_r2_uClibc-0.9.33.2&#x2F;pkginfo&#x2F;libc.provides<br>底部添加<br>libc.so.6<br>或其他需要的库,编译时候会把这个so转为openwrt平台的库</p><p>相关命令：</p><p>1332 find &#x2F;lib* -name “libc.so.6”</p><p>1333 find .&#x2F;staging_dir&#x2F; -name libc.provides</p><p>1334 vim .&#x2F;staging_dir&#x2F;target-arm_v7-a_uClibc-0.9.33.2_eabi&#x2F;pkginfo&#x2F;libc.provides</p><p>在该文件末尾添加libc.so.6后保存并退出，之后执行编译：</p><p>1335 make package&#x2F;skysoft_net6scan&#x2F;{clean,prepare,compile,install} V&#x3D;99</p><p>能正常打包了！</p><p>结果：问题解决。</p><h2 id="（4）【close】编译的模块无法在opentwr系统中运行"><a href="#（4）【close】编译的模块无法在opentwr系统中运行" class="headerlink" title="（4）【close】编译的模块无法在opentwr系统中运行"></a>（4）【close】编译的模块无法在opentwr系统中运行</h2><p>root@rt4230w:~# &#x2F;sbin&#x2F;net6scan</p><p>&#x2F;sbin&#x2F;net6scan: line 1: syntax error: unexpected “(”</p><p>问题原因：在编译的模块Makefile中将编译器写死成了gcc，而实际上目标平台为arm需要使用交叉编译器。</p><p>解决方法：修改源码内的makefile，将gcc 改成$(CC)，结果如下：</p><p>CFLAGS +&#x3D; -Wall -D_GNU_SOURCE net6scan : main.o func.o$(CC) $(CFLAGS) -o net6scan main.o func.omain.o : main.c$(CC) $(CFLAGS) -c main.cfunc.o : func.c$(CC) $(CFLAGS) -c func.cclean:rm -rf ip6scan *.o</p><p>结果：问题解决</p><h2 id="（5）【close】在原odhcp6c源码中增加了log-c-log-h文件后，编译时出现如下问题："><a href="#（5）【close】在原odhcp6c源码中增加了log-c-log-h文件后，编译时出现如下问题：" class="headerlink" title="（5）【close】在原odhcp6c源码中增加了log.c log.h文件后，编译时出现如下问题："></a>（5）【close】在原odhcp6c源码中增加了log.c log.h文件后，编译时出现如下问题：</h2><p>make[3]: Entering directory &#96;&#x2F;home&#x2F;nickli&#x2F;cascade_sdk_new_platform&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;build_dir&#x2F;target-arm_v7-a_uClibc-0.9.33.2_eabi&#x2F;odhcp6c-2015-07-13′</p><p>make[4]: Entering directory &#96;&#x2F;home&#x2F;nickli&#x2F;cascade_sdk_new_platform&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;build_dir&#x2F;target-arm_v7-a_uClibc-0.9.33.2_eabi&#x2F;odhcp6c-2015-07-13′</p><p>make[5]: Entering directory &#96;&#x2F;home&#x2F;nickli&#x2F;cascade_sdk_new_platform&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;build_dir&#x2F;target-arm_v7-a_uClibc-0.9.33.2_eabi&#x2F;odhcp6c-2015-07-13′</p><p>make[5]: Leaving directory &#96;&#x2F;home&#x2F;nickli&#x2F;cascade_sdk_new_platform&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;build_dir&#x2F;target-arm_v7-a_uClibc-0.9.33.2_eabi&#x2F;odhcp6c-2015-07-13′</p><p>make[5]: Entering directory &#96;&#x2F;home&#x2F;nickli&#x2F;cascade_sdk_new_platform&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;build_dir&#x2F;target-arm_v7-a_uClibc-0.9.33.2_eabi&#x2F;odhcp6c-2015-07-13′</p><p>[ 16%] Building C object CMakeFiles&#x2F;odhcp6c.dir&#x2F;src&#x2F;odhcp6c.c.o</p><p>[ 33%] Building C object CMakeFiles&#x2F;odhcp6c.dir&#x2F;src&#x2F;log.c.o</p><p>&#x2F;home&#x2F;nickli&#x2F;cascade_sdk_new_platform&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;build_dir&#x2F;target-arm_v7-a_uClibc-0.9.33.2_eabi&#x2F;odhcp6c-2015-07-13&#x2F;src&#x2F;log.c: In function ‘_get_time’:</p><p>&#x2F;home&#x2F;nickli&#x2F;cascade_sdk_new_platform&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;build_dir&#x2F;target-arm_v7-a_uClibc-0.9.33.2_eabi&#x2F;odhcp6c-2015-07-13&#x2F;src&#x2F;log.c:117:9: error: missing initializer [-Werror&#x3D;missing-field-initializers]</p><p>&#x2F;home&#x2F;nickli&#x2F;cascade_sdk_new_platform&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;build_dir&#x2F;target-arm_v7-a_uClibc-0.9.33.2_eabi&#x2F;odhcp6c-2015-07-13&#x2F;src&#x2F;log.c:117:9: error: (near initialization for ‘tv.tv_usec’) [-Werror&#x3D;missing-field-initializers]</p><p>&#x2F;home&#x2F;nickli&#x2F;cascade_sdk_new_platform&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;build_dir&#x2F;target-arm_v7-a_uClibc-0.9.33.2_eabi&#x2F;odhcp6c-2015-07-13&#x2F;src&#x2F;log.c:118:9: error: missing initializer [-Werror&#x3D;missing-field-initializers]</p><p>&#x2F;home&#x2F;nickli&#x2F;cascade_sdk_new_platform&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;build_dir&#x2F;target-arm_v7-a_uClibc-0.9.33.2_eabi&#x2F;odhcp6c-2015-07-13&#x2F;src&#x2F;log.c:118:9: error: (near initialization for ‘time_value.tm_min’) [-Werror&#x3D;missing-field-initializers]</p><p>&#x2F;home&#x2F;nickli&#x2F;cascade_sdk_new_platform&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;build_dir&#x2F;target-arm_v7-a_uClibc-0.9.33.2_eabi&#x2F;odhcp6c-2015-07-13&#x2F;src&#x2F;log.c: In function ‘debug_log_print’:</p><p>&#x2F;home&#x2F;nickli&#x2F;cascade_sdk_new_platform&#x2F;qualcomm_sdk&#x2F;qsdk&#x2F;build_dir&#x2F;target-arm_v7-a_uClibc-0.9.33.2_eabi&#x2F;odhcp6c-2015-07-13&#x2F;src&#x2F;log.c:140:51: error: comparison between signed and unsigned integer expressions [-Werror&#x3D;sign-compare]</p><p>cc1: all warnings being treated as errors</p><p>分析：error: missing initializer [-Werror&#x3D;missing-field-initializers]，应该是编译程序时将警告当错误了，提示这里需要初始化，而实际上一时间没有 看出哪儿来执行正确的初始化，所以从取消掉这种警告机制着手解决。</p><p>解决办法：修改编译目录内的(build_dirvim) CMakeLists.txt文件，将-Werror改为-Wno-missing-field-initializers，如下：</p><p>8 #add_definitions(-D_GNU_SOURCE -Wall -Werror -Wextra -pedantic)</p><p>9 add_definitions(-D_GNU_SOURCE -Wall –Wno-missing-field-initializers -Wextra -pedantic)</p><p>结果：问题解决。</p><p>小结：</p><p>（1）-Werror 选线会将警告升级为错误来报告</p><p>（2）odhcp6c源码编译采用了Cmake而没有使用我们一般使用的方式——在src目录内写一份Makefile文件来编译文件，所以其规则文件都在和src目录同级的CMakeLists.txt文件中。可以学习了解一下CMake机制。</p>]]></content>
      
      
      <categories>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenWRT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenWrt常用命令详解</title>
      <link href="/post/openwrt-docs1.html"/>
      <url>/post/openwrt-docs1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="硬件相关命令"><a href="#硬件相关命令" class="headerlink" title="硬件相关命令"></a>硬件相关命令</h2><p>查看CPU信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /roc/cpuinfo</span><br></pre></td></tr></table></figure><p>查看内存使用情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/meminfo</span><br></pre></td></tr></table></figure><p>查看磁盘的使用率：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure><h2 id="系统相关命令"><a href="#系统相关命令" class="headerlink" title="系统相关命令"></a>系统相关命令</h2><p>查看内核信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><p>读取内核的日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmesg</span><br></pre></td></tr></table></figure><p>读取系统日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logread</span><br></pre></td></tr></table></figure><p>列出进程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -w</span><br></pre></td></tr></table></figure><p>显示运行时间、CPU负载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uptime</span><br></pre></td></tr></table></figure><h2 id="OPKG包管理"><a href="#OPKG包管理" class="headerlink" title="OPKG包管理"></a>OPKG包管理</h2><p>查找软件包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg list |grep xxx  # xxx 就是你想要找的包</span><br></pre></td></tr></table></figure><p>列出所有安装的包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg list-installed</span><br></pre></td></tr></table></figure><p>查看包的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg info xxx</span><br></pre></td></tr></table></figure><p>查看包的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg files xxx</span><br></pre></td></tr></table></figure><h2 id="无线相关"><a href="#无线相关" class="headerlink" title="无线相关"></a>无线相关</h2><p>查看无线网卡的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iwinfo wlan0 info</span><br></pre></td></tr></table></figure><p>重启无线服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wifi down wifi up</span><br></pre></td></tr></table></figure><p>扫描热点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iw dev wlan0 scan</span><br></pre></td></tr></table></figure><p>查看设备连接的客户端：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iwinfo wlan0 assoclist iw dev wlan0 station dump</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenWrt更换opkg软件源</title>
      <link href="/post/4f66ee58.html"/>
      <url>/post/4f66ee58.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="OpenWrt更换opkg软件源"><a href="#OpenWrt更换opkg软件源" class="headerlink" title="OpenWrt更换opkg软件源"></a>OpenWrt更换opkg软件源</h1><p>OpenWrt的OPKG命令软件源的配置文件有以下两个：</p><p>&#x2F;etc&#x2F;opkg&#x2F;customfeeds.conf：</p><p>  用户自定义源，建议把新增的软件源写在该文件中，格式为：src&#x2F;gz 源名称 源地址<br>&#x2F;etc&#x2F;opkg&#x2F;distfeeds.conf：</p><p>  发行版官方源，不建议更改，如果替换了同名称的源，可以将其内容注释掉以便恢复。</p><p>customfeeds替换为中科大、清华镜像源</p><p>方案一：</p><p>  1.先将 &#x2F;etc&#x2F;opkg&#x2F;distfeeds.conf 中的所有条目复制到 &#x2F;etc&#x2F;opkg&#x2F;customfeeds.conf 中，然后注释掉 distfeeds.conf 中的内容。<br>  2.再将 customfeeds.conf 文件中的 <a href="http://downloads.openwrt.org/">http://downloads.openwrt.org/</a> 替换为 <a href="https://mirrors.ustc.edu.cn/lede/">https://mirrors.ustc.edu.cn/lede/</a> 或者 <a href="https://mirrors.tuna.tsinghua.edu.cn/openwrt/">https://mirrors.tuna.tsinghua.edu.cn/openwrt/</a> 即可。</p><p>方案二：<br>  sed -i ‘s_downloads.openwrt.org_mirrors.tuna.tsinghua.edu.cn&#x2F;openwrt_’ &#x2F;etc&#x2F;opkg&#x2F;distfeeds.conf</p><p>由于很多源是https，所以需要安装curl的ssl支持，命令如下：</p><p>opkg update<br>opkg install libustream-openssl ca-bundle ca-certificates</p>]]></content>
      
      
      <categories>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华硕路由器ACRH17刷机教程</title>
      <link href="/post/acrh17.html"/>
      <url>/post/acrh17.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="华硕ACRH17刷机教程"><a href="#华硕ACRH17刷机教程" class="headerlink" title="华硕ACRH17刷机教程"></a>华硕ACRH17刷机教程</h1><blockquote><p><a href="https://pan.wwang.pw/%F0%9F%94%A5OpenWrt_LEAN/%E5%8D%8E%E7%A1%95ACRH17">全套刷机工具和固件</a></p><p>如地址失效，加群获取即可。</p></blockquote><h2 id="刷入解锁固件"><a href="#刷入解锁固件" class="headerlink" title="刷入解锁固件"></a>刷入解锁固件</h2><p>在原厂固件升级页面上传【oopenwrt-ipq806x-asus_rt-acrh17-squashfs-flash-factory.trx】</p><p><img src="https://blog.wwang.pw/img/blog/1.2876evdmjlog.webp"></p><p><img src="https://blog.wwang.pw/img/blog/2.3wu0yjf4dms0.webp"></p><h2 id="刷入opboot"><a href="#刷入opboot" class="headerlink" title="刷入opboot"></a>刷入opboot</h2><p>进度条走完后，192.168.1.1进入解锁固件后台，用户名root，密码password</p><ol><li><p>使用winscp上传opboot-rt-acrh17-flash-v1.0.6.bin文件至&#x2F;tmp目录下</p><p><img src="https://blog.wwang.pw/img/blog/3.2ko69i6lhqu0.webp"></p><p><img src="https://blog.wwang.pw/img/blog/4.68nr1vq1bvc0.webp"></p><p><img src="https://blog.wwang.pw/img/blog/5.3lqk3epqtwk0.webp"></p></li><li><p>使用xshell或者putty，通过ssh进入路由后台，解锁Bootloader分区（命令为：<code>mtd unlock /dev/mtd0</code>）</p></li><li><p>将opboot刷入Bootloader分区<br>命令： <code>mtd -r write /tmp/opboot-rt-acrh17-flash-v1.0.6.bin Bootloader</code></p></li></ol><p><img src="https://blog.wwang.pw/img/blog/6.65ibjws6yoc0.webp"></p><h2 id="进入opboot刷固件"><a href="#进入opboot刷固件" class="headerlink" title="进入opboot刷固件"></a>进入opboot刷固件</h2><p>按住wps键再通电，20秒后松开，192.168.1.1进入opboot控制台，选择固件点更新刷入即可</p><p><img src="https://blog.wwang.pw/img/blog/7.3eg903nz9l40.webp"></p><p><img src="https://blog.wwang.pw/img/blog/8.6o8i54jnytk0.webp"></p><blockquote><p>opboot控制台支持刷入原厂、梅林、openwrt、潘多拉等固件</p><p>openwrt固件文件过大会刷不进，解决方法是先刷20M以内的固件，再升级全功能版固件。</p></blockquote><h2 id="购买路由器"><a href="#购买路由器" class="headerlink" title="购买路由器"></a>购买路由器</h2><p>小店售有一些路由器，刷好固件再发货，不愿意折腾的可以下单。</p><p>购买链接：<a href="https://shop.wwang.pw/">https://shop.wwang.pw/</a></p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 华硕acrh17 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小米路由器R3刷机教程</title>
      <link href="/post/miwifi-r3.html"/>
      <url>/post/miwifi-r3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p><strong><a href="https://pan.w2aa.ml/zh-CN/router/xiaomi_r3/">全套刷机工具和固件</a></strong></p></blockquote><h2 id="一、升级到miwifi-r3-all-55ac7-2-11-20-bin固件"><a href="#一、升级到miwifi-r3-all-55ac7-2-11-20-bin固件" class="headerlink" title="一、升级到miwifi_r3_all_55ac7_2.11.20.bin固件"></a>一、升级到miwifi_r3_all_55ac7_2.11.20.bin固件</h2><p><img src="https://cdn.staticaly.com/gh/xiaowansm5/img@master/blog/1.64lj5zwh55o0.webp"></p><h2 id="二、开启ssh"><a href="#二、开启ssh" class="headerlink" title="二、开启ssh"></a>二、开启ssh</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.1/cgi-bin/luci/;stok=cbbff01508d95c563042c23c659c8cc3/api/xqnetwork/set_wifi_ap?ssid=tianbao&amp;encryption=NONE&amp;enctype=NONE&amp;channel=1%3Bnvram%20set%20ssh%5Fen%3D1%3B%20nvram%20commit</span><br><span class="line"></span><br><span class="line">http://192.168.31.1/cgi-bin/luci/;stok=cbbff01508d95c563042c23c659c8cc3/api/xqnetwork/set_wifi_ap?ssid=tianbao&amp;encryption=NONE&amp;enctype=NONE&amp;channel=1%3Bsed%20%2Di%20%22%3Ax%3AN%3As%2Fif%20%5C%5B%2E%2A%5C%3B%20then%5Cn%2E%2Areturn%200%5Cn%2E%2Afi%2F%23tb%2F%3Bb%20x%22%20%2Fetc%2Finit.d%2Fdropbear</span><br><span class="line"></span><br><span class="line">http://192.168.31.1/cgi-bin/luci/;stok=cbbff01508d95c563042c23c659c8cc3/api/xqnetwork/set_wifi_ap?ssid=tianbao&amp;encryption=NONE&amp;enctype=NONE&amp;channel=1%3B%2Fetc%2Finit.d%2Fdropbear%20start</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http://192.168.31.1/cgi-bin/luci/;stok=cbbff01508d95c563042c23c659c8cc3/api/xqsystem/set_name_password?oldPwd=12345678&amp;newPwd=admin</span><br></pre></td></tr></table></figure><blockquote><p><code>http://192.168.31.1/cgi-bin/luci/;stok=cbbff01508d95c563042c23c659c8cc3</code>换成你自己的，一行一个复制到浏览器回车</p></blockquote><p><img src="https://cdn.staticaly.com/gh/xiaowansm5/img@master/blog/2.60tukbam7k80.webp"></p><p><img src="https://cdn.staticaly.com/gh/xiaowansm5/img@master/blog/3.6jnveal1pj00.webp"></p><p><img src="https://cdn.staticaly.com/gh/xiaowansm5/img@master/blog/4.4o726gysdqw0.webp"></p><h2 id="三、刷入u-boot和padavan固件"><a href="#三、刷入u-boot和padavan固件" class="headerlink" title="三、刷入u-boot和padavan固件"></a>三、刷入u-boot和padavan固件</h2><p>使用winscp上传u-boot和MI-3_3.4.3.9-099.trx到路由器tmp目录，登录协议选scp<br>然后在putty中执行以下命令(逐条执行)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">nvram set boot_wait=on</span><br><span class="line">nvram set uart_en=1</span><br><span class="line">nvram commit</span><br><span class="line">mtd write /tmp/uboot.bin Bootloader</span><br><span class="line"></span><br><span class="line">cd /tmp</span><br><span class="line">dd if=MI-3_3.4.3.9-099.trx bs=4194304 count=1 2&gt; /dev/null | dd of=MI-3_3.4.3.9-099.trx.part1 2&gt; /dev/null</span><br><span class="line">mtd write MI-3_3.4.3.9-099.trx.part1 kernel1</span><br><span class="line">dd if=MI-3_3.4.3.9-099.trx bs=4194304 skip=1 2&gt; /dev/null | dd of=MI-3_3.4.3.9-099.trx.part2 2&gt; /dev/null</span><br><span class="line">mtd write MI-3_3.4.3.9-099.trx.part2 rootfs0</span><br><span class="line">nvram set flag_last_success=1</span><br><span class="line">nvram commit</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/xiaowansm5/img@master/blog/5.3783w77zm700.webp"></p><h3 id="写入patr2时出错，显示-e-，执行以下语句，并用u盘刷官方固件"><a href="#写入patr2时出错，显示-e-，执行以下语句，并用u盘刷官方固件" class="headerlink" title="写入patr2时出错，显示[e]，执行以下语句，并用u盘刷官方固件"></a>写入patr2时出错，显示[e]，执行以下语句，并用u盘刷官方固件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nvram set flag_last_success=0</span><br><span class="line">nvram set flag_try_sys1_failed=1</span><br><span class="line">nvram set flag_try_sys2_failed=1</span><br><span class="line">nvram commit</span><br></pre></td></tr></table></figure><h3 id="重启路由"><a href="#重启路由" class="headerlink" title="重启路由"></a>重启路由</h3><p>在putty中执行命令<br><code>reboot</code></p><ul><li>等待重启完成即可进后台，后台ip是192.168.123.1，用户名和密码都是admin</li></ul><p><img src="https://cdn.staticaly.com/gh/xiaowansm5/img@master/blog/6.2ce7zm3bs38k.webp"></p><h2 id="四、刷入OpenWrt固件"><a href="#四、刷入OpenWrt固件" class="headerlink" title="四、刷入OpenWrt固件"></a>四、刷入OpenWrt固件</h2><ul><li><h3 id="开启ssh后（做完上面第二步），使用winscp上传openwrt-ramips-mt7620-xiaomi-miwifi-r3-squashfs-kernel1-bin和openwrt-ramips-mt7620-xiaomi-miwifi-r3-squashfs-rootfs0-bin到路由器tmp目录，执行下面命令："><a href="#开启ssh后（做完上面第二步），使用winscp上传openwrt-ramips-mt7620-xiaomi-miwifi-r3-squashfs-kernel1-bin和openwrt-ramips-mt7620-xiaomi-miwifi-r3-squashfs-rootfs0-bin到路由器tmp目录，执行下面命令：" class="headerlink" title="开启ssh后（做完上面第二步），使用winscp上传openwrt-ramips-mt7620-xiaomi_miwifi-r3-squashfs-kernel1.bin和openwrt-ramips-mt7620-xiaomi_miwifi-r3-squashfs-rootfs0.bin到路由器tmp目录，执行下面命令："></a>开启ssh后（做完上面第二步），使用winscp上传<code>openwrt-ramips-mt7620-xiaomi_miwifi-r3-squashfs-kernel1.bin</code>和<code>openwrt-ramips-mt7620-xiaomi_miwifi-r3-squashfs-rootfs0.bin</code>到路由器tmp目录，执行下面命令：</h3></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">nvram set flag_last_success=1</span><br><span class="line">nvram set boot_wait=on</span><br><span class="line">nvram set uart_en=1</span><br><span class="line">nvram commit</span><br><span class="line">mtd write openwrt-ramips-mt7620-xiaomi_miwifi-r3-squashfs-kernel1.bin kernel1</span><br><span class="line">mtd write openwrt-ramips-mt7620-xiaomi_miwifi-r3-squashfs-rootfs0.bin rootfs0</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><blockquote><p>注意：前面4条命令非常重要，它开启 串口，因为小米默认锁死串口，如果你不开启，万一刷机失败或者出现意外，再也救不回来了，看不懂上述命令意思的不要自己胡乱操作，刷死了没得救的。</p></blockquote><ul><li>启动比较慢，多等几分钟，192.168.5.1进后台升级openwrt-ramips-mt7620-xiaomi_miwifi-r3-squashfs-sysupgrade.bin即可。</li></ul><h2 id="五、从openwrt固件刷回官方固件的方法："><a href="#五、从openwrt固件刷回官方固件的方法：" class="headerlink" title="五、从openwrt固件刷回官方固件的方法："></a>五、从openwrt固件刷回官方固件的方法：</h2><ol><li>去小米官方下载固件，命名为 miwifi.bin 保存到  U盘，插入小米USB</li><li>ssh 登陆LEDE系统，执行命令 fw_setenv flag_last_success 0</li><li>关机路由器，插电重启并且捅住菊花（reset）保持不放，直到LED灯一闪一闪</li></ol>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小米路由器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenClash 使用教程</title>
      <link href="/post/OpenClash.html"/>
      <url>/post/OpenClash.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="https://github.com/vernesong/OpenClash">OpenClash</a> 是一个可运行在 OpenWrt 上的<a href="https://github.com/Dreamacro/clash">Clash</a>客户端，一般来说你的路由器的第三方固件会附带，当然也可以自行安装。相比于传统的 SS、SSR 或者 PassWall 这些客户端来说，OpenClash 使用 Clash 的配置文件，规则代理会灵活很多，配合 yacd 等 WebUI 控制台操作也非常方便。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h2><p>OpenClash 会发布编译好的 IPK 文件（openwrt 的软件包），你可以直接<a href="https://github.com/vernesong/OpenClash/releases">下载安装</a>，然后 SSH 到 openwrt 后台进行安装。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line"></span><br><span class="line">wget https://github.com/vernesong/OpenClash/releases/download/v0.42.05-beta/luci-app-openclash_0.42.05-beta_all.ipk</span><br><span class="line"></span><br><span class="line">opkg install luci-app-openclash_0.42.05-beta_all.ipk</span><br></pre></td></tr></table></figure><p>如果你的版本比较旧，你也可以这样来更新你的 openclash，我这里就以 0.42.05 版本为例。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/4_9_46_26_202211040946807.png" alt="img"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a><strong>配置</strong></h2><h3 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a><strong>添加配置文件</strong></h3><p>你的机场一般会给你提供一个订阅地址，有没有 Clash 的订阅都没关系。ss、v2ray、trojan 都是支持的 SSR 不行🙅，复制准备好。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/4_9_45_43_202211040945885.png" alt="img"></p><p>打开 openclash，在 ConfigUpdate 配置文件订阅里选择新增。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/4_9_45_46_202211040945599.png" alt="img"></p><ul><li>配置文件名随便取个名字</li><li>然后在订阅地址里填写机场给你提供的（不是 SSR 的都行）</li><li>在线订阅转换勾选上 ｜ 如果你机场提供的就是 Clash 的配置订阅并且你也不想改，就不用勾选</li><li>订阅转换模版如果你有喜欢的可以里面选择一个，或者默认即可</li><li>其它默认即可。当然其它的选项你理解，并且有需求可以自行更改。</li></ul><p>然后保存配置。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/4_9_45_46_202211040945814.png" alt="img"></p><p>保存配置后，应用配置理论上就能直接使用了，打开 Google YouTube 等网站应该不会有问题。你可以选择打开自动更新，这样就会每天更新你机场的节点变动。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/4_9_45_44_202211040945159.png" alt="img"></p><h2 id="控制面板"><a href="#控制面板" class="headerlink" title="控制面板"></a><strong>控制面板</strong></h2><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/4_9_45_46_202211040945525.png" alt="img"></p><p>在 OpenClash 打开后会提供控制面板，推荐你选择 Yacd 的。控制面板提供流量信息，可以方便的切换节点配置。（如果你打开后需要填写 ip 地址就是你这台 openwrt 路由器的 IP，端口默认是 9090，密码默认是：123456 ）控制面板的信息在上图中也有提供。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/4_9_46_17_202211040946472.png" alt="img"></p><p>概述里面能看到图形化的实时流量信息。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/4_9_45_59_202211040945952.png" alt="img"></p><p>在代理里面能切换节点。简单介绍下规则：</p><ul><li>节点选择就是默认的选择节点（你也可以选择 url-test，系统就会选择默认延迟低的；全球直连则是不走代理）</li><li>自动选择（这个你可以忽略）</li><li>国外媒体、微软服务、苹果服务等等，你的可能不一样。你可以针对每个服务进行选择，这样的好处是灵活。比如你可以让电报走美国节点，Netflix 选择香港、苹果的选择直接连接等等。</li></ul><p>这个文件规则是你上面「订阅转换模版」选择的结果，你可以在那里选择功能更丰富的规则。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/4_9_46_1_202211040946347.png" alt="img"></p><p>在配置里默认是 Rule 就是有规则的代理，国内网站不走代理，国外的才走，能大大提升速度节省流量。如果你想完全不走代理你在这里可以选择 Direct、如果你想所有的网站包括国内都走代理可以在这里选择 Global，然后在上一步代理的 Global 里即可选择节点。</p><h3 id="方便的-Web-管理"><a href="#方便的-Web-管理" class="headerlink" title="方便的 Web 管理"></a><strong>方便的</strong> <strong>Web</strong> <strong>管理</strong></h3><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/4_9_46_3_202211040946743.png" alt="img"></p><p>你可以打开 <a href="http://yacd.haishan.me/">http://yacd.haishan.me/</a> 保存这个网站到书签或者你浏览器的首页，手机、电脑任何一个设备都可以。然后添加你的控制面板信息，http:&#x2F;&#x2F;路由器IP:端口、然后输入密码、像是上图我的那样（结尾不需要&#x2F;）。就可以成功添加。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/4_9_46_9_202211040946534.png" alt="img"></p><p>这样局域网里的任何设备都能非常方便的控制 Clash 的规则、查看网络信息等等。非常方便</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>OpenClash 可能看起来麻烦点，不过实际使用却非常方便灵活，能按规则的走代理，让不同的服务走不同的节点就非常方便。配合 Web 网页的控制后台，非常推荐大家路由器都使用这种更先进的上网方式。</p>]]></content>
      
      
      <categories>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenClash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建 GitHub 个人资料页面，并自动同步最近的博客文章</title>
      <link href="/post/2f0f.html"/>
      <url>/post/2f0f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="https://cdn.monlor.com/2022/04/17/16502033793638.jpg"><img src="https://t.x-wan.top/i/2022/05/08/o4w7qi.jpeg" alt="img"></a></p><p>最近看到很多关注的大佬 GitHub 主页都有类似的资料介绍页面，才知道 GitHub 原来还有这个功能，于是迫不及待的整起来。</p><p>项目地址：<a href="https://github.com/monlor/monlor">https://github.com/monlor/monlor</a></p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── .github</span><br><span class="line">│   └── workflows</span><br><span class="line">│       └── autoupdate.yml  # github actions 定期自动运行 python 脚本</span><br><span class="line">├── .gitignore </span><br><span class="line">├── README.md </span><br><span class="line">├── requirements.txt  # python 依赖</span><br><span class="line">└── update.py  # 生成 README.md 文件，并同步博客文章</span><br></pre></td></tr></table></figure><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p><strong>仅支持同步 Typecho 博客的文章</strong>，通过解析 RSS 订阅实现</p><h3 id="下载项目"><a href="#下载项目" class="headerlink" title="下载项目"></a>下载项目</h3><p>项目地址：<a href="https://github.com/monlor/monlor">https://github.com/monlor/monlor</a></p><h3 id="修改-update-py"><a href="#修改-update-py" class="headerlink" title="修改 update.py"></a>修改 update.py</h3><p>脚本用于动态生成 README.md</p><ol><li>替换<a href="https://www.monlor.com为你的博客地址/">https://www.monlor.com为你的博客地址</a></li><li>替换<a href="https://github.com/monlor%E4%B8%BA%E4%BD%A0%E7%9A%84">https://github.com/monlor为你的</a> GitHub 地址</li><li>替换 Github Statistics 中的 username 为你的 GitHub 用户名</li></ol><p><a href="https://cdn.monlor.com/2022/04/17/16502013202199.jpg"><img src="https://t.x-wan.top/i/2022/05/08/ot93lx.jpg" alt="img"></a><br><a href="https://cdn.monlor.com/2022/04/17/16502013503805.jpg"><img src="https://t.x-wan.top/i/2022/05/08/otddsk.jpeg" alt="img"></a></p><h3 id="修改-github-x2F-workflows-x2F-autoupdate-yml"><a href="#修改-github-x2F-workflows-x2F-autoupdate-yml" class="headerlink" title="修改 .github&#x2F;workflows&#x2F;autoupdate.yml"></a>修改 .github&#x2F;workflows&#x2F;autoupdate.yml</h3><p>GitHub Actions 定期执行 update.py 脚本，自动更新博客文章，并使用 Bark 发送通知</p><ol><li><p>修改 git 用户和邮箱，monlor和<a href="mailto:&#109;&#101;&#x40;&#109;&#x6f;&#110;&#x6c;&#x6f;&#114;&#46;&#99;&#x6f;&#x6d;">&#109;&#101;&#x40;&#109;&#x6f;&#110;&#x6c;&#x6f;&#114;&#46;&#99;&#x6f;&#x6d;</a><br><a href="https://cdn.monlor.com/2022/04/17/16502014877708.jpg"><img src="https://t.x-wan.top/i/2022/05/08/otp8t6.jpeg" alt="img"></a></p></li><li><p>添加 GitHub 密钥，用于 <a href="https://github.com/Finb/Bark">Bark</a> 消息通知<br><a href="https://cdn.monlor.com/2022/04/17/16502011573697.jpg"><img src="https://t.x-wan.top/i/2022/05/08/oturic.jpeg" alt="img"></a></p></li><li><p>如果你不需要使用消息通知，可以跳过第二步，并删除以下内容</p></li><li><p>name: Notification<br>uses: monlor&#x2F;bark-action@v2<br>if: $false<br>with:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">host: $&#123;&#123; secrets.BARK_HOST&#125;&#125; # not required</span><br><span class="line">key: $&#123;&#123; secrets.BARK_KEY &#125;&#125;   # Your secret key</span><br><span class="line">title: Github Actions</span><br><span class="line">body: &#x27;$&#123;&#123; github.repository &#125;&#125;更新成功！&#x27;</span><br><span class="line">isArchive: 1</span><br><span class="line">url: &#x27;github://github.com/$&#123;&#123; github.repository &#125;&#125;&#x27;</span><br><span class="line">group: Github</span><br><span class="line">icon: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png</span><br></pre></td></tr></table></figure><h3 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h3><p>将项目名称修改为你的 GitHub 用户名【必须】</p><p>GitHub 用你的用户名创建一个同名项目</p><p>将刚才修改的代码提交到这个项目果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin &#123;你的项目地址&#125;</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;init project&quot;</span><br><span class="line">git push origin main # main 为初始化的分支名，也可能是 master</span><br></pre></td></tr></table></figure><h3 id="检查结果"><a href="#检查结果" class="headerlink" title="检查结果"></a>检查结果</h3><p>提交完成之后会触发 GitHub Actions，自动更新 README.md<br>如下，查看你的项目中 Actions 功能，是否构建成功</p></li></ol><p><a href="https://cdn.monlor.com/2022/04/17/16502018372182.jpg"><img src="https://t.x-wan.top/i/2022/05/08/otxo4x.jpeg" alt="img"></a></p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>到这里你的 GitHub 资料页已经完成，enjoy~</p><p><img src="https://t.x-wan.top/i/2022/05/08/ou9sxf.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用命令</title>
      <link href="/post/29dc6fe8.html"/>
      <url>/post/29dc6fe8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h1><h3 id="列出所有容器ID"><a href="#列出所有容器ID" class="headerlink" title="列出所有容器ID"></a>列出所有容器ID</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -aq</span><br></pre></td></tr></table></figure><h3 id="查看所有运行或者不运行容器"><a href="#查看所有运行或者不运行容器" class="headerlink" title="查看所有运行或者不运行容器"></a>查看所有运行或者不运行容器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h3 id="停止所有的container（容器），这样才能够删除其中的images："><a href="#停止所有的container（容器），这样才能够删除其中的images：" class="headerlink" title="停止所有的container（容器），这样才能够删除其中的images："></a>停止所有的container（容器），这样才能够删除其中的images：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker ps -a -q) 或者 docker stop $(docker ps -aq) </span><br></pre></td></tr></table></figure><h3 id="如果想要删除所有container（容器）的话再加一个指令："><a href="#如果想要删除所有container（容器）的话再加一个指令：" class="headerlink" title="如果想要删除所有container（容器）的话再加一个指令："></a>如果想要删除所有container（容器）的话再加一个指令：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -a -q) 或者 docker rm $(docker ps -aq) </span><br></pre></td></tr></table></figure><h3 id="查看当前有些什么images"><a href="#查看当前有些什么images" class="headerlink" title="查看当前有些什么images"></a>查看当前有些什么images</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h3 id="删除images（镜像），通过image的id来指定删除谁"><a href="#删除images（镜像），通过image的id来指定删除谁" class="headerlink" title="删除images（镜像），通过image的id来指定删除谁"></a>删除images（镜像），通过image的id来指定删除谁</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi &lt;image id&gt;</span><br></pre></td></tr></table></figure><h3 id="想要删除untagged-images，也就是那些id为的image的话可以用"><a href="#想要删除untagged-images，也就是那些id为的image的话可以用" class="headerlink" title="想要删除untagged images，也就是那些id为的image的话可以用"></a>想要删除untagged images，也就是那些id为的image的话可以用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images | grep &quot;^&lt;none&gt;&quot; | awk &quot;&#123;print $3&#125;&quot;)</span><br></pre></td></tr></table></figure><h3 id="要删除全部image（镜像）的话"><a href="#要删除全部image（镜像）的话" class="headerlink" title="要删除全部image（镜像）的话"></a>要删除全部image（镜像）的话</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure><h3 id="强制删除全部image的话"><a href="#强制删除全部image的话" class="headerlink" title="强制删除全部image的话"></a>强制删除全部image的话</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f $(docker images -q)</span><br></pre></td></tr></table></figure><h3 id="从容器到宿主机复制"><a href="#从容器到宿主机复制" class="headerlink" title="从容器到宿主机复制"></a>从容器到宿主机复制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp tomcat：/webapps/js/text.js /home/admin</span><br><span class="line">docker  cp 容器名:  容器路径 宿主机路径</span><br></pre></td></tr></table></figure><h3 id="从宿主机到容器复制"><a href="#从宿主机到容器复制" class="headerlink" title="从宿主机到容器复制"></a>从宿主机到容器复制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp /home/admin/text.js tomcat：/webapps/js</span><br><span class="line">docker cp 宿主路径中文件      容器名  容器路径</span><br></pre></td></tr></table></figure><h3 id="删除所有停止的容器"><a href="#删除所有停止的容器" class="headerlink" title="删除所有停止的容器"></a>删除所有停止的容器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container prune</span><br></pre></td></tr></table></figure><h3 id="删除所有不使用的镜像"><a href="#删除所有不使用的镜像" class="headerlink" title="删除所有不使用的镜像"></a>删除所有不使用的镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image prune --force --all或者docker image prune -f -a</span><br></pre></td></tr></table></figure><h3 id="停止、启动、杀死、重启一个容器"><a href="#停止、启动、杀死、重启一个容器" class="headerlink" title="停止、启动、杀死、重启一个容器"></a>停止、启动、杀死、重启一个容器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker stop Name或者ID  </span><br><span class="line">docker start Name或者ID  </span><br><span class="line">docker kill Name或者ID  </span><br><span class="line">docker restart name或者ID</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 一键测速脚本 SuperSpeed 修复版</title>
      <link href="/post/4.7e+83.html"/>
      <url>/post/4.7e+83.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Linux-一键测速脚本-SuperSpeed-修复版"><a href="#Linux-一键测速脚本-SuperSpeed-修复版" class="headerlink" title="Linux 一键测速脚本 SuperSpeed 修复版"></a>Linux 一键测速脚本 SuperSpeed 修复版</h1><p>用来检测服务器到国内三网运营商速度的一键脚本 <a href="https://www.dujin.org/tag/superspeed">SuperSpeed</a> 修复版，很方便，可以测速你的服务器到国内各大节点的速度。如果单纯想测试服务器速度的话，这个脚本十分不错，这里上个今天测试的截图，共小伙伴们参考：</p><p><img src="https://img.dujin.org/uploads/2022/05/20220504113538.png" alt="img"></p><h2 id="执行代码"><a href="#执行代码" class="headerlink" title="执行代码"></a>执行代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -Lso- https://git.io/superspeed_uxh)</span><br></pre></td></tr></table></figure><p><strong>备用代码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -Lso- https://raw.githubusercontent.com/uxh/superspeed/master/superspeed.sh)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测速 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YesPlayMusic部署教程</title>
      <link href="/post/YesPlayMusic.html"/>
      <url>/post/YesPlayMusic.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="官方介绍"><a href="#官方介绍" class="headerlink" title="官方介绍"></a>官方介绍</h2><ul><li>项目地址：<a href="https://github.com/qier222/YesPlayMusic">https://github.com/qier222/YesPlayMusic</a></li></ul><h2 id="✨-特性"><a href="#✨-特性" class="headerlink" title="✨ 特性"></a>✨ 特性</h2><ul><li>✅ 使用 Vue.js 全家桶开发</li><li>🔴 网易云账号登录（扫码&#x2F;手机&#x2F;邮箱登录）</li><li>📺 支持 MV 播放</li><li>📃 支持歌词显示</li><li>📻 支持私人 FM &#x2F; 每日推荐歌曲</li><li>🚫🤝 无任何社交功能</li><li>🌎️ 海外用户可直接播放（需要登录网易云账号）</li><li>🔐 支持 <a href="https://github.com/UnblockNeteaseMusic/server#%E9%9F%B3%E6%BA%90%E6%B8%85%E5%8D%95">UnblockNeteaseMusic</a>，自动使用<a href="https://github.com/UnblockNeteaseMusic/server#%E9%9F%B3%E6%BA%90%E6%B8%85%E5%8D%95">各类音源</a>替换变灰歌曲链接 （网页版不支持）<ul><li>「各类音源」指默认启用的音源。</li><li>YouTube 音源需自行安装 <code>yt-dlp</code>。</li></ul></li><li>✔️ 每日自动签到（手机端和电脑端同时签到）</li><li>🌚 Light&#x2F;Dark Mode 自动切换</li><li>👆 支持 Touch Bar</li><li>🖥️ 支持 PWA，可在 Chrome&#x2F;Edge 里点击地址栏右边的 ➕ 安装到电脑</li><li>🟥 支持 Last.fm Scrobble</li><li>☁️ 支持音乐云盘</li><li>⌨️ 自定义快捷键和全局快捷键</li><li>🎧 支持Mpris</li><li>🛠 更多特性开发中</li></ul><h2 id="📦️-安装"><a href="#📦️-安装" class="headerlink" title="📦️ 安装"></a>📦️ 安装</h2><p>Electron 版本由 <a href="https://github.com/hawtim">@hawtim</a> 和 <a href="https://github.com/qier222">@qier222</a> 适配并维护，支持 macOS、Windows、Linux。</p><p>访问本项目的 <a href="https://github.com/qier222/YesPlayMusic/releases">Releases</a><br>页面下载安装包。</p><ul><li><p>macOS 用户可以通过 Homebrew 来安装：<code>brew install --cask yesplaymusic</code></p></li><li><p>Windows 用户可以通过 Scoop 来安装：<code>scoop install extras/yesplaymusic</code></p></li></ul><h2 id="部署至-Vercel"><a href="#部署至-Vercel" class="headerlink" title="部署至 Vercel"></a>部署至 Vercel</h2><p>除了下载安装包使用，你还可以将本项目部署到 Vercel 或你的服务器上。下面是部署到 Vercel 的方法</p><ol><li><p>部署网易云 API，详情参见 <a href="https://home.x-wan.top/archives/neteasecloudmusicapi">服务器部署NeteaseCloudMusicApi方法</a> 。你也可以将 API 部署到 Vercel。</p></li><li><p>点击本仓库右上角的 Fork，复制本仓库到你的 GitHub 账号。</p><p><img src="https://t.x-wan.top/i/2022/05/02/z9hsjm.png"></p></li><li><p>打开 <a href="https://vercel.com/">Vercel.com</a>，使用 GitHub 登录。</p><p><img src="https://t.x-wan.top/i/2022/05/02/za5rzm.png"></p></li><li><p>点击 Import Git Repository 并选择你刚刚复制的仓库并点击 Import。</p><p><img src="https://t.x-wan.top/i/2022/05/02/zba82m.png"></p></li><li><p>点击 PERSONAL ACCOUNT 旁边的 Select。</p></li><li><p>点击 Environment Variables，填写 Name 为 <code>VUE_APP_NETEASE_API_URL</code>，Value 为你刚刚部署的网易云 API 地址，点击 Add。最后点击底部的 Deploy 就可以部署到 Vercel 了。</p></li></ol><p><img src="https://t.x-wan.top/i/2022/05/02/zd64hs.png"></p><h2 id="完成撒花"><a href="#完成撒花" class="headerlink" title="完成撒花"></a>完成撒花</h2><blockquote><p>点Go to Dashboard，再点Visit即可进入搭建好的网站</p><p>你也可以点View Domains绑定自己的域名</p></blockquote><p><img src="https://t.x-wan.top/i/2022/05/02/zijvbt.png"></p><ul><li>我搭建的YesPlayMusic：<a href="https://music.x-wan.top/">https://music.x-wan.top/</a></li><li>我的网易云api：<a href="https://api.x-wan.top/">https://api.x-wan.top/</a></li></ul><h2 id="支持客户端"><a href="#支持客户端" class="headerlink" title="支持客户端"></a>支持客户端</h2><blockquote><p>客户端支持解锁灰色音乐</p><p>客户端下载地址：<a href="https://github.com/qier222/YesPlayMusic/releases/tag/v0.4.5">https://github.com/qier222/YesPlayMusic/releases/tag/v0.4.5</a></p></blockquote><p><img src="https://t.x-wan.top/i/2022/05/02/10mf13i.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YesPlayMusic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器部署NeteaseCloudMusicApi方法</title>
      <link href="/post/NeteaseCloudMusicApi.html"/>
      <url>/post/NeteaseCloudMusicApi.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="服务器部署NeteaseCloudMusicApi方法"><a href="#服务器部署NeteaseCloudMusicApi方法" class="headerlink" title="服务器部署NeteaseCloudMusicApi方法"></a>服务器部署<a href="https://neteasecloudmusicapi.vercel.app/#/?id=neteasecloudmusicapi">NeteaseCloudMusicApi</a>方法</h1><blockquote><p>环境要求：</p><p>宝塔面板</p><p>安全组放行相应端口</p><p>pm2管理器</p></blockquote><h2 id="宝塔面板里新建站点"><a href="#宝塔面板里新建站点" class="headerlink" title="宝塔面板里新建站点"></a>宝塔面板里新建站点</h2><p><img src="https://t.x-wan.top/i/2022/05/02/xyywgu.png"></p><h2 id="下载源码，解压，放入站点根目录"><a href="#下载源码，解压，放入站点根目录" class="headerlink" title="下载源码，解压，放入站点根目录"></a>下载源码，解压，放入站点根目录</h2><blockquote><p>源码地址：<a href="https://github.com/Binaryify/NeteaseCloudMusicApi">https://github.com/Binaryify/NeteaseCloudMusicApi</a></p></blockquote><p><img src="https://t.x-wan.top/i/2022/05/02/yqb16s.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#命令下载源码：</span><br><span class="line">cd /www/wwwroot/api.x-wan.top</span><br><span class="line">https://github.com/Binaryify/NeteaseCloudMusicApi.git</span><br></pre></td></tr></table></figure><p><img src="https://t.x-wan.top/i/2022/05/02/yqz6us.png"></p><h2 id="进入源代码根目录执行"><a href="#进入源代码根目录执行" class="headerlink" title="进入源代码根目录执行"></a>进入源代码根目录执行</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install </span><br></pre></td></tr></table></figure><p><img src="https://t.x-wan.top/i/2022/05/02/ys7g6e.png"></p><h2 id="安装pm2管理器"><a href="#安装pm2管理器" class="headerlink" title="安装pm2管理器"></a>安装pm2管理器</h2><p><img src="https://t.x-wan.top/i/2022/05/02/xxeeiv.png"></p><h2 id="打开pm2管理器，添加项目"><a href="#打开pm2管理器，添加项目" class="headerlink" title="打开pm2管理器，添加项目"></a>打开pm2管理器，添加项目</h2><blockquote><p>启动文件名称为app.js</p><p>输入项目所在根目录</p><p>项目名称随意</p><p>点击保存</p></blockquote><p><img src="https://t.x-wan.top/i/2022/05/02/yu0jcq.png"></p><h2 id="添加反向代理"><a href="#添加反向代理" class="headerlink" title="添加反向代理"></a>添加反向代理</h2><blockquote><p>先放行3000端口</p></blockquote><p><img src="https://t.x-wan.top/i/2022/05/02/yw9h6d.png"></p><ul><li>至此API应该部署完成了，大家懒得部署的也可以访问我的<a href="https://api.x-wan.top/">API</a></li></ul><p><img src="https://t.x-wan.top/i/2022/05/02/yxoc4o.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MusicAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小米红米ac2100刷机教程完整版</title>
      <link href="/post/ac2100.html"/>
      <url>/post/ac2100.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="刷入breed控制台"><a href="#刷入breed控制台" class="headerlink" title="刷入breed控制台"></a>刷入breed控制台</h2><blockquote><p>一键刷入breed请参考帖子：<a href="https://url.x-wan.top/sac2100">https://url.x-wan.top/sac2100</a></p></blockquote><p>一键刷入breed代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.1/cgi-bin/luci/;stok=CCCCCCCCCCC/api/misystem/set_config_iotdev?bssid=Xiaomi&amp;user_id=longdike&amp;ssid=%0Acd%20%2Ftmp%0Acurl%20-o%20B%20-O%20https%3A%2F%2Fbreed.hackpascal.net%2Fr1286%2520%255b2020-10-09%255d%2Fbreed-mt7621-xiaomi-r3g.bin%20-k%20-g%0A%5B%20-z%20%22%24(sha256sum%20B%20%7C%20grep%20242d42eb5f5aaa67ddc9c1baf1acdf58d289e3f792adfdd77b589b9dc71eff85)%22%20%5D%20%7C%7C%20mtd%20-r%20write%20B%20Bootloader%0A</span><br></pre></td></tr></table></figure><blockquote><p><code>http://192.168.31.1/cgi-bin/luci/;stok=CCCCCCCCCCC</code>换成你自己的。</p></blockquote><h2 id="进入breed控制台"><a href="#进入breed控制台" class="headerlink" title="进入breed控制台"></a>进入breed控制台</h2><blockquote><p>如何进breed请参考帖子：<a href="https://home.x-wan.top/archives/breed">https://home.x-wan.top/archives/breed</a></p></blockquote><h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><p>点【环境变量编辑】，再点【添加】，字段为<code>xiaomi.r3g.bootfw</code>，值为<code>2</code>，再点【保存】</p><p><img src="https://img.x-wan.top/imgs/2022/04/8febc80609b4ae1a.png"></p><p><img src="https://img.x-wan.top/imgs/2022/04/9d067e93fba5b365.png"></p><h2 id="刷入底包固件"><a href="#刷入底包固件" class="headerlink" title="刷入底包固件"></a>刷入底包固件</h2><p>点【固件更新】，在固件的右侧点浏览选<strong>openwrt-ramips-mt7621-xiaomi_redmi-router-ac2100-initramfs-kernel.bin</strong>，再点【上传】，再点【更新】，进度条走完后，等3分钟左右进op后台（后台地址192.168.5.1）</p><p><img src="https://img.x-wan.top/imgs/2022/04/30920c850b7a61a8.png"></p><p><img src="https://img.x-wan.top/imgs/2022/04/4f054bb0b49b2605.png"></p><h2 id="升级完整版固件"><a href="#升级完整版固件" class="headerlink" title="升级完整版固件"></a>升级完整版固件</h2><p>192.168.5.1进入openwrt后台，点【系统】，再点【备份与升级】</p><p><img src="https://img.x-wan.top/imgs/2022/04/6dd01515df14b475.png"></p><p>再点【刷写固件】</p><p><img src="https://img.x-wan.top/imgs/2022/04/d88feeb02f339a8a.png"></p><p>再点【浏览】，选<strong>openwrt-ramips-mt7621-xiaomi_redmi-router-ac2100-squashfs-sysupgrade.bin</strong>，再点【上传】</p><p><img src="https://img.x-wan.top/imgs/2022/04/8726ede66d1a9bdd.png"></p><p>再把保持设置配置的√去掉，再点【继续】</p><p><img src="https://img.x-wan.top/imgs/2022/04/b2e4915163918369.png"></p><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>等待5分钟，再进op后台即可完工</p><p><img src="https://img.x-wan.top/imgs/2022/04/3453d1f0e4739565.png"></p><h2 id="固件下载地址"><a href="#固件下载地址" class="headerlink" title="固件下载地址"></a>固件下载地址</h2><p>☁网盘：<a href="http://pan.wwang.pw/">http://pan.wwang.pw</a></p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github Pages + Hexo 搭建个人博客</title>
      <link href="/post/ca35.html"/>
      <url>/post/ca35.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>Hexo是一款流行的开源静态网站生成器，使用Node.js编写。它旨在使用基于Markdown的语法创建快速简单的博客、作品集和个人网站。Hexo生成静态HTML文件，可部署到任何Web服务器上，使发布内容变得简单而不需要服务器端应用程序。Hexo的一些功能包括强大的插件系统、主题和支持GitHub Pages、GitLab Pages和Netlify。Hexo正在积极维护，并拥有一个庞大的贡献者和用户社区。</p></blockquote><h2 id="配置安装环境"><a href="#配置安装环境" class="headerlink" title="配置安装环境"></a>配置安装环境</h2><ol><li>修改配置文件：（不要用windows的记事本），推荐使用<a href="https://www.sublimetext.com/">Sublime Text3</a></li><li>下载Git：<a href="https://git-scm.com/downloads">Git</a></li><li>下载Node.js：<a href="https://nodejs.org/en/download/">Node.js</a></li><li>查看环境安装是否成功：node -v 出现版本号，npm -v 出现版本号，git –version 出现版本号</li><li>如果node -v 报错的话，那么将Node.js的安装路径加到环境变量中。</li><li>设置npm的镜像源：查看npm的配置</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#查看npm的配置</span><br><span class="line">npm config list</span><br><span class="line">#默认源</span><br><span class="line">npm config set registry https://registry.npmjs.org</span><br><span class="line">#临时改变镜像源</span><br><span class="line">npm --registry=https://registry.npm.taobao.org</span><br><span class="line">#永久设置为淘宝镜像源</span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line">#另一种方式，编辑 ~/.npmrc 加入下面内容</span><br><span class="line">registry = https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="本地安装hexo静态博客框架"><a href="#本地安装hexo静态博客框架" class="headerlink" title="本地安装hexo静态博客框架"></a>本地安装hexo静态博客框架</h2><h3 id="hexo框架安装初始化"><a href="#hexo框架安装初始化" class="headerlink" title="hexo框架安装初始化"></a>hexo框架安装初始化</h3><p>新建一个文件夹，比如BolgTest的文件夹，创建完后，先不要点进去，在此处点击鼠标右键，选择Git Bash Here，然后依次输入如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># hexo框架的安装</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"># 等上一个命令完成后，在输入下面的命令</span><br><span class="line">hexo init &lt;新建文件夹的名称&gt;  #初始化文件夹</span><br><span class="line">cd &lt;新建文件夹的名称&gt;</span><br><span class="line">npm install  # 安装博客所需要的依赖文件  </span><br></pre></td></tr></table></figure><h3 id="生成运行"><a href="#生成运行" class="headerlink" title="生成运行"></a>生成运行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#生成Hexo页面</span><br><span class="line">hexo g</span><br><span class="line">#启动服务</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>浏览器中打开<code>http://localhost:4000</code>或者<code>127.0.0.1:4000</code>，可以看到一个网页，说明Hexo博客已经成功在本地运行。</p><h3 id="主题选择个性化修改"><a href="#主题选择个性化修改" class="headerlink" title="主题选择个性化修改"></a>主题选择个性化修改</h3><p>选择主题：在github上找套自己喜欢的主题，下在完解压到&lt;blog安装路径&gt;&#x2F;themes&#x2F;下。</p><p>站点配置修改在&lt;blog安装路径&gt;&#x2F;_config.yml，主题配置文件在&lt;blog安装路径&gt;&#x2F;themes&#x2F;&lt;&gt;</p><h3 id="本博客采用-butterfly-主题"><a href="#本博客采用-butterfly-主题" class="headerlink" title="本博客采用 butterfly 主题"></a>本博客采用 butterfly 主题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line">#或者</span><br><span class="line">git clone -b master https://gitee.com/immyw/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><h2 id="应用站点"><a href="#应用站点" class="headerlink" title="应用站点"></a>应用站点</h2><p>修改站点配置文件<code>_config.yml</code>，把主题改为 butterfly <code>theme: butterfly</code></p><h3 id="个性化修改前安装插件"><a href="#个性化修改前安装插件" class="headerlink" title="个性化修改前安装插件"></a>个性化修改前安装插件</h3><p>个性化修改前安装插件</p><p>安装 pug 以及 stylus 渲染器插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>安装将要用到的插件插件</p><p>注脚插件（可选）： hexo-reference，reference 插件说明。</p><p>部署插件 (必要)： hexo-deployer-git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount hexo-wordcount hexo-generator-search hexo-reference hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h2 id="美化参考"><a href="#美化参考" class="headerlink" title="美化参考"></a>美化参考</h2><p><a href="https://www.qwas.top/p/hexo.html/">Xpand的hexo主题配置</a></p><blockquote><p>感谢以下博客提供的学习参考</p><p><a href="https://butterfly.js.org/posts/21cfbf15/#%E5%AE%89%E8%A3%9D">Butterfly 安裝文檔(一) 快速開始</a></p><p><a href="https://butterfly.js.org/posts/dc584b87/">Butterfly 安裝文檔(二) 主題頁面</a></p><p><a href="https://butterfly.js.org/posts/4aa8abbe/#%E7%B6%B2%E7%AB%99%E8%B3%87%E6%96%99">Butterfly 安装文档(三) 主题配置</a></p><p><a href="https://butterfly.js.org/posts/ceeb73f">Butterfly 安装文档(四) 主题配置</a></p><p><a href="https://xiabor.com/4215.html">Butterfly 主题更新总结</a></p><p><a href="https://www.antmoe.com/posts/a811d614/index.html">Hexo博客之butterfly主题优雅魔改系列</a></p><p><a href="https://xiabor.com/714f.html">Hexo 大结局</a></p></blockquote><h2 id="推送到GitHub"><a href="#推送到GitHub" class="headerlink" title="推送到GitHub"></a>推送到GitHub</h2><h3 id="注册GitHub账号"><a href="#注册GitHub账号" class="headerlink" title="注册GitHub账号"></a>注册GitHub账号</h3><ol><li><p>注册GitHub账号</p></li><li><p>新建仓库，仓库名为<code>你的用户名.github.io</code></p></li></ol><h3 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h3><ul><li>安装成功后，将 git 与 GitHub 账号绑定，右键打开 Git Bash，然后设置配置信息：</li><li><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/1_9_28_16_202303010928624.webp" alt="img"></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 配置用户名和邮箱</span><br><span class="line">git config --global user.name &quot;github 用户名&quot;</span><br><span class="line">git config --global user.email &quot;github 注册邮箱&quot;</span><br></pre></td></tr></table></figure><ul><li>接着生成 ssh 密钥文件，输入如下命令后直接三次回车即可，一般不需要设置密码；</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 生成 ssh 密钥</span><br><span class="line">ssh-keygen -t rsa -C &quot;github 注册邮箱&quot;</span><br></pre></td></tr></table></figure><ul><li>一般执行上述命令之后，会生成 id_rsa 和 id_rsa.pub 两个文件，前者是我们私有的，而后者则是对外开放的。接着找到生成的 .ssh 的文件夹中的 id_rsa.pub 密钥，将内容复制；</li></ul><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/1_9_27_59_202303010927284.webp" alt="img"></p><ul><li>然后打开 <a href="https://links.jianshu.com/go?to=https://github.com/settings/keys">GitHub-Settings-Keys</a> 页面，创建一个新的 SSH key，填写 Title 和 Key，Title 可以随意，而 Key 的内容则是我们刚才复制的 id_rsa.pub 中的内容，最后点击 Add SSH key 即可；</li></ul><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/1_9_27_50_202303010927277.webp" alt="img"><br>c盘得到的id_rsa.pub文件就是key，登了github添加即可 </p><ul><li>改 hexo 根目录下的文件<code>_config.yml</code> 中的 deploy，添加仓库地址</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">      github: git@github.com:xiaopengand/xiaopengand.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><ul><li>生成并上传仓库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><ul><li>如果没有 hexo-deployer-git，安装</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><h3 id="域名解析成功，但显示404"><a href="#域名解析成功，但显示404" class="headerlink" title="域名解析成功，但显示404"></a>域名解析成功，但显示404</h3><p>在博客目录下<code>/soure/</code>文件下创建一个CNAME的文件，文件内容填你的域名地址 例如我的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx.top</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker的webui程序Portainer（openwrt群晖）</title>
      <link href="/post/a11.html"/>
      <url>/post/a11.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h4 id="部署命令："><a href="#部署命令：" class="headerlink" title="部署命令："></a>部署命令：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker volume create portainer_data</span><br><span class="line">docker run -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</span><br></pre></td></tr></table></figure><h4 id="设置混扎模式"><a href="#设置混扎模式" class="headerlink" title="设置混扎模式"></a>设置混扎模式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ip link set ovs_eth0 promisc on</span><br><span class="line">#其中ovs_eth0 这个需要修改，输入ifconfig 看你的IP地址在哪个位置就修改为什么</span><br></pre></td></tr></table></figure><h4 id="设置MACVLAN"><a href="#设置MACVLAN" class="headerlink" title="设置MACVLAN"></a>设置MACVLAN</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d macvlan --subnet=10.0.0.0/24 --gateway=10.0.0.252 -o parent=ovs_eth0 macvlan</span><br><span class="line"></span><br><span class="line">#其中ovs_eth0 这个需要修改，输入ifconfig 看你的IP地址在哪个位置就修改为什么,macvlan为名称可以随意修改</span><br></pre></td></tr></table></figure><h4 id="启动openwrt命令"><a href="#启动openwrt命令" class="headerlink" title="启动openwrt命令"></a>启动openwrt命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart always --name vlede --network macvlan --ip=10.0.0.99 --privileged veelove/vlede:1.4.2 /sbin/init</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIT 学习</title>
      <link href="/post/18085cf9.html"/>
      <url>/post/18085cf9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Windows-安装-git"><a href="#Windows-安装-git" class="headerlink" title="Windows 安装 git"></a>Windows 安装 git</h2><p>下载 <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> 安装无脑下一步</p><h2 id="设置名字，邮箱"><a href="#设置名字，邮箱" class="headerlink" title="设置名字，邮箱"></a>设置名字，邮箱</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config –global user.name “Xpand”</span><br><span class="line">git config –global user.email “admin@qwas.top”</span><br></pre></td></tr></table></figure><span id="more"></span><blockquote><p>git config 命令的 –global 参数，用了这个参数，表示这台机器上所有仓库都会使用这个配置，当然也可以单独给每个仓库配置</p></blockquote><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd f: 进入 f 盘</span><br><span class="line">mkdir gitxuexi 创建 gitxuexi 文件夹</span><br><span class="line">cd gitxuexi 进入 gitxuexi 文件夹</span><br><span class="line">pwd 查看当前目录</span><br></pre></td></tr></table></figure><p>$ git init 设置这个目录 Git 可以管理的仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Initialized empty Git repository in F:/gitxuexi/.git/</span><br></pre></td></tr></table></figure><p>仓库创建会生成.git 目录，但目录是隐藏的，可以用 <code>ls -ah</code> 命令查看</p><blockquote><p>注意：Windows 自带的记事本会在每个文件开头添加了 0xefbbbf（十六进制）的字符</p></blockquote><h2 id="添加到仓库"><a href="#添加到仓库" class="headerlink" title="添加到仓库"></a>添加到仓库</h2><p>编写一个 readme.txt 文件，<br>添加 <code>git add readme.txt</code> 到仓库<br>提交 <code>git commit -m</code> “提交说明”</p><h2 id="时光穿梭机"><a href="#时光穿梭机" class="headerlink" title="时光穿梭机"></a>时光穿梭机</h2><p>修改文件内容<br>git status 运行查看仓库状态会提示你文件被修改过，但没有准备提交的修改。<br>git diff 查看具体被改动的地方</p><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p><code>git log</code> 查看历史记录<br><code>git log –pretty=oneline</code> 查看简略记录<br>上个版本用 HEAD^ 表示，上上个版本用 HEAD^^ 表示，前 100 版本用 HEAD~100<br>回退命令 <code>git reset –hard HEAD^</code><br>回到最新 <code>git reset –hard</code> &lt;代表版本号的哈希值&gt;<br><code>git reflog</code> 用来记录你每一次命令</p><h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h2><p><code>git add</code> 命令实际上就是把要提交的所有修改改到暂放区，然后，执行 <code>git commit</code> 就可以一次性把暂存区的所有修改提交到分支。</p><h2 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h2><p><code>git diff HEAD – readme.txt</code><br><code>git diff HEAD –</code> &lt;需要比较的文件&gt;<br>Git 是跟踪修改的，每次修改，如果不用 git add 到暂存区，那就不会加入到 commit 中</p><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><p><code>git checkout – readme.txt</code><br><code>git checkout –</code> &lt;需要撤销的文件&gt;<br><code>git reset HEAD</code> &lt;需要丢弃修改文件&gt;<br>撤销修改</p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>命令 <code>git rm</code> 用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。</p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>创建 SSH Key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C “admin@qwas.top“</span><br></pre></td></tr></table></figure><h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><p>从电脑上连接到 github 仓库上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:xiaopengand/xpand.git</span><br></pre></td></tr></table></figure><p>把本地库推送到远程库上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>把本地库的内容推送到远程，用 <code>git push</code> 命令，实际上是把当前分支 master 推送到远程。</p><p>由于远程库是空的，我们第一次推送 master 分支时，加上了 - u 参数，Git 不但会把本地的 master 分支内容推送的远程新的 master 分支，还会把本地的 master 分支和远程的 master 分支关联起来，在以后的推送或者拉取时就可以简化命令。<br>从现在起，只要本地作了提交，就可以通过命令：</p><p><code>git push origin master</code><br>把本地 master 分支的最新修改推送至 GitHub，现在，你就拥有了真正的分布式版本库！<br>这里遇到了一个问题，花了我半天时间，<br>连不上<br>最后发现只是公司 ip 被墙了，用自己流量就行了，就这花了我半天时间。</p><h2 id="远程仓库克隆"><a href="#远程仓库克隆" class="headerlink" title="远程仓库克隆"></a>远程仓库克隆</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;远程仓库地址&gt;</span><br></pre></td></tr></table></figure><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>创建与合并分支<br>查看分支：<code>git branch</code><br>创建分支：<code>git branch</code> &lt;需要创建分支名&gt;<br>切换分支：<code>git checkout</code> &lt;需要切换的分支&gt; 或 <code>git switch</code> &lt; 需要切换的分支 &gt;<br>创建 + 切换分支：<code>git checkout -b</code> 或 <code>git switch -c</code><br>合并某分支到当前分支：<code>git merge</code><br>删除分支：<code>git branch -d</code></p><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>当 Git 无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。<br>解决冲突就是把 Git 合并失败的文件手动编辑为我们希望的内容，再提交。<br>用 <code>git log –graph</code> 命令可以看到分支合并图。</p><h2 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h2><p><code>git merge –no-ff -m</code> “更新说明” &lt; 合并分支名 &gt;<br>合并分支时，加上<code>–no-ff</code> 参数就可以用普通模式合并，合并后的历史有分支，能看出曾经做过合并，而 fast forward 合并就看不出来曾经做过的合并。</p><h2 id="Bug-分支"><a href="#Bug-分支" class="headerlink" title="Bug 分支"></a>Bug 分支</h2><p>但手头分支没有完成时，先把工作现场 <code>git stash</code> 一下，然后去其他分支修复，再 <code>git stash pop</code>，回到工作现场；再 master 分支上修复 bug，想要合并到当前 dev 分支，可以用 <code>git cherry-pick</code> 命令，把 bug 提交的修改 “复制” 到当前分支，避免重复劳动。</p><h2 id="Feature-分支"><a href="#Feature-分支" class="headerlink" title="Feature 分支"></a>Feature 分支</h2><p>开发一个新的 feature，最好新建一个分支<br>如果要丢弃一个没有被合并过的分支，可以通过 <code>git branch -D</code> &lt;需要强制删除的分支名&gt; 强行删除。</p><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><p>查看远程仓库：<code>git remote</code><br>或者用 <code>git remote -v</code> 显示更详细的信息<br>显示了 push 说明有推送权限<br>推送分支：<code>git push origin master</code><br>推送其他分支：<code>git push</code> &lt;远程仓库名称&gt; &lt; 其他分支名称 &gt;<br>抓取分支<br>远程克隆：<code>git clone</code> 仓库地址<br><code>git branch</code> 查看分支<br><code>git push origin dev</code> 推送 dev 分支到远程<br><code>git checkout -b dev origin/dev</code> 创建远程 origin 的 dev 分支到本地</p><ol><li>首先，可以试图用 <code>git push origin</code> 推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用 git pull 试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用 <code>git push origin</code> 推送就能成功！<br>如果 git pull 提示 no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令 <code>git branch –set-upstream-to origin/</code></li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>查看远程库信息，使用 <code>git remote -v</code>；<br>本地新建的分支如果不推送到远程，对其他人就是不可见的；<br>从本地推送分支，使用 <code>git push origin branch-name</code>，如果推送失败，先用 git pull 抓取远程的新提交；<br>在本地创建和远程分支对应的分支，使用 <code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；<br>建立本地分支和远程分支的关联，使用 <code>git branch –set-upstream branch-name origin/branch-name</code>；<br>从远程抓取分支，使用 <code>git pull</code>，如果有冲突，要先处理冲突.</p><p>Rebase<br>rebase 操作可以把本地未 push 的分叉提交历史整理成直线；<br>rebase 的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比</p><h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><p>创建标签：<code>git tag</code><br>查看标签：<code>git tag</code><br>给历史记录打上标签：<code>git tag</code><br>查看标签信息：<code>git show</code><br>创建带有说明的标签，用 - a 指定标签名，-m 指定说明文字：<br><code>git tag -a v0.1 -m</code> ” 标签说明 “</p><h3 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h3><p>删除标签：<code>git tag -d</code><br>推送标签到远程仓库：<code>git push origin v1.0</code><br>一次性推送全部标签：<code>git push origin –tags</code><br>如果删除远程标签：<br>先删除本地 <code>git tag -d</code><br>然后从远程删除，删除命令也是 push，但格式如下：<br><code>git push origin :refs/tags/</code></p><h2 id="使用-GitHub"><a href="#使用-GitHub" class="headerlink" title="使用 GitHub"></a>使用 GitHub</h2><h3 id="使用-Gitee"><a href="#使用-Gitee" class="headerlink" title="使用 Gitee"></a>使用 Gitee</h3><p>使用命令 <code>git remote add origin</code> &lt;仓库地址&gt;<br>使用 <code>gir remote add</code> 时报错<br>说明本地库已经关联了一个名叫 origin 的远程库，此时，可以先用 <code>git remote -v</code> 查看远程信息<br>删除已有的 github 远程库：<code>git remote rm origin</code><br>再关联 Gitee 的远程库<br><code>git remote add origin</code> &lt;gitee 仓库地址&gt;<br>通过 git push 命令就可以把本地库推送到 Gitee 上。<br>一个本地库同时关联到 GitHub，又关联 Gitee</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote add github` &lt;github 仓库地址&gt;</span><br><span class="line">git remote add gitee` &lt;gitee 仓库地址&gt;</span><br><span class="line">git push github master</span><br><span class="line">git push gitee master`</span><br></pre></td></tr></table></figure><h3 id="自定义-Git"><a href="#自定义-Git" class="headerlink" title="自定义 Git"></a>自定义 Git</h3><p><code>git config –global color.ui true</code><br>这样，Git 会适当地显示不同的颜色。</p><h3 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h3><p>忽略文件的原则是：</p><ol><li>忽略操作系统自动生成的文件，如缩略图等；</li><li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没有必要放进版本库，比如 Java 生成的.class 文件；</li><li>忽略你自己带有敏感信息的配置文件，如存放口令的配置文件。<br>在 Git 工作区下的根目录创建一个特权的.gitignore 文件，然后把要忽略的文件名填进去，Git 就会自动忽略这些文件。GitHub 上有各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：配置文件地址 <a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a><br>如果你确实添加该文件，可以用 - f 强制添加到 git：<br><code>git add -f</code><br>或者你发现，可能是.gitignore 写的有问题，需要找出来到底哪个规则写错了，可以用 <code>git check-ignore</code> 命令检查，-v 参数查看具体：<br><code>git check-ignore -v</code><br>把指定文件排除在.gitignore 规则外的写法就是！+ 文件名。</li></ol><h3 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h3><p><code>git config –global alias.st status</code><br>输入 <code>git st</code> 表示 git status<br><code>–global</code> 参数是全局参数，也就是这些命令在这台电脑的所有 Git 仓库下都有用。<br>甚至还有人丧心病狂地把 lg 配置成了：</p><p>配置 Git 的时候，加上–global 是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。<br>配置文件放哪了？每个仓库的 Git 配置文件都放在.git&#x2F;config 文件中：<br>别名就在 [alias] 后面，要删除别名，直接把对应的行删掉即可。<br>而当前用户的 Git 配置文件放在用户主目录下的一个隐藏文件.gitconfig 中：</p><h3 id="搭建-Git-服务器"><a href="#搭建-Git-服务器" class="headerlink" title="搭建 Git 服务器"></a>搭建 Git 服务器</h3><p>文章参考 <a href="https://home.x-wan.top/archives/git-server">https://home.x-wan.top/archives/git-server</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 服务器搭建</title>
      <link href="/post/de3a2596.html"/>
      <url>/post/de3a2596.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Git-服务器搭建"><a href="#Git-服务器搭建" class="headerlink" title="Git 服务器搭建"></a>Git 服务器搭建</h1><p>上一章节中我们远程仓库使用了 Github，Github 公开的项目是免费的，2019 年开始 Github 私有存储库也可以无限制使用。</p><p>这当然我们也可以自己搭建一台 Git 服务器作为私有仓库使用。</p><p>接下来我们将以 Centos 为例搭建 Git 服务器。</p><h3 id="1、安装Git"><a href="#1、安装Git" class="headerlink" title="1、安装Git"></a>1、安装Git</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel</span><br><span class="line">$ yum install git</span><br></pre></td></tr></table></figure><p>接下来我们 创建一个git用户组和用户，用来运行git服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ groupadd git</span><br><span class="line">$ useradd git -g git</span><br></pre></td></tr></table></figure><h3 id="2、创建证书登录"><a href="#2、创建证书登录" class="headerlink" title="2、创建证书登录"></a>2、创建证书登录</h3><p>收集所有需要登录的用户的公钥，公钥位于id_rsa.pub文件中，把我们的公钥导入到&#x2F;home&#x2F;git&#x2F;.ssh&#x2F;authorized_keys文件里，一行一个。</p><p>如果没有该文件创建它：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cd /home/git/</span><br><span class="line">$ mkdir .ssh</span><br><span class="line">$ chmod 755 .ssh</span><br><span class="line">$ touch .ssh/authorized_keys</span><br><span class="line">$ chmod 644 .ssh/authorized_keys</span><br></pre></td></tr></table></figure><h3 id="3、初始化Git仓库"><a href="#3、初始化Git仓库" class="headerlink" title="3、初始化Git仓库"></a>3、初始化Git仓库</h3><p>首先我们选定一个目录作为Git仓库，假定是&#x2F;home&#x2F;gitrepo&#x2F;runoob.git，在&#x2F;home&#x2F;gitrepo目录下输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cd /home</span><br><span class="line">$ mkdir gitrepo</span><br><span class="line">$ chown git:git gitrepo/</span><br><span class="line">$ cd gitrepo</span><br><span class="line"></span><br><span class="line">$ git init --bare runoob.git</span><br><span class="line">Initialized empty Git repository in /home/gitrepo/runoob.git/</span><br></pre></td></tr></table></figure><p>以上命令Git创建一个空仓库，服务器上的Git仓库通常都以.git结尾。然后，把仓库所属用户改为git：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chown -R git:git runoob.git</span><br></pre></td></tr></table></figure><h3 id="4、克隆仓库"><a href="#4、克隆仓库" class="headerlink" title="4、克隆仓库"></a>4、克隆仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@192.168.45.4:/home/gitrepo/runoob.git</span><br><span class="line">Cloning into &#x27;runoob&#x27;...</span><br><span class="line">warning: You appear to have cloned an empty repository.</span><br><span class="line">Checking connectivity... done.</span><br></pre></td></tr></table></figure><p>192.168.45.4 为 Git 所在服务器 ip ，你需要将其修改为你自己的 Git 服务 ip。</p><p>这样我们的 Git 服务器安装就完成。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IPTV | 关于IPTV的一些常用命令</title>
      <link href="/post/IPTV.html"/>
      <url>/post/IPTV.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h4 id="获取root权限"><a href="#获取root权限" class="headerlink" title="获取root权限"></a>获取root权限</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su      #不一定适用每一个设备</span><br></pre></td></tr></table></figure><h4 id="给予system读写权限"><a href="#给予system读写权限" class="headerlink" title="给予system读写权限"></a>给予system读写权限</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mount -o remount -o rw /system</span><br><span class="line">#以上方式无法给予读写权限，用下面的方法：</span><br><span class="line">su</span><br><span class="line">echo 1 &gt; /sys/class/remount/need_remount</span><br><span class="line">mount -o rw,remount /system</span><br></pre></td></tr></table></figure><h4 id="备份各分区文件"><a href="#备份各分区文件" class="headerlink" title="备份各分区文件"></a>备份各分区文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /dev/block/platform/.......       #/......的具体具体根据不同盒子进入分区备份</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/5_13_25_13_202211051325359.png" alt="1"></p><h4 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h4><p>插入U盘到IPTV盒子，输入命令列出U盘目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/5_13_25_23_202211051325886.png" alt="2"></p><p><strong>备份</strong></p><p>这里举例把boot分区备份到U盘</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/block/boot of=/storage/external_storage/sda1/boot</span><br><span class="line"></span><br><span class="line">#/dev/block/boot为分区路径   /storage/external_storage/sda1/为U盘路径，后面的boot按分区名称自定义一个备份的名称</span><br></pre></td></tr></table></figure><p><strong>还原</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dd if=/storage/external_storage/sda1/boot of=/dev/block/boott</span><br><span class="line"></span><br><span class="line">#/dev/block/boot为分区路径   /storage/external_storage/sda1/为U盘路径，后面的boot按分区名称自定义一个备份的名称</span><br></pre></td></tr></table></figure><h4 id="开机画面"><a href="#开机画面" class="headerlink" title="开机画面"></a>开机画面</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /system/media</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 电视盒子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IPTV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OPENWRT|突发openwrt无法进入后台，空白一片，但是网络正常的解决方案</title>
      <link href="/post/df23.html"/>
      <url>/post/df23.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近有很多朋友反应突然openwrt无法进入后台，空白一片，但是网络正常，这个问题主要是openwrt使用的主题存在某方面的BUG导致的。下面来看如何解决急救方法。</p><p>方法一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/config</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p>可以看到argon文件，然后输入以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi argon</span><br><span class="line">把里面的的1改为0即可</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/5_13_27_30_202211051327992.png" alt="1">方法二：</p><h2 id="一、首先下载一个临时的主题使用"><a href="#一、首先下载一个临时的主题使用" class="headerlink" title="一、首先下载一个临时的主题使用"></a>一、首先下载一个临时的主题使用</h2><p>这里为大家提供的是material主题，BUG相对较少</p><p><a href="https://p.wwang.pw/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%9B%BA%E4%BB%B6%E5%90%88%E9%9B%86%E2%9C%A8/%F0%9F%8C%88Theme">下载主题文件</a></p><h2 id="二、把下载好的主题文件上传到openwrt的tmp临时文件目录。"><a href="#二、把下载好的主题文件上传到openwrt的tmp临时文件目录。" class="headerlink" title="二、把下载好的主题文件上传到openwrt的tmp临时文件目录。"></a>二、把下载好的主题文件上传到openwrt的tmp临时文件目录。</h2><p>这里电脑是苹果电脑直接使用终端，win电脑使用CMD命令调出终端。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scp /电脑所在的路径（直接把主题拖进来就会自动生成路径）/luci-theme-material_0.2.19-1_all.ipk root@10.10.10.252:/tmp      </span><br><span class="line"></span><br><span class="line">#root@10.10.10.252:/tmp 这里面的IP地址更改为你的openwrt路由器的地址</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/5_13_29_4_202211051329448.png" alt="2"></p><h2 id="三、登录openwrt的ssh-去安装这个主题"><a href="#三、登录openwrt的ssh-去安装这个主题" class="headerlink" title="三、登录openwrt的ssh 去安装这个主题"></a>三、登录openwrt的ssh 去安装这个主题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">opkg install /tmp/luci-theme-XXXX.ipk      </span><br><span class="line"></span><br><span class="line">#xxxx的地方换为主题的名称，luci-theme-material_0.2.19-1_all.ipk</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/5_13_29_12_202211051329896.png" alt="3"></p><h2 id="四、选择新主题，由于进不了后台，所以也只能用命令来更换新主题"><a href="#四、选择新主题，由于进不了后台，所以也只能用命令来更换新主题" class="headerlink" title="四、选择新主题，由于进不了后台，所以也只能用命令来更换新主题"></a>四、选择新主题，由于进不了后台，所以也只能用命令来更换新主题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/config/luci</span><br></pre></td></tr></table></figure><p>找到里面这行内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">option mediaurlbase &#x27;/luci-static/argon&#x27;</span><br><span class="line"></span><br><span class="line">替换为</span><br><span class="line"></span><br><span class="line">option mediaurlbase &#x27;/luci-static/material&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#material 就是新主题的名称</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/5_13_30_10_202211051330363.png" alt="4"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/5_13_30_8_202211051330620.png" alt="5"></p><h2 id="五、如果想卸载主题"><a href="#五、如果想卸载主题" class="headerlink" title="五、如果想卸载主题"></a>五、如果想卸载主题</h2><p>1.查看已经安装的主题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg list-installed|grep luci-theme</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/5_13_30_20_202211051330174.png" alt="6"></p><p>这里查询安装了两个主题 一个 argon 一个material，现在我们卸载新主题material</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg remove luci-theme-material     #luci-theme-argon-material主题我们上面查询到的</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/5_13_30_55_202211051330058.png" alt="11"></p><p>注意：卸载完后，后台图形界面还在会有该主题的名称选项</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/5_13_31_31_202211051331304.png" alt="22"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/config/luci</span><br></pre></td></tr></table></figure><p>在里面找到这个位置，把option Material ‘&#x2F;luci-static&#x2F;material’ 这行删除，无需从起</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config internal &#x27;themes&#x27;</span><br><span class="line">        option Argon &#x27;/luci-static/argon&#x27;</span><br><span class="line">        option Material &#x27;/luci-static/material&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/5_13_31_52_202211051331522.png" alt="33"></p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OPENWRT | 端口如何转发小白篇</title>
      <link href="/post/721d.html"/>
      <url>/post/721d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="一、网络—-防火墙，把红框里面的都改为接受"><a href="#一、网络—-防火墙，把红框里面的都改为接受" class="headerlink" title="一、网络—-防火墙，把红框里面的都改为接受"></a>一、网络—-防火墙，把红框里面的都改为接受</h2><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/5_13_35_39_202211051335577.png" alt="1"></p><h2 id="二、在端口转发页面配置端口转发"><a href="#二、在端口转发页面配置端口转发" class="headerlink" title="二、在端口转发页面配置端口转发"></a>二、在端口转发页面配置端口转发</h2><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/5_13_36_0_202211051336913.png" alt="2"></p><h2 id="三、通过以上两个步骤配置后，端口转发不通的，把第二步配置的端口转发删除，手动进行转发配置"><a href="#三、通过以上两个步骤配置后，端口转发不通的，把第二步配置的端口转发删除，手动进行转发配置" class="headerlink" title="三、通过以上两个步骤配置后，端口转发不通的，把第二步配置的端口转发删除，手动进行转发配置"></a>三、<strong>通过以上两个步骤配置后，端口转发不通的，把第二步配置的端口转发删除，手动进行转发配置</strong></h2><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2022/11/5_13_36_8_202211051336416.png" alt="3"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -I PREROUTING -i pppoe-wan -p tcp --dport 8000 -j DNAT --to-destination 10.10.10.252:80</span><br></pre></td></tr></table></figure><p>以上命令中：8000是自定的外网端口，10.10.10.252:80是内网IP+端口</p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> 端口转发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TinyFileManager - PHP轻量文件管理器</title>
      <link href="/post/Tiny.html"/>
      <url>/post/Tiny.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="TinyFileManager-PHP轻量文件管理器"><a href="#TinyFileManager-PHP轻量文件管理器" class="headerlink" title="TinyFileManager - PHP轻量文件管理器"></a>TinyFileManager - PHP轻量文件管理器</h1><p>Tiny File Manager 正如他名字一样，轻量文件管理器，主要文件就三个文件。安装<code>pecl-rar</code>和<code>pecl-zip</code>扩展后可在线 读取&#x2F;解压&#x2F;生成 压缩文件。</p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/prasathmani/tinyfilemanager">https://github.com/prasathmani/tinyfilemanager</a></p><p>本站下载<br>链接：<a href="https://p.x-wan.top/d/PC%E8%BD%AF%E4%BB%B6%E3%80%90%E8%93%9D%E5%A5%8F%E4%BA%91%E3%80%91/Linux/tinyfilemanager-2.4.7.zip">下载</a><br>注意：本站下载链接为本文章发布时软件的最高版本，可能与当前时间提供版本有较大差距</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>git下载文件后，上传到服务器，解压，访问<code>网站/文件夹/tinyfilemanager.php</code>，默认账号：<code>admin</code>，默认密码：<code>admin@123</code>。<code>config.php</code>、<code>translation.json</code>、<code>tinyfilemanager.php</code>分别是配置文件、语言文件、主文件，保存这三项即可。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/blog/1.3jhmc2cqznk0.webp" alt="tiny file manager"></p><p> tiny file manager</p><p>登陆后，可以在右上角设置，设置语言、显示错误、显示隐藏文件、隐藏权限和文件夹大小，通过右上角帮助，生成hash密码，可以生成密码替换<code>config.php</code>文件内数组<code>$auth_users</code>，第一项账号，第二项密码hash。通过修改<code>$readonly_users</code>可以设置哪个账号为用户账号。用户账号只能读取文件，管理员账号可以上传，修改，删除等操作。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/blog/2.3g09xd35v1c0.webp" alt="管理员账号"></p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/blog/3.6wout60tgjw0.webp" alt="用户账号"></p><p>读取压缩文件</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 文件管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows OpenSSH配置多密钥登录Linux</title>
      <link href="/post/35adecea.html"/>
      <url>/post/35adecea.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>vscode连接远程服务器需要输入密码，搜索了一下基本都是客户端生成密钥后，将公钥上传到服务器，但是个人觉得多台服务器同个公钥不太安全。</p><h2 id="服务器生成密钥"><a href="#服务器生成密钥" class="headerlink" title="服务器生成密钥"></a>服务器生成密钥</h2><p>切换到<code>.ssh</code>文件夹，输入<code>ssh-keygen</code>，第一个是备注名，后面是私钥密码，理论默认就行。生成后将*.pub写入到<code>authorized_keys</code>内。使用sftp等工具将私钥文件下载并保存到本地。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/blog/1.6u5oewr02740.webp" alt="配置服务器"></p><p> 配置服务器</p><h2 id="修改本地配置文件"><a href="#修改本地配置文件" class="headerlink" title="修改本地配置文件"></a>修改本地配置文件</h2><p>打开本地config文件，路径在<code>C:\Users\用户名\.ssh\config</code>内。IdentityFile填写得是你下载的私钥的路径，我是保存在同意文件夹内。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/blog/2.3rlyk826f7g0.webp" alt="私钥路径"></p><p> 私钥路径</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/blog/3.4i1f1d8drrs0.webp" alt="配置文件"></p><p> 配置文件</p><p>最后连接只需要填写连接的备注名，使用IP连接是无法免密码连接的。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/blog/4.56oa6s0baes0.webp" alt="连接"></p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 远程桌面连接提示“出现了内部错误”的解决办法</title>
      <link href="/post/932.html"/>
      <url>/post/932.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="远程桌面提示内部错误"><a href="#远程桌面提示内部错误" class="headerlink" title="远程桌面提示内部错误"></a>远程桌面提示内部错误</h2><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/blog/1.5as9vmorh0s0.webp" alt="img"></p><h2 id="修改被控电脑参数"><a href="#修改被控电脑参数" class="headerlink" title="修改被控电脑参数"></a>修改被控电脑参数</h2><p>在被远程桌面的服务器或电脑里；</p><ol><li>开始“<code>运行</code>”（win+r）；</li><li>输入：<code>gpedit.msc</code>回车；</li><li>找到<code>计算机配置</code>→<code>管理模板</code>→<code>Windows 组件</code>→<code>远程桌面服务</code>→<code>远程桌面会话主机</code>→<code>安全</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/blog/2.3epwdcyi9zo0.webp" alt="img"></p><p>找到<code>远程（RDP）链接要求使用制定的安全层</code>→选择<code>已启用</code>，安全层选择：<code>RDP</code>，点击<code>确定</code>保存。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/blog/3.38v35qqo3ww0.webp" alt="img"></p><p>然后，重启下该电脑即可。</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo常用命令笔记</title>
      <link href="/post/cf1e7f74.html"/>
      <url>/post/cf1e7f74.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g <span class="comment">#安装  </span></span><br><span class="line">npm update hexo -g <span class="comment">#升级  </span></span><br><span class="line">hexo init <span class="comment">#初始化</span></span><br></pre></td></tr></table></figure><h2 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h2><p><code>hexo n &quot;我的博客&quot;</code> &#x3D;&#x3D; <code>hexo new &quot;我的博客&quot;</code> #新建文章<br><code>hexo p</code> &#x3D;&#x3D; <code>hexo publish</code><br><code>hexo g</code> &#x3D;&#x3D; <code>hexo generate</code>#生成<br><code>hexo s</code> &#x3D;&#x3D; <code>hexo server</code> #启动服务预览<br><code>hexo d</code> &#x3D;&#x3D; <code>hexo deploy</code>#部署</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p><code>hexo server</code> #Hexo 会监视文件变动并自动更新，您无须重启服务器。<br><code>hexo server -s</code> #静态模式<br><code>hexo server -p 5000</code> #更改端口<br><code>hexo server -i 192.168.1.1</code> #自定义 IP</p><p><code>hexo clean</code> #清除缓存 网页正常情况下可以忽略此条命令<br><code>hexo g</code> #生成静态网页<br><code>hexo d</code> #开始部署</p><h3 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h3><p><code>hexo generate</code> #使用 Hexo 生成静态文件快速而且简单<br><code>hexo generate --watch</code> #监视文件变动</p><h3 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h3><blockquote><p>两个命令的作用是相同的<br><code>hexo generate --deploy</code><br><code>hexo deploy --generate</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy -g`</span><br><span class="line">`hexo server -g</span><br></pre></td></tr></table></figure><h2 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><h2 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h2><p><code>hexo new &quot;postName&quot;</code> #新建文章<br><code>hexo new page &quot;pageName&quot;</code> #新建页面<br><code>hexo generate</code> #生成静态页面至public目录<br><code>hexo server</code> #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br><code>hexo deploy</code> #将.deploy目录部署到GitHub</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;`</span><br><span class="line">`hexo new photo &quot;My Gallery&quot;`</span><br><span class="line">`hexo new &quot;Hello World&quot; --lang tw</span><br></pre></td></tr></table></figure><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td>layout</td><td>布局</td></tr><tr><td>title</td><td>标题</td></tr><tr><td>date</td><td>文件建立日期</td></tr></tbody></table><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: 使用Hexo搭建个人博客</span><br><span class="line">layout: post</span><br><span class="line">date: 2014<span class="string">-03</span><span class="string">-03</span> 19:07:43</span><br><span class="line">comments: true</span><br><span class="line">categories: Blog</span><br><span class="line"><span class="keyword">tags:</span> [Hexo]</span><br><span class="line">keywords: Hexo, Blog</span><br><span class="line">description: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。</span><br></pre></td></tr></table></figure><h2 id="模版（Scaffold）"><a href="#模版（Scaffold）" class="headerlink" title="模版（Scaffold）"></a>模版（Scaffold）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new photo &quot;My Gallery&quot;</span><br></pre></td></tr></table></figure><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td>layout</td><td>布局</td></tr><tr><td>title</td><td>标题</td></tr><tr><td>date</td><td>文件建立日期</td></tr></tbody></table><h2 id="设置文章摘要"><a href="#设置文章摘要" class="headerlink" title="设置文章摘要"></a>设置文章摘要</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">以上是文章摘要 <span class="comment">&lt;!--more--&gt;</span> 以下是余下全文 </span><br></pre></td></tr></table></figure><h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &lt;title&gt;`</span><br><span class="line">`hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td>:title</td><td>标题</td></tr><tr><td>:year</td><td>建立的年份（4 位数）</td></tr><tr><td>:month</td><td>建立的月份（2 位数）</td></tr><tr><td>:i_month</td><td>建立的月份（去掉开头的零）</td></tr><tr><td>:day</td><td>建立的日期（2 位数）</td></tr><tr><td>:i_day</td><td>建立的日期（去掉开头的零）</td></tr></tbody></table><h3 id="推送到服务器上"><a href="#推送到服务器上" class="headerlink" title="推送到服务器上"></a>推送到服务器上</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo n` #写文章</span><br><span class="line">`hexo g` #生成</span><br><span class="line">`hexo d` #部署 #可与`hexo g`合并为 `hexo d -g</span><br></pre></td></tr></table></figure><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><h3 id="1-找不到git部署"><a href="#1-找不到git部署" class="headerlink" title="1.找不到git部署"></a>1.找不到git部署</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ERROR </span>Deployer not found: git</span><br></pre></td></tr></table></figure><p><strong>解决方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="3-部署类型设置git"><a href="#3-部署类型设置git" class="headerlink" title="3.部署类型设置git"></a>3.部署类型设置git</h3><p>hexo 3.0 部署类型不再是<code>github</code>，<code>_config.yml</code> 中修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@***.github.com:***/***.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="4-xcodebuild"><a href="#4-xcodebuild" class="headerlink" title="4. xcodebuild"></a>4. xcodebuild</h3><p>xcode-select: error: tool ‘xcodebuild’ requires Xcode, but active developer directory ‘&#x2F;Library&#x2F;Developer&#x2F;CommandLineTools’ is a command line tools instance</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bcrypt</span><br></pre></td></tr></table></figure><h3 id="5-RSS不显示"><a href="#5-RSS不显示" class="headerlink" title="5. RSS不显示"></a>5. RSS不显示</h3><h4 id="安装RSS插件"><a href="#安装RSS插件" class="headerlink" title="安装RSS插件"></a>安装RSS插件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><h4 id="开启RSS功能"><a href="#开启RSS功能" class="headerlink" title="开启RSS功能"></a>开启RSS功能</h4><p>编辑hexo&#x2F;_config.yml，添加如下代码：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: /atom.<span class="keyword">xml</span> <span class="title">#rss</span>地址  默认即可</span><br></pre></td></tr></table></figure><h4 id="开启评论"><a href="#开启评论" class="headerlink" title="开启评论"></a>开启评论</h4><p>1.我使用多说代替自带的评论，在<a href="http://duoshuo.com/">多说</a> 网站注册 &gt; 后台管理 &gt; 添加新站点 &gt; 工具 &#x3D;&#x3D;&#x3D; 复制通用代码 里面有 short_name</p><ol><li>在根目录 <code>_config.yml</code> 添加一行 <code>disqus_shortname: jslite</code> 是在多说注册时产生的</li><li>复制到 <code>themes\landscape\layout\_partial\article.ejs</code><br>把</li></ol><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&lt;%</span><span class="language-perl"> <span class="keyword">if</span> (!<span class="keyword">index</span> &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; </span><span class="language-xml">%&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;comments&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;disqus_thread&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">noscript</span>&gt;</span>Please enable JavaScript to view the <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;//disqus.com/?ref_noscript&quot;</span>&gt;</span>comments powered by Disqus.<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&lt;%</span><span class="language-perl"> &#125; </span><span class="language-xml">%&gt;</span></span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;comments&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多说评论框 start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ds-thread&quot;</span> <span class="attr">data-thread-key</span>=<span class="string">&quot;&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;&quot;</span> <span class="attr">data-title</span>=<span class="string">&quot;&lt;%= post.title %&gt;&quot;</span> <span class="attr">data-url</span>=<span class="string">&quot;&lt;%= page.permalink %&gt;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多说评论框 end --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> duoshuoQuery = &#123;<span class="attr">short_name</span>:<span class="string">&#x27;&lt;%= config.disqus_shortname %&gt;&#x27;</span>&#125;;</span></span><br><span class="line"><span class="language-javascript">      (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ds = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        ds.<span class="property">type</span> = <span class="string">&#x27;text/javascript&#x27;</span>;ds.<span class="property">async</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">        ds.<span class="property">src</span> = (<span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">protocol</span> == <span class="string">&#x27;https:&#x27;</span> ? <span class="string">&#x27;https:&#x27;</span> : <span class="string">&#x27;http:&#x27;</span>) + <span class="string">&#x27;//static.duoshuo.com/embed.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        ds.<span class="property">charset</span> = <span class="string">&#x27;UTF-8&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        (<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>] </span></span><br><span class="line"><span class="language-javascript">         || <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;body&#x27;</span>)[<span class="number">0</span>]).<span class="title function_">appendChild</span>(ds);</span></span><br><span class="line"><span class="language-javascript">      &#125;)();</span></span><br><span class="line"><span class="language-javascript">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多说公共JS代码 end --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AdGuardHome食用教程</title>
      <link href="/post/3d48f079.html"/>
      <url>/post/3d48f079.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><strong>简版教程</strong></p><blockquote><p>我这里使用的设备是X86架构的软路由，openwrt固件为例。</p></blockquote><p>1、点击服务 -&gt; AdGuard Home，更新核心版本，等待核心更新完成并启用 AdguardHome 插件，点击日志，如果有运行记录，则表示AdGuardHome已正常运行，如下图：<br><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/7_21_52_59_202302072152665.png" alt="image.png"><br>2、点击按钮进入 AdGuardHome，或在地址栏中输入 192.168.8.1:3000，进入后配置 AdGuardHome，配置用户名和密码。</p><blockquote><p>注意：配置 AdGuardHome 时，设置端口环节，建议手动修改，比如默认80，53，我就修改成了3000，55</p></blockquote><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/7_21_52_28_202302072152000.png" alt="image.png"><br>3、进入 AdGuardHome 控制台后，点击设置进入 DNS设置，如下图：<br><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/7_21_52_30_202302072152417.png" alt="image.png"><br>4、进入 DNS设置后，填写 上游 DNS 服务器，选择并行请求，填写 Bootstrap DNS 服务器，上游 DNS 服务器和 Bootstrap DNS 服务器已经列举在下面了，如下图：<br><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/7_21_52_32_202302072152664.png" alt="image.png"></p><blockquote><p>特别注意：Bootstrap DNS 用于解析上游DNS，所以尽可能将 Bootstrap DNS 的第一条设置为当地运营商的DNS地址（支持IPV6），当地运营商的DNS地址可通过直接命令框内使用 ipconfig &#x2F;all 查询，前提是必须网线直接插在光猫上</p></blockquote><p><strong>上游 DNS 服务器：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">114.114.114.114</span><br><span class="line">114.114.115.115</span><br><span class="line">223.5.5.5</span><br><span class="line">223.6.6.6</span><br><span class="line">119.29.29.29</span><br><span class="line">101.226.4.6</span><br><span class="line">123.125.81.6</span><br><span class="line">101.226.4.6</span><br><span class="line">101.226.4.6</span><br><span class="line">https://dns.google/dns-query</span><br><span class="line">https://dns.quad9.net/dns-query</span><br><span class="line">https://doh.opendns.com/dns-query</span><br><span class="line">https://1.1.1.1/dns-query</span><br><span class="line">tls://dns.rubyfish.cn</span><br><span class="line">tls://8.8.8.8</span><br><span class="line">tls://8.8.4.4</span><br><span class="line">tls://dns.google:853</span><br></pre></td></tr></table></figure><p><strong>Bootstrap DNS 服务器：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">180.76.76.76</span><br><span class="line">119.29.29.29</span><br><span class="line">223.5.5.5</span><br><span class="line">8.8.8.8</span><br><span class="line">8.8.4.4</span><br><span class="line">208.67.222.222</span><br></pre></td></tr></table></figure><p>5、点击 过滤器 ，选择 DNS封锁清单，添加下方合适的规则并将对应规则打钩，软后点击检查更新，如下图：<br><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/7_21_52_36_202302072152697.png" alt="image.png"><br><strong>添加规则</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://raw.githubusercontent.com/privacy-protection-tools/anti-AD/master/anti-ad-easylist.txt</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/7_21_52_40_202302072152063.png" alt="image.png"><br>6、返回 OpenWrt 的 AdGuard Home 插件设置内将重定向设置为 【重定向53端口到AdGuardHome】即可，这样我就让 AdGuardHome 生效了，如下图：<br><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/7_21_57_54_202302072157703.png" alt="image-20230207215753465"><br>7、点开网络–防火墙设置，自定义规则，将下图的端口改成AdGuardHome的端口，我设置的是55，再点重启防火墙即可。<br><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/7_21_52_45_202302072152100.png" alt="image.png"></p><p>8、设置到此完成了，可以进AdGuardHome管理页面看效果</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/7_21_52_47_202302072152162.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML添加网页背景音乐</title>
      <link href="/post/f252.html"/>
      <url>/post/f252.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="一、不显示播放器"><a href="#一、不显示播放器" class="headerlink" title="一、不显示播放器"></a>一、不显示播放器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio autoplay=&quot;&quot; loop=&quot;&quot;&gt; &lt;source src=&quot;https://h.x-wan.top/%FB5music/%B2%A4.mp3&quot;&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure><h2 id="二、显示播放器"><a href="#二、显示播放器" class="headerlink" title="二、显示播放器"></a>二、显示播放器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio autoplay=&quot;autoplay&quot; controls=&quot;controls&quot;loop=&quot;loop&quot; preload=&quot;auto&quot;src=&quot;https://h.x-wan.top/%Fmusic/%%E7%B2%A4.mp3&quot;&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure><h2 id="三、本地兼容模式"><a href="#三、本地兼容模式" class="headerlink" title="三、本地兼容模式"></a>三、本地兼容模式</h2><p>在中的title标签之下添加以下这行代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;embed src=&quot;music/We Don&#x27;t Talk Anymore.mp3&quot; autostart=&quot;true&quot; loop=&quot;true&quot; hidden=&quot;true&quot;&gt;&lt;/embed&gt;</span><br></pre></td></tr></table></figure><p>这个方式主要是支持的播放器多。一定程度上解决了浏览器兼容的问题。</p><blockquote><p>说明：<br>1、src&#x3D;””,在””内添加你音乐的保存路径。<br>2、使用hidden&#x3D;”true”表示隐藏音乐播放按钮，相反使用hidden&#x3D;”false”表示开启音乐播放按钮。<br>3、使用autostart&#x3D;”true” 表示是打开网页加载完后自动播放。<br>4、使用loop&#x3D;”true”表示 循环播放 如仅想播放一次则为：loop&#x3D;”false”</p></blockquote><h2 id="四、url兼容模式"><a href="#四、url兼容模式" class="headerlink" title="四、url兼容模式"></a>四、url兼容模式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;video controls=&quot;true&quot; autoplay=&quot;true&quot; name=&quot;media&quot; loop=&quot;true&quot; hidden=&quot;true&quot;&gt;</span><br><span class="line">&lt;source src=&quot;http://music.163.com/song/media/outer/url?id=447925558.mp3&quot; type=&quot;audio/mpeg&quot;&gt;</span><br><span class="line">&lt;/video&gt;</span><br></pre></td></tr></table></figure><p>这个方式主要是支持的播放器多。一定程度上解决了浏览器兼容的问题。</p><blockquote><p>说明：<br>1、src&#x3D;””,音乐地址<br>2、hidden&#x3D;”true”隐藏音乐播放按钮，相反使用hidden&#x3D;”false”表示开启音乐播放按钮。<br>3、autostart&#x3D;”true” 表示是打开网页加载完后自动播放。<br>4、loop&#x3D;”true”是否循环播放 如仅想播放一次则为：loop&#x3D;“false”</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenWrt固件USB网络共享上网设置</title>
      <link href="/post/openwrt-usb.html"/>
      <url>/post/openwrt-usb.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>固件下载地址:</p><p><a href="https://pan.wwang.pw/">https://pan.wwang.pw</a></p><blockquote><p>部分固件集成USB网络共享相关驱动，默认ip是192.168.5.1，密码 password<br>支持安卓手机，支持4G上网卡设备（比如华为随身wifi和中兴的设备）</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>刷好openwrt固件带usb接口的路由器，并且固件集成相关驱动。</li><li>手机的原装数据线。</li><li>路由器插电开机 ，并要完全启动（有wifi能进后台了就启动好了）。</li></ol><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>用手机数据线连接路由器usb接口和手机，再开启手机的USB网络共享</p><blockquote><p>如果是灰色的无法开启，插拔数据线再尝试开启</p></blockquote><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/7_21_47_42_202302072147687.png"></p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>1、进OP系统后台（后台地址192.168.5.1），点开【网络】–【接口】–【添加新接口】</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/7_21_47_56_202302072147472.png"></p><p>2、新接口的名称填 <strong>USBW</strong>，协议选【DHCP客户端】，接口【选以太网适配器: “usb0”】，再点【提交】</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/7_21_48_0_202302072148969.png"></p><p>3、防火墙选择<strong>WAN</strong>，再点【保存应用】</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/7_21_48_3_202302072148317.png"></p><p>4、【USBW】有ipv4和数据包了，就OK了。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/7_21_48_6_202302072148853.png"></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>每次重启路由器和手机或者是插拔数据线都要重新开启手机的【USB共享网络】。</li><li>有些手机会自动关闭【USB共享网络】，可能是开启了某项省点功能造成的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> usb上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openwrt固件无线桥接中继设置</title>
      <link href="/post/a1e6.html"/>
      <url>/post/a1e6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>总体来说openwrt相对原厂和老毛子系统，无线信号会差些，无线桥接也可能成在不稳定的情况，有条件首选网线进行联网。<br>固件下载地址:</p><blockquote><p>固件下载地址:<br><a href="http://pan.wwang.pw/">http://pan.wwang.pw</a></p></blockquote><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>1、进openwrt后台，点开【网络】–【接口】，【LAN】–【修改】，【IPv4 地址】改成不要和主路由一样的ip即可（比如改成192.168.100.1），改完再点【保存应用】，再插拔电源重启。</p><blockquote><p>如果两台路由器的ip不同，跳过这步即可。</p></blockquote><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/7_22_10_23_202302072210818.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/7_22_10_26_202302072210689.png"></p><p>2、点开【网络】–【无线】–【扫描】，找到你家路由器的WiFi名称，再点【加入】</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/7_22_10_28_202302072210215.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/7_22_10_29_202302072210686.png"></p><p>3、输入被桥接路由器的WiFi密码，再点【提交】</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/7_22_10_31_202302072210639.png"></p><p>4、跳转到下图页面，再点【保存应用】</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/7_22_10_41_202302072210871.png"></p><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>看下图，设置到此完成了，连接openwrt测试吧</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/7_22_10_45_202302072210780.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/7_22_10_47_202302072210868.png"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/7_22_10_50_202302072210005.jpeg"></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>如果需要桥接5GWiFi，先移除已添加的，近距离桥接5Gwifi速度会好很多。</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/02/7_22_10_53_202302072210119.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> 无线桥接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openwrt旁路由设置</title>
      <link href="/post/b21a.html"/>
      <url>/post/b21a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><ul><li>主路由是Padavan固件，后台ip：192.168.6.1</li><li>OpenWrt旁路由的后台ip：192.168.6.2</li></ul><h2 id="第一步旁路由的LAN口和电脑连接，进后台进行设置"><a href="#第一步旁路由的LAN口和电脑连接，进后台进行设置" class="headerlink" title="第一步旁路由的LAN口和电脑连接，进后台进行设置"></a>第一步旁路由的LAN口和电脑连接，进后台进行设置</h2><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/blog/1.5tt3anl66lg0.webp" alt="img"></p><h2 id="主路由设置"><a href="#主路由设置" class="headerlink" title="主路由设置"></a>主路由设置</h2><p><img src="https://cdn.jsdelivr.net/gh/xiaowansm5/img@master/blog/2.2e9dgqc0sce8.webp" alt="img"></p><h2 id="网线连接"><a href="#网线连接" class="headerlink" title="网线连接"></a>网线连接</h2><p>最后把旁路由的LAN口连到主路由的LAN口，再插拔电源重启两个设备，完结。</p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> 旁路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小米3G R4A C2100等路由刷固件无法启动的解决办法</title>
      <link href="/post/miqd.html"/>
      <url>/post/miqd.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>在给小米的部分型号刷固件时，偶尔会遇到无法启动的情况，具体型号有：小米3G、R4、Pro、AC2100，尤其是小米3G时常遇到。</p></blockquote><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>进入breed控制台，点开【小米3G设置】，删除<code>normal_firmware_md5</code>这一行，再点保存即可。</p><blockquote><p>也可以不删除它，把配置改了个名字（方便后续刷原厂固件）。</p></blockquote><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/8_9_32_47_202303080932075.png" alt="小米3g"></p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> breed </tag>
            
            <tag> 路由器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小米3GV2和4A千兆版breed刷固件教程</title>
      <link href="/post/d1e.html"/>
      <url>/post/d1e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="小米3GV2和4A千兆版breed刷固件教程"><a href="#小米3GV2和4A千兆版breed刷固件教程" class="headerlink" title="小米3GV2和4A千兆版breed刷固件教程"></a>小米3GV2和4A千兆版breed刷固件教程</h1><h2 id="进入breed控制台"><a href="#进入breed控制台" class="headerlink" title="进入breed控制台"></a>进入breed控制台</h2><blockquote><p>如何进breed请参考帖子：<a href="https://home.x-wan.top/archives/breed">https://home.x-wan.top/archives/breed</a></p></blockquote><h2 id="备份EEPROM"><a href="#备份EEPROM" class="headerlink" title="备份EEPROM"></a>备份EEPROM</h2><p>点【固件备份】，再点【EEPROM】下载文件保存即可</p><blockquote><p>首次刷固件需要刷入EEPROM文件，不然无线信号很差，之前刷过固件的可以忽略这步</p></blockquote><blockquote><p>所以刷好breed后，一定要记得备份EEPROM文件，如忘记备份用我网盘的也行</p></blockquote><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/8_9_31_0_202303080931630.png" alt="0.备份EEPROM"></p><h2 id="刷入固件和EEPROM文件"><a href="#刷入固件和EEPROM文件" class="headerlink" title="刷入固件和EEPROM文件"></a>刷入固件和EEPROM文件</h2><p>点【固件更新】，再选对应的固件和EEPROM，再点【上传】，再点【更新】</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/8_9_31_29_202303080931729.png" alt="1.小米4a-breed内刷OP"></p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/8_9_31_27_202303080931557.png" alt="2"></p><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>等待进度条走完，再等5分钟左右即可进后台</p><p><img src="https://gitlab.com/xiaowansm/img/-/raw/main/pictures/2023/03/8_9_31_26_202303080931136.png" alt="3"></p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> breed </tag>
            
            <tag> 刷机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>梅林固件离线安装小飞机插件提示非法关键词</title>
      <link href="/post/174a.html"/>
      <url>/post/174a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>开启路由器的SSH功能，登录并输入以下命令后，再进行离线安装。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;s/\tdetect_package/\t# detect_package/g&#x27; /koolshare/scripts/ks_tar_install.sh   </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 梅林 </tag>
            
            <tag> 纸飞机 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
